#!/usr/bin/env node
const fs = require("fs");
const path = require("path");
const chalk = require("chalk");
const version = require("../package.json").version;

if (process.argv.length < 3) printHelp();

function printHelp() {
  console.log([
    "Version " + version,
    "Syntax: " + chalk.cyan("asinit") + " [project directory]",
    "",
    chalk.white.bold("Sets up a new AssemblyScript project or updates an existing one."),
    "",
    "For example, to create a new project in the current directory:",
    "",
    "  " + chalk.cyan("asinit") + " .",
  ].join("\n"));
  process.exit(0);
}

const rl = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

const projectDir = path.resolve(process.argv[2]);
const compilerDir = path.join(__dirname, "..");
const compilerVersion = require(path.join(compilerDir, "package.json")).version;
const assemblyDir = path.join(projectDir, "assembly");
const tsconfigFile = path.join(assemblyDir, "tsconfig.json");
const definitionsFile = path.relative(assemblyDir, path.join(compilerDir, "std", "assembly.d.ts"));
const entryFile = path.join(assemblyDir, "index.ts");
const buildDir = path.join(projectDir, "build");
const gitignoreFile = path.join(buildDir, ".gitignore");
const packageFile = path.join(projectDir, "package.json");
const indexFile = path.join(projectDir, "index.js");

console.log([
  "Version: " + version,
  "",
  chalk.white.bold([
    "This command will make sure that the following files exist in the project",
    "directory '" + projectDir + "':"
  ].join("\n")),
  "",
  chalk.cyan("  ./assembly"),
  "  Directory holding the AssemblyScript sources being compiled to WebAssembly.",
  "",
  chalk.cyan("  ./assembly/tsconfig.json"),
  "  TypeScript configuration inheriting recommended AssemblyScript settings.",
  "",
  chalk.cyan("  ./assembly/index.ts"),
  "  Exemplary entry file being compiled to WebAssembly to get you started.",
  "",
  chalk.cyan("  ./build"),
  "  Build artifact directory where compiled WebAssembly files are stored.",
  "",
  chalk.cyan("  ./build/.gitignore"),
  "  Git configuration that excludes compiled binaries from source control.",
  "",
  chalk.cyan("  ./index.js"),
  "  Main file loading the WebAssembly module and exporting its exports.",
  "",
  chalk.cyan("  ./package.json"),
  "  Package info containing the necessary commands to compile to WebAssembly.",
  "",
  "The command will try to update existing files to match the correct settings",
  "for this instance of the compiler in '" + compilerDir + "'.",
  ""
].join("\n"));

rl.question(chalk.white.bold("Do you want to proceed?") + " [Y/n] ", answer => {
  if (!/^y?$/i.test(answer)) {
    process.exit(1);
    return;
  }
  console.log();
  ensureProjectDirectory();
  ensureAssemblyDirectory();
  ensureTsconfigJson();
  ensureEntryFile();
  ensureBuildDirectory();
  ensureGitignore();
  ensurePackageJson();
  ensureIndexJs();
  console.log([
    chalk.green("Done!"),
    "",
    "To edit the entry file, open '" + chalk.cyan("assembly/index.ts") + "' in your editor of choice.",
    "Create as many additional files as necessary and use them as imports.",
    "",
    "To build the entry file to WebAssembly when you are ready, run:",
    "",
    chalk.white.bold("  npm run asbuild"),
    "",
    "Running the command above creates the following binaries incl. their respective",
    "text format representations and source maps:",
    "",
    chalk.cyan("  ./build/untouched.wasm"),
    chalk.cyan("  ./build/untouched.wasm.map"),
    chalk.cyan("  ./build/untouched.wat"),
    "",
    "  ^ The untouched WebAssembly module as generated by the compiler.",
    "    This one matches your sources exactly, without any optimizations.",
    "",
    chalk.cyan("  ./build/optimized.wasm"),
    chalk.cyan("  ./build/optimized.wasm.map"),
    chalk.cyan("  ./build/optimized.wat"),
    "",
    "  ^ The optimized WebAssembly module using default optimization settings (-O2s).",
    "    You can change the optimization settings in '" + chalk.cyan("package.json")+ "'.",
    "",
    chalk.white.bold("Additional documentation is available at the AssemblyScript wiki:"),
    "",
    "  https://github.com/AssemblyScript/assemblyscript/wiki",
    "",
    "Have a nice day!"
  ].join("\n"));
  rl.close();
});

function ensureProjectDirectory() {
  console.log("- Making sure that the project directory exists...");
  if (!fs.existsSync(projectDir)) {
    fs.mkdirSync(projectDir);
    console.log(chalk.green("  Created: ") + projectDir);
  } else {
    console.log(chalk.yellow("  Exists: ") + projectDir);
  }
  console.log();
}

function ensureAssemblyDirectory() {
  console.log("- Making sure that the 'assembly' directory exists...");
  if (!fs.existsSync(assemblyDir)) {
    fs.mkdirSync(assemblyDir);
    console.log(chalk.green("  Created: ") + assemblyDir);
  } else {
    console.log(chalk.yellow("  Exists: ") + assemblyDir);
  }
  console.log();
}

function ensureTsconfigJson() {
  console.log("- Making sure that 'assembly/tsconfig.json' is set up...");
  const definitionsPath = definitionsFile.replace(/\\/g, "/");
  if (!fs.existsSync(tsconfigFile)) {
    fs.writeFileSync(tsconfigFile, JSON.stringify({
      "extends": definitionsPath,
      "include": [
        "./**/*.ts"
      ]
    }, null, 2));
    console.log(chalk.green("  Created: ") + tsconfigFile);

  } else {
    let tsconfig = JSON.parse(fs.readFileSync(tsconfigFile, "utf8"));
    tsconfig["extends"] = definitionsPath;
    fs.writeFileSync(tsconfigFile, JSON.stringify(tsconfig, null, 2));
    console.log(chalk.green("  Updated: ") + tsconfigFile);
  }
  console.log();
}

function ensureEntryFile() {
  console.log("- Making sure that 'assembly/index.ts' exists...");
  if (!fs.existsSync(entryFile)) {
    fs.writeFileSync(entryFile, [
      "// The entry file of your WebAssembly module.",
      "",
      "export function add(a: i32, b: i32): i32 {",
      "  return a + b;",
      "}"
    ].join("\n") + "\n");
    console.log(chalk.green("  Created: ") + entryFile);
  } else {
    console.log(chalk.yellow("  Exists: ") + entryFile);
  }
  console.log();
}

function ensureBuildDirectory() {
  console.log("- Making sure that the 'build' directory exists...");
  if (!fs.existsSync(buildDir)) {
    fs.mkdirSync(buildDir);
    console.log(chalk.green("  Created: ") + buildDir);
  } else {
    console.log(chalk.yellow("  Exists: ") + buildDir);
  }
  console.log();
}

function ensureGitignore() {
  console.log("- Making sure that 'build/.gitignore' is set up...");
  if (!fs.existsSync(gitignoreFile)) {
    fs.writeFileSync(gitignoreFile, [
      "*.wasm",
      "*.wasm.map",
      "*.asm.js"
    ].join("\n") + "\n");
    console.log(chalk.green("  Created: ") + gitignoreFile);
  } else {
    console.log(chalk.yellow("  Exists: ") + gitignoreFile);
  }
  console.log();
}

function ensurePackageJson() {
  console.log("- Making sure that 'package.json' contains the build commands...")
  const entryPath = path.relative(projectDir, entryFile).replace(/\\/g, "/");
  const buildUntouched = "asc " + entryPath + " -b build/untouched.wasm -t build/untouched.wat --sourceMap --validate";
  const buildOptimized = "asc " + entryPath + " -b build/optimized.wasm -t build/optimized.wat --sourceMap --validate --optimize --noDebug";
  const buildAll = "npm run asbuild:untouched && npm run asbuild:optimized";
  if (!fs.existsSync(packageFile)) {
    fs.writeFileSync(packageFile, JSON.stringify({
      "scripts": {
        "asbuild:untouched": buildUntouched,
        "asbuild:optimized": buildOptimized,
        "asbuild": buildAll
      }
    }, null, 2));
    console.log(chalk.green("  Created: ") + packageFile);
  } else {
    let pkg = JSON.parse(fs.readFileSync(packageFile));
    let scripts = pkg["scripts"];
    if (!scripts) scripts = {};
    if (!scripts["asbuild"]) {
      scripts["asbuild:untouched"] = buildUntouched;
      scripts["asbuild:optimized"] = buildOptimized;
      scripts["asbuild"] = buildAll;
      pkg["scripts"] = scripts;
      fs.writeFileSync(packageFile, JSON.stringify(pkg, null, 2));
      console.log(chalk.green("  Updated: ") + packageFile);
    } else {
      console.log(chalk.yellow("  Exists: ") + packageFile);
    }
  }
  console.log();
}

function ensureIndexJs() {
  console.log("- Making sure that 'index.js' exists...");
  if (!fs.existsSync(indexFile)) {
    fs.writeFileSync(indexFile, [
      "const fs = require(\"fs\");",
      "const compiled = new WebAssembly.Module(fs.readFileSync(__dirname + \"/build/optimized.wasm\"));",
      "const imports = {};",
      "Object.defineProperty(module, \"exports\", {",
      "  get: () => new WebAssembly.Instance(compiled, imports).exports",
      "});",
    ].join("\n") + "\n");
    console.log(chalk.green("  Created: ") + indexFile);
  } else {
    console.log(chalk.yellow("  Exists: ") + indexFile);
  }
  console.log();
}
