{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","_super","__extends","_this","apply","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","DecoratorKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","_m","USER_ENTRY","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","nameNode","typeArgumentNodes","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveExpression","ctxFlow","ctxType","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","resolveIdentifier","actualFunction","resolveLiteralExpression","resolvePropertyAccessExpression","resolveElementAccessExpression","resolveCallExpression","ensureResolvedLazyGlobal","targetNode","propertyName","indexedGet","arrayType","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","Expression_is_unsafe","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","propertyAccess","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","nameof","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","setNoUnsafe","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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M,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Resolves an expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // simply skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.resolveExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      node.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var target = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              node.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let arrayType = indexedGet.signature.returnType;\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = node.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = node.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        node.expression,\n        ctxFlow,\n        ctxType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = node.operand;\n    // TODO: operator overloads\n    switch (node.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            ctxType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        assert(typeClasses.has(TypeKind.BOOL));\n        return typeClasses.get(TypeKind.BOOL);\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!resolvedOperand) return null;\n        // TODO: matching integer type\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (node.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    name: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        name.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let literalType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        node.arguments.length > 0\n      ) {\n        return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Expression_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        let classReference = contextualType.classReference;\n        if (!classReference) {\n          this.currentType = options.usizeType;\n        } else {\n          this.currentType = classReference.type.asNullable();\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(propertyAccess);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            propertyAccess,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = fieldType.toNativeZero(module);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Expression_is_unsafe = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"Expression is unsafe.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T>(): i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n\n      // Report if there is no call signature\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, \"1\", (typeArguments ? typeArguments.length : 1).toString(10)\n        );\n        return module.unreachable();\n      }\n\n      let parameterNames = signatureReference.parameterNames;\n      return module.i32(!parameterNames ? 0 : parameterNames.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      // Check to make sure a parameter or a type was passed to the builtin\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) return module.unreachable();\n\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (!classReference) {\n          assert(resultType.signatureReference);\n          value = \"Function\";\n        } else {\n          value = classReference.name;\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          // If the kind is not set properly, throw an error.\n          // The default case falls through to satisfy that value is always set, and never null.\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (type.is(TypeFlags.REFERENCE) && signatureReference !== null) {\n        return module.i32(signatureReference.id);\n      }\n\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Obtains the dependee for a given import */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) {\n      return source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\ntry {\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n}catch (e) {}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n// @unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}