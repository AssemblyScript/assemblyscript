{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","code","message","range","relatedRange","arg0","arg1","arg2","replace","DiagnosticMessage","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","DiagnosticEmitter","Token","Range","NodeKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","Node","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","DecoratorKind","fromNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","Source","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","k","decorator","OperatorKind","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","pathLiteral","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","ElementKind","DecoratorFlags","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","QueuedExportStar","Export_declaration_conflicts_with_exported_declaration_of_0","QueuedExport","initializeImport","QueuedImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Program","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","Element","declaredElements","typedElements","RESOLVED","TypedElement","startFunction","Signature","isImport","lookup","includes","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","VariableLikeElement","ENUMVALUE","isImmutable","Parameter","index","LOCAL","Local","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FunctionTarget","FIELD_PROTOTYPE","memoryOffset","Field","firstDeclaration","getterInstance","setterInstance","Property","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","typeParameterNodes","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","Class","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","Interface","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","segment","MemorySegment","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","Module","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","atomic_fence","_BinaryenAtomicFence","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","return_call","call_indirect","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","return_call_indirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","try","catchBody","_BinaryenTry","throw","eventName","_BinaryenThrow","rethrow","exnref","_BinaryenRethrow","br_on_exn","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","pop","_BinaryenPop","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_ternary","a","b","_BinaryenSIMDTernary","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addEvent","attribute","_BinaryenAddEvent","addFunction","varTypes","_BinaryenAddFunction","getFunction","_BinaryenGetFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","addEventExport","_BinaryenAddEventExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","addEventImport","eventType","_BinaryenAddEventImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Select","Drop","Host","Nop","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","types","numTypes","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","Tokenizer","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","typeArgumentNodes","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNodes","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","getTypeOfElement","ensureResolvedLazyGlobal","SWALLOW","isTypedElement","getElementOfType","lookupExpression","ctxFlow","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","actualFunction","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","targetNode","propertyName","indexedGet","arrayType","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","i64_sub","i64_zero","intType","leftType","rightType","commonType","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","actualParent","typesToString","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","isPowerOf2","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","unsetLocalFlag","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canOverflow","WRAPPED","canConversionOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Options","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","compile","Compiler","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","typesToNativeTypes","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","findDecorator","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","Type_argument_expected","compileCallIndirect","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","Expression_is_unsafe","argumentExpressions","thisArg","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","nameof","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","Bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","v128_qfma","v128_qfms","QFMAF32x4","QFMSF32x4","QFMAF64x2","QFMSF64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","f64x2_qfma","f64x2_qfms","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","abvPrototype","isAcyclic","functionId","decompile","decompiler","Decompiler","decompileFunction","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","indentLevel","build","IDLBuilder","indent","typeToString","visitInterface","ExportsWalker","unknown","TSDBuilder","numMembers","isInterface","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","nodeIsCallable","nodeIsGenericCallable","skipBlock","depth","Parser","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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BACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYyoD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4Cl1D,GAE1C,OADAuJ,OAAOvJ,EAAKsL,QACJtL,EAAK0L,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR1L,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsC6kB,GACpC,OAAQA,GACN,KAAKpY,EAAMkpD,OAAQ,MAAO,SAC1B,KAAKlpD,EAAMwpD,GAAI,MAAO,KACtB,KAAKxpD,EAAM0R,WAAY,MAAO,aAC9B,KAAK1R,EAAM4R,IAAK,MAAO,MACvB,KAAK5R,EAAMmqD,OAAQ,MAAO,SAC1B,KAAKnqD,EAAMsV,KAAM,MAAO,OACxB,KAAKtV,EAAMsqD,MAAO,MAAO,QACzB,KAAKtqD,EAAMwqD,YAAa,MAAO,MAC/B,KAAKxqD,EAAMsR,MAAO,MAAO,IACzB,KAAKtR,EAAM+Z,SAAU,MAAO,IAC5B,KAAK/Z,EAAM6Z,YAAa,MAAO,IAC/B,KAAK7Z,EAAMga,gBAAiB,MAAO,KACnC,KAAKha,EAAM8Z,mBAAoB,MAAO,KACtC,KAAK9Z,EAAM2Z,cAAe,MAAO,KACjC,KAAK3Z,EAAM4Z,mBAAoB,MAAO,KACtC,KAAK5Z,EAAMyqD,qBAAsB,MAAO,MACxC,KAAKzqD,EAAM0qD,0BAA2B,MAAO,MAC7C,KAAK1qD,EAAM0X,KAAM,MAAO,IACxB,KAAK1X,EAAM4X,MAAO,MAAO,IACzB,KAAK5X,EAAM6Y,kBAAmB,MAAO,KACrC,KAAK7Y,EAAMuY,SAAU,MAAO,IAC5B,KAAKvY,EAAMyY,MAAO,MAAO,IACzB,KAAKzY,EAAM2Y,QAAS,MAAO,IAC3B,KAAK3Y,EAAMoa,UAAW,MAAO,KAC7B,KAAKpa,EAAMqa,YAAa,MAAO,KAC/B,KAAKra,EAAMqZ,kBAAmB,MAAO,KACrC,KAAKrZ,EAAMuZ,wBAAyB,MAAO,KAC3C,KAAKvZ,EAAMyZ,oCAAqC,MAAO,MACvD,KAAKzZ,EAAM+Y,UAAW,MAAO,IAC7B,KAAK/Y,EAAMiZ,IAAK,MAAO,IACvB,KAAKjZ,EAAMmZ,MAAO,MAAO,IACzB,KAAKnZ,EAAMka,YAAa,MAAO,IAC/B,KAAKla,EAAMma,MAAO,MAAO,IACzB,KAAKna,EAAM2qD,oBAAqB,MAAO,KACvC,KAAK3qD,EAAM4qD,QAAS,MAAO,KAC3B,KAAK5qD,EAAM6qD,OAAQ,MAAO,IAC1B,KAAK7qD,EAAMqY,YAAa,MAAO,KAC/B,KAAKrY,EAAMsY,aAAc,MAAO,KAChC,KAAKtY,EAAMwY,gBAAiB,MAAO,KACnC,KAAKxY,EAAM8Y,yBAA0B,MAAO,MAC5C,KAAK9Y,EAAM0Y,aAAc,MAAO,KAChC,KAAK1Y,EAAM4Y,eAAgB,MAAO,KAClC,KAAK5Y,EAAMsZ,yBAA0B,MAAO,MAC5C,KAAKtZ,EAAMwZ,+BAAgC,MAAO,MAClD,KAAKxZ,EAAM0Z,2CAA4C,MAAO,OAC9D,KAAK1Z,EAAMgZ,iBAAkB,MAAO,KACpC,KAAKhZ,EAAMkZ,WAAY,MAAO,KAC9B,KAAKlZ,EAAMoZ,aAAc,MAAO,KAChC,QAEE,OADAtc,QAAO,GACA,KAKb,iBAUE,WAAYuB,EAAgBS,EAAYC,GA6CxC,KAAA6uB,aAAsB,EA5CpBj7B,KAAK0L,OAASA,EACd1L,KAAKmM,MAAQA,EACbnM,KAAKoM,IAAMA,EA2Cf,OAxCS,EAAAM,KAAP,SAAYmyC,EAAUC,GACpB,GAAID,EAAEnzC,QAAUozC,EAAEpzC,OAAQ,MAAM,IAAI2jB,MAAM,mBAC1C,OAAO,IAAI/hB,EAAMuxC,EAAEnzC,OACjBmzC,EAAE1yC,MAAQ2yC,EAAE3yC,MAAQ0yC,EAAE1yC,MAAQ2yC,EAAE3yC,MAChC0yC,EAAEzyC,IAAM0yC,EAAE1yC,IAAMyyC,EAAEzyC,IAAM0yC,EAAE1yC,MAI9B,sBAAI,sBAAO,C,IAAX,WACE,OAAO,IAAIkB,EAAMtN,KAAK0L,OAAQ1L,KAAKmM,MAAOnM,KAAKmM,Q,gCAGjD,sBAAI,oBAAK,C,IAAT,WACE,OAAO,IAAImB,EAAMtN,KAAK0L,OAAQ1L,KAAKoM,IAAKpM,KAAKoM,M,gCAG/C,sBAAI,mBAAI,C,IAAR,WAGE,IAFA,IAAIJ,EAAOhM,KAAK0L,OAAOM,KACnBJ,EAAO,EACFsU,EAAMlgB,KAAKmM,MAAO+T,GAAO,IAAKA,EACT,IAAxBlU,EAAKM,WAAW4T,IAA2BtU,IAEjD,OAAOA,G,gCAGT,sBAAI,qBAAM,C,IAAV,WAGE,IAFA,IAAII,EAAOhM,KAAK0L,OAAOM,KACnBH,EAAS,EACJqU,EAAMlgB,KAAKmM,MAAQ,EAAG+T,GAAO,GACR,IAAxBlU,EAAKM,WAAW4T,KADqBA,IAEvCrU,EAEJ,OAAOA,G,gCAGT,YAAAJ,SAAA,WACE,OAAOzL,KAAK0L,OAAOM,KAAKQ,UAAUxM,KAAKmM,MAAOnM,KAAKoM,MAIvD,EAxDA,GAAa,EAAAkB,QAgEb,kBAgBE,WAAY5B,EAAgBkB,QAAA,IAAAA,MAAA,MAA5B,MACE,YAAMA,IAAY,KAdpB,EAAAR,IAAW,EAEX,EAAA8T,IAAW,EACX,EAAAuF,OAAgB,EAChB,EAAA0yC,SAAgB,EAEhB,EAAAC,WAAoB,EACpB,EAAAC,aAAoB,EACpB,EAAAC,oBAA2B,EAE3B,EAAAC,UAAmC,KAMjC,EAAK7sD,OAASA,EACd,EAAKwU,IAAM,EACX,EAAK9T,IAAMV,EAAOM,KAAKE,OACvB,EAAKU,YAAcA,GAAe,IAAIpF,MAEtC,IAAI4E,EAAM,EAAKA,IACXJ,EAAON,EAAOM,KAWlB,GAPE,EAAKkU,IAAM9T,GACkB,OAA7BJ,EAAKM,WAAW,EAAK4T,QAEnB,EAAKA,IAKP,EAAKA,IAAM,EAAI9T,GACc,IAA7BJ,EAAKM,WAAW,EAAK4T,MACY,IAAjClU,EAAKM,WAAW,EAAK4T,IAAM,GAG3B,IADA,EAAKA,KAAO,EAEV,EAAKA,IAAM9T,GACkB,IAA7BJ,EAAKM,WAAW,EAAK4T,QAEnB,EAAKA,I,SA8iCf,OA5lC+B,OAoD7B,YAAA1R,KAAA,SAAKgqD,GAEH,YAFG,IAAAA,MAAyC1C,EAAmBQ,SAC/Dt2D,KAAKo4D,WAAa,EACXp4D,KAAKylB,MAAQzlB,KAAKy4D,WAAWD,IAG9B,YAAAC,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC1C,EAAmBQ,cAC5D,IAAAoC,MAAsBt1D,IAAIikD,WAI1B,IAFA,IAAIj7C,EAAMpM,KAAKoM,IACXJ,EAAOhM,KAAK0L,OAAOM,KAChBhM,KAAKkgB,IAAM9T,GAAK,CACrBpM,KAAKm4D,SAAWn4D,KAAKkgB,IACrB,IAAIxf,EAAIsL,EAAKM,WAAWtM,KAAKkgB,KAC7B,OAAQxf,GACN,KAAK,GACH,OACIV,KAAKkgB,IAAM9T,GACgB,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,MACpB,MAGL,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,KACDlgB,KAAKkgB,IACP,MAEF,KAAK,GAEH,QADElgB,KAAKkgB,IAELw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,GACJ,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IAELw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,GACJ,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAM0qD,2BAER1qD,EAAM4Z,oBAER5Z,EAAMka,YAEf,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAOla,EAAMsrD,cAEf,KAAK,GAEH,QADE34D,KAAKkgB,IAELw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,GACJ,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAM4Y,gBAER5Y,EAAM2Y,QAEf,KAAK,GAEH,KADEhmB,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IACA7S,EAAM2qD,oBAEf,GAAW,IAAPY,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMgZ,iBAGjB,OAAOhZ,EAAM+Y,UAEf,KAAK,GAEH,QADEpmB,KAAKkgB,IACA7S,EAAMwrD,UAEf,KAAK,GAEH,QADE74D,KAAKkgB,IACA7S,EAAMyrD,WAEf,KAAK,GAEH,KADE94D,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IACA7S,EAAMwY,gBAEf,GAAW,IAAP+yC,EAEF,QADE54D,KAAKkgB,IAELw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,GACJ,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAM8Y,0BAER9Y,EAAM6Y,kBAGjB,OAAO7Y,EAAMuY,SAEf,KAAK,GAEH,KADE5lB,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IACA7S,EAAMoa,UAEf,GAAW,IAAPmxC,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMqY,YAGjB,OAAOrY,EAAM0X,KAEf,KAAK,GAEH,QADE/kB,KAAKkgB,IACA7S,EAAMsR,MAEf,KAAK,GAEH,KADE3e,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IACA7S,EAAMqa,YAEf,GAAW,IAAPkxC,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMsY,aAGjB,OAAOtY,EAAM4X,MAEf,KAAK,GAEH,KADEjlB,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CACxC,IAAIwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,KAC/B,GAAI,EAAA64C,eAAeH,GAEjB,QADE54D,KAAKkgB,IACA7S,EAAM2rD,aAEf,GACEN,EAAiB,GAAK14D,KAAKkgB,IAAM,EAAI9T,GAC9B,IAAPwsD,GACiC,IAAjC5sD,EAAKM,WAAWtM,KAAKkgB,IAAM,GAG3B,OADAlgB,KAAKkgB,KAAO,EACL7S,EAAMwqD,YAGjB,OAAOxqD,EAAM4rD,IAEf,KAAK,GACH,IAAIC,EAAkBl5D,KAAKkgB,IAE3B,KADElgB,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MACJ,CACzB,IAAIvP,EAAc,EAAAoN,YAAYo7C,KAQ9B,IANEn5D,KAAKkgB,IAAM,EAAI9T,GACkB,IAAjCJ,EAAKM,WAAWtM,KAAKkgB,IAAM,OAEzBlgB,KAAKkgB,IACPvP,EAAc,EAAAoN,YAAYq7C,UAEnBp5D,KAAKkgB,IAAM9T,GAClB,GAAiC,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,KAA2B,GAChDlgB,KAAKkgB,IACP,MAGAlgB,KAAKu4D,WACPv4D,KAAKu4D,UACH5nD,EACA3E,EAAKQ,UAAU0sD,EAAiBl5D,KAAKkgB,KACrClgB,KAAK6K,MAAMquD,EAAiBl5D,KAAKkgB,MAGrC,MAEF,GAAW,IAAP04C,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJr5D,KAAKkgB,IAAM9T,GAElB,GACO,KAFP1L,EAAIsL,EAAKM,WAAWtM,KAAKkgB,OAGvBlgB,KAAKkgB,IAAM,EAAI9T,GACkB,IAAjCJ,EAAKM,WAAWtM,KAAKkgB,IAAM,GAC3B,CACAlgB,KAAKkgB,KAAO,EACZm5C,GAAS,EACT,MAGCA,EAKMr5D,KAAKu4D,WACdv4D,KAAKu4D,UACH,EAAAx6C,YAAY4C,MACZ3U,EAAKQ,UAAU0sD,EAAiBl5D,KAAKkgB,KACrClgB,KAAK6K,MAAMquD,EAAiBl5D,KAAKkgB,MARnClgB,KAAKkN,MACH,EAAA1C,eAAe8uD,YACft5D,KAAK6K,MAAM7K,KAAKkgB,KAAM,MAS1B,MAEF,GAAW,IAAP04C,EAEF,QADE54D,KAAKkgB,IACA7S,EAAM0Y,aAGjB,OAAO1Y,EAAMyY,MAEf,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACH,OAAO9lB,KAAKu5D,cACRlsD,EAAMmsD,eACNnsD,EAAM2rD,aAEZ,KAAK,GAEH,QADEh5D,KAAKkgB,IACA7S,EAAMosD,MAEf,KAAK,GAEH,QADEz5D,KAAKkgB,IACA7S,EAAMqsD,UAEf,KAAK,GAEH,KADE15D,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IAELw4C,EAAiB,GACjB14D,KAAKkgB,IAAM9T,GACkB,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAMsZ,0BAERtZ,EAAMqZ,kBAEf,GAAW,IAAPkyC,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMga,gBAGjB,OAAOha,EAAM+Z,SAEf,KAAK,GAEH,KADEpnB,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IAELw4C,EAAiB,GACjB14D,KAAKkgB,IAAM9T,GACkB,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAMyqD,sBAERzqD,EAAM2Z,cAEf,GAAW,IAAP4xC,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMssD,mBAGjB,OAAOtsD,EAAM6qD,OAEf,KAAK,GAEH,KADEl4D,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MACE,CAE/B,KADElgB,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,KADXwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAGzB,QADElgB,KAAKkgB,IAELw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,GACJ,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAM0Z,4CAER1Z,EAAMyZ,oCAEf,GAAW,IAAP8xC,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMwZ,+BAGjB,OAAOxZ,EAAMuZ,wBAEf,GAAW,IAAPgyC,EAEF,QADE54D,KAAKkgB,IACA7S,EAAM8Z,mBAGjB,OAAO9Z,EAAM6Z,YAEf,KAAK,GAEH,QADElnB,KAAKkgB,IACA7S,EAAMusD,SAEf,KAAK,GAEH,QADE55D,KAAKkgB,IACA7S,EAAMwsD,YAEf,KAAK,GAEH,QADE75D,KAAKkgB,IACA7S,EAAMysD,aAEf,KAAK,GAEH,QADE95D,KAAKkgB,IAELw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,GACJ,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACA7S,EAAMoZ,cAERpZ,EAAMmZ,MAEf,KAAK,IAEH,QADExmB,KAAKkgB,IACA7S,EAAM0sD,UAEf,KAAK,IAEH,KADE/5D,KAAKkgB,IACHw4C,EAAiB,GAAK14D,KAAKkgB,IAAM9T,EAAK,CAExC,GAAW,MADPwsD,EAAM5sD,EAAKM,WAAWtM,KAAKkgB,MAG7B,QADElgB,KAAKkgB,IACA7S,EAAM4qD,QAEf,GAAW,IAAPW,EAEF,QADE54D,KAAKkgB,IACA7S,EAAMkZ,WAGjB,OAAOlZ,EAAMiZ,IAEf,KAAK,IAEH,QADEtmB,KAAKkgB,IACA7S,EAAM2sD,WAEf,KAAK,IAEH,QADEh6D,KAAKkgB,IACA7S,EAAMma,MAEf,KAAK,GAEH,QADExnB,KAAKkgB,IACA7S,EAAM4sD,GAEf,QACE,GAAI,EAAAC,kBAAkBx5D,GAAI,CACxB,GAAI,EAAAy5D,mBAAmBz5D,GAAI,CAEzB,IADA,IAAI05D,EAAYp6D,KAAKkgB,MAEjBlgB,KAAKkgB,IAAM9T,GACb,EAAAiuD,iBAAiB35D,EAAIsL,EAAKM,WAAWtM,KAAKkgB,OAE1C,IAAK,EAAAi6C,mBAAmBz5D,GAEtB,OADAV,KAAKkgB,IAAMk6C,EACJ/sD,EAAMQ,WAGjB,IACIysD,EAAevE,EADD/pD,EAAKQ,UAAU4tD,EAAWp6D,KAAKkgB,MAEjD,GACEo6C,IAAiBjtD,EAAMkY,SACvBizC,IAAuB1C,EAAmByE,SAExC/B,IAAuB1C,EAAmB0E,SAC1C5C,EAAsB0C,IAGxB,OAAOA,EAETt6D,KAAKkgB,IAAMk6C,EAEb,OAAO/sD,EAAMQ,WACR,GAAI,EAAA4sD,aAAa/5D,GAAI,GACxBV,KAAKkgB,IACP,MAOF,OALAlgB,KAAKkN,MACH,EAAA1C,eAAekwD,kBACf16D,KAAK6K,MAAM7K,KAAKkgB,IAAKlgB,KAAKkgB,IAAM,MAEhClgB,KAAKkgB,IACA7S,EAAMkY,SAInB,OAAOlY,EAAMstD,WAGf,YAAAC,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyC1C,EAAmBQ,cAC5D,IAAAwE,MAAyB13D,IAAIikD,WAE7B,IAAIr7C,EAAOhM,KAAK0L,OAAOM,KACvB,GAAIhM,KAAKo4D,UAAY,EAAG,CACtB,IAAIgC,EAAYp6D,KAAKkgB,IACjB66C,EAAc/6D,KAAKylB,MACnBu1C,EAAiBh7D,KAAKm4D,SAG1B,GAFAn4D,KAAKo4D,UAAYp4D,KAAKy4D,WAAWD,EAAoBsC,GACrD96D,KAAKq4D,aAAer4D,KAAKm4D,SACrB0C,EAAgB,CAClB76D,KAAKs4D,oBAAqB,EAC1B,IAAK,IAAIp4C,EAAMk6C,EAAWhuD,EAAMpM,KAAKq4D,aAAcn4C,EAAM9T,IAAO8T,EAC9D,GAAI,EAAA7T,YAAYL,EAAKM,WAAW4T,IAAO,CACrClgB,KAAKs4D,oBAAqB,EAC1B,OAINt4D,KAAKkgB,IAAMk6C,EACXp6D,KAAKylB,MAAQs1C,EACb/6D,KAAKm4D,SAAW6C,EAElB,OAAOh7D,KAAKo4D,WAGd,YAAA6C,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyC1C,EAAmB0E,QAClEx6D,KAAKk7D,KAAK7tD,EAAMQ,WAAY2qD,IAGrC,YAAA0C,KAAA,SAAKz1C,EAAc+yC,QAAA,IAAAA,MAAyC1C,EAAmBQ,SAC7E,IAAI8D,EAAYp6D,KAAKkgB,IACjB66C,EAAc/6D,KAAKylB,MACnBu1C,EAAiBh7D,KAAKm4D,SACtB2C,EAAoB13D,IAAIikD,UAC5B,OAAQ5hC,GACN,KAAKpY,EAAM6Z,YACT4zC,EAAoB,EAKxB,OADA96D,KAAKylB,MAAQzlB,KAAKy4D,WAAWD,EAAoBsC,GAC7C96D,KAAKylB,OAASA,GAChBzlB,KAAKo4D,WAAa,GACX,IAEPp4D,KAAKkgB,IAAMk6C,EACXp6D,KAAKylB,MAAQs1C,EACb/6D,KAAKm4D,SAAW6C,GACT,IAIX,YAAAG,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMl7C,IAAMlgB,KAAKkgB,IACjBk7C,EAAM31C,MAAQzlB,KAAKylB,MACnB21C,EAAMjD,SAAWn4D,KAAKm4D,SACfiD,GAGT,YAAAG,QAAA,SAAQH,GACNC,EAAgBD,GAGlB,YAAAI,MAAA,SAAMJ,GACJp7D,KAAKkgB,IAAMk7C,EAAMl7C,IACjBlgB,KAAKylB,MAAQ21C,EAAM31C,MACnBzlB,KAAKm4D,SAAWiD,EAAMjD,SACtBn4D,KAAKo4D,WAAa,GAGpB,YAAAvtD,MAAA,SAAMsB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQnM,KAAKm4D,SACb/rD,EAAMpM,KAAKkgB,KACF9T,EAAM,IACfA,EAAMD,GAED,IAAImB,EAAMtN,KAAK0L,OAAQS,EAAOC,IAGvC,YAAAqvD,eAAA,WAIE,IAHA,IAAIzvD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb9T,EAAMpM,KAAKoM,MAEXpM,KAAKkgB,IAAM9T,GACb,EAAAiuD,iBAAiBruD,EAAKM,WAAWtM,KAAKkgB,QAExC,OAAOlU,EAAKQ,UAAUL,EAAOnM,KAAKkgB,MAGpC,YAAAwmC,WAAA,WAME,IALA,IAAI16C,EAAOhM,KAAK0L,OAAOM,KACnB0vD,EAAQ1vD,EAAKM,WAAWtM,KAAKkgB,OAC7B/T,EAAQnM,KAAKkgB,IACb9T,EAAMpM,KAAKoM,IACXsqC,EAAS,KACA,CACX,GAAI12C,KAAKkgB,KAAO9T,EAAK,CACnBsqC,GAAU1qC,EAAKQ,UAAUL,EAAOnM,KAAKkgB,KACrClgB,KAAKkN,MACH,EAAA1C,eAAemxD,4BACf37D,KAAK6K,MAAMsB,EAAQ,EAAGC,IAExB,MAEF,IAAI1L,EAAIsL,EAAKM,WAAWtM,KAAKkgB,KAC7B,GAAIxf,GAAKg7D,EAAO,CACdhlB,GAAU1qC,EAAKQ,UAAUL,EAAOnM,KAAKkgB,OACrC,MAEF,GAAS,IAALxf,EAAJ,CAMA,GAAI,EAAA2L,YAAY3L,IAAe,IAATg7D,EAA4B,CAChDhlB,GAAU1qC,EAAKQ,UAAUL,EAAOnM,KAAKkgB,KACrClgB,KAAKkN,MACH,EAAA1C,eAAemxD,4BACf37D,KAAK6K,MAAMsB,EAAQ,EAAGnM,KAAKkgB,MAE7B,QAEAlgB,KAAKkgB,SAbLw2B,GAAU1qC,EAAKQ,UAAUL,EAAOnM,KAAKkgB,KACrCw2B,GAAU12C,KAAK47D,qBACfzvD,EAAQnM,KAAKkgB,IAajB,OAAOw2B,GAGT,YAAAklB,mBAAA,WACE,IAAIxvD,EAAMpM,KAAKoM,IACf,KAAMpM,KAAKkgB,KAAO9T,EAKhB,OAJApM,KAAKkN,MACH,EAAA1C,eAAeqxD,uBACf77D,KAAK6K,MAAMuB,IAEN,GAGT,IAAIJ,EAAOhM,KAAK0L,OAAOM,KACnBtL,EAAIsL,EAAKM,WAAWtM,KAAKkgB,OAC7B,OAAQxf,GACN,KAAK,GAAa,MAAO,KACzB,KAAK,GAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,IAAY,MAAO,KACxB,KAAK,GAAsB,MAAO,IAClC,KAAK,GAAsB,MAAO,IAClC,KAAK,IACH,OACEV,KAAKkgB,IAAM9T,GACkB,KAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IACAlgB,KAAK87D,6BAEP97D,KAAK+7D,oBAEd,KAAK,GAED/7D,KAAKkgB,IAAM9T,GACkB,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,QAEnBlgB,KAAKkgB,IAIX,KAAK,GACL,KAAK,KACL,KAAK,KAA6B,MAAO,GACzC,QAAS,OAAO3Y,OAAOy0D,aAAat7D,KAIxC,YAAAu7D,kBAAA,WAKE,IAJA,IAAIjwD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb9T,EAAMpM,KAAKoM,IACX8vD,GAAU,IACD,CACX,GAAIl8D,KAAKkgB,KAAO9T,EAAK,CACnBpM,KAAKkN,MACH,EAAA1C,eAAe2xD,wCACfn8D,KAAK6K,MAAMsB,EAAOC,IAEpB,MAEF,GAAiC,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,KAAzB,CAKA,IAAIxf,EAAIsL,EAAKM,WAAWtM,KAAKkgB,KAC7B,IAAKg8C,GAAgB,IAALx7D,EAAqB,MACrC,GAAI,EAAA2L,YAAY3L,GAAI,CAClBV,KAAKkN,MACH,EAAA1C,eAAe2xD,wCACfn8D,KAAK6K,MAAMsB,EAAOnM,KAAKkgB,MAEzB,QAEAlgB,KAAKkgB,IACPg8C,GAAU,QAdNl8D,KAAKkgB,IACPg8C,GAAU,EAed,OAAOlwD,EAAKQ,UAAUL,EAAOnM,KAAKkgB,MAGpC,YAAAk8C,gBAAA,WAKE,IAJA,IAAIpwD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb9T,EAAMpM,KAAKoM,IACXmI,EAAQ,EACLvU,KAAKkgB,IAAM9T,GAAK,CACrB,IAAI1L,EAASsL,EAAKM,WAAWtM,KAAKkgB,KAClC,IAAK,EAAAm6C,iBAAiB35D,GAAI,MAI1B,SAHEV,KAAKkgB,IAGCxf,GACN,KAAK,IACH6T,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,KAAK,IACHA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFvU,KAAKkN,MACH,EAAA1C,eAAe6xD,iCACfr8D,KAAK6K,MAAMsB,EAAOnM,KAAKkgB,MAGpBlU,EAAKQ,UAAUL,EAAOnM,KAAKkgB,MAGpC,YAAAq5C,YAAA,WACE,IAAIntD,EAAMpM,KAAKoM,IACXJ,EAAOhM,KAAK0L,OAAOM,KACvB,GAAIhM,KAAKkgB,IAAM,EAAI9T,GAAoC,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,KAC7C,OAAQlU,EAAKM,WAAWtM,KAAKkgB,IAAM,IACjC,KAAK,IACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,GAAY,OAAO,EAI5B,IADA,IAAIA,EAAMlgB,KAAKkgB,IACRA,EAAM9T,GAAK,CAChB,IAAI1L,EAAIsL,EAAKM,WAAW4T,GACxB,GAAS,IAALxf,GAA0B,KAALA,GAAwB,IAALA,EAAiB,OAAO,EACpE,IAAKA,EAAI,IAAeA,EAAI,KAAqB,IAALA,EAAiB,MAE7Dwf,IAEF,OAAO,GAGT,YAAAo8C,YAAA,WACE,IAAItwD,EAAOhM,KAAK0L,OAAOM,KACvB,GAAIhM,KAAKkgB,IAAM,EAAIlgB,KAAKoM,KAAoC,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,KAAqB,CACvE,OAAQlU,EAAKM,WAAWtM,KAAKkgB,IAAM,IACjC,KAAK,IACL,KAAK,GAEH,OADAlgB,KAAKkgB,KAAO,EACLlgB,KAAKu8D,iBAEd,KAAK,GACL,KAAK,GAEH,OADAv8D,KAAKkgB,KAAO,EACLlgB,KAAKw8D,oBAEd,KAAK,IACL,KAAK,GAEH,OADAx8D,KAAKkgB,KAAO,EACLlgB,KAAKy8D,mBAGhB,GAAI,EAAAC,aAAa1wD,EAAKM,WAAWtM,KAAKkgB,IAAM,IAAK,CAC/C,IAAI/T,EAAQnM,KAAKkgB,MACflgB,KAAKkgB,IACP,IAAI5e,EAAQtB,KAAKy8D,mBAKjB,OAJAz8D,KAAKkN,MACH,EAAA1C,eAAemyD,8CACf38D,KAAK6K,MAAMsB,EAAOnM,KAAKkgB,MAElB5e,GAGX,OAAOtB,KAAK48D,sBAGd,YAAAL,eAAA,WAOE,IANA,IAAIvwD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb5e,EAAQupB,QAAQ,GAChBgyC,EAAQhyC,QAAQ,GAChBiyC,EAAS3wD,EACTC,EAAMpM,KAAKoM,IACRpM,KAAKkgB,IAAM9T,GAAK,CACrB,IAAI8T,EAAMlgB,KAAKkgB,IACXxf,EAAIsL,EAAKM,WAAW4T,GACxB,GAAIxf,GAAK,IAAeA,GAAK,GAE3BY,EAAQy7D,QACNC,QAAQ17D,EAAOu7D,GACfhyC,QAAQnqB,EAAI,UAER,GAAIA,GAAK,IAAcA,GAAK,GAElCY,EAAQy7D,QACNC,QAAQ17D,EAAOu7D,GACfhyC,QAAQ,GAAKnqB,EAAI,UAEd,GAAIA,GAAK,IAAcA,GAAK,IAEjCY,EAAQy7D,QACNC,QAAQ17D,EAAOu7D,GACfhyC,QAAQ,GAAKnqB,EAAI,SAEd,IAAS,IAALA,EAWT,MAVIo8D,GAAU58C,GACZlgB,KAAKkN,MACH4vD,GAAU3wD,EACN,EAAA3B,eAAeyyD,wCACf,EAAAzyD,eAAe0yD,0DACnBl9D,KAAK6K,MAAMqV,IAGf48C,EAAS58C,EAAM,EAIjBlgB,KAAKkgB,IAAMA,EAAM,EAanB,OAXIlgB,KAAKkgB,KAAO/T,EACdnM,KAAKkN,MACH,EAAA1C,eAAe2yD,2BACfn9D,KAAK6K,MAAMsB,IAEJ2wD,GAAU98D,KAAKkgB,KACxBlgB,KAAKkN,MACH,EAAA1C,eAAeyyD,wCACfj9D,KAAK6K,MAAMiyD,EAAS,IAGjBx7D,GAGT,YAAAs7D,mBAAA,WAOE,IANA,IAAI5wD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb9T,EAAMpM,KAAKoM,IACX9K,EAAQupB,QAAQ,GAChBuyC,EAASvyC,QAAQ,IACjBiyC,EAAS3wD,EACNnM,KAAKkgB,IAAM9T,GAAK,CACrB,IAAI8T,EAAMlgB,KAAKkgB,IACXxf,EAAIsL,EAAKM,WAAW4T,GACxB,GAAIxf,GAAK,IAAeA,GAAK,GAE3BY,EAAQy7D,QACNM,QAAQ/7D,EAAO87D,GACfvyC,QAAQnqB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIo8D,GAAU58C,GACZlgB,KAAKkN,MACH4vD,GAAU3wD,EACN,EAAA3B,eAAeyyD,wCACf,EAAAzyD,eAAe0yD,0DACnBl9D,KAAK6K,MAAMqV,IAGf48C,EAAS58C,EAAM,EAIjBlgB,KAAKkgB,IAAMA,EAAM,EAanB,OAXIlgB,KAAKkgB,KAAO/T,EACdnM,KAAKkN,MACH,EAAA1C,eAAe8yD,eACft9D,KAAK6K,MAAMsB,IAEJ2wD,GAAU98D,KAAKkgB,KACxBlgB,KAAKkN,MACH,EAAA1C,eAAeyyD,wCACfj9D,KAAK6K,MAAMiyD,EAAS,IAGjBx7D,GAGT,YAAAm7D,iBAAA,WAOE,IANA,IAAIzwD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb5e,EAAQupB,QAAQ,GAChB0yC,EAAQ1yC,QAAQ,GAChBiyC,EAAS3wD,EACTC,EAAMpM,KAAKoM,IACRpM,KAAKkgB,IAAM9T,GAAK,CACrB,IAAI8T,EAAMlgB,KAAKkgB,IACXxf,EAAIsL,EAAKM,WAAW4T,GACxB,GAAIxf,GAAK,IAAeA,GAAK,GAE3BY,EAAQy7D,QACNC,QAAQ17D,EAAOi8D,GACf1yC,QAAQnqB,EAAI,SAET,IAAS,IAALA,EAWT,MAVIo8D,GAAU58C,GACZlgB,KAAKkN,MACH4vD,GAAU3wD,EACN,EAAA3B,eAAeyyD,wCACf,EAAAzyD,eAAe0yD,0DACnBl9D,KAAK6K,MAAMqV,IAGf48C,EAAS58C,EAAM,IAIflgB,KAAKkgB,IAaT,OAXIlgB,KAAKkgB,KAAO/T,EACdnM,KAAKkN,MACH,EAAA1C,eAAegzD,qBACfx9D,KAAK6K,MAAMsB,IAEJ2wD,GAAU98D,KAAKkgB,KACxBlgB,KAAKkN,MACH,EAAA1C,eAAeyyD,wCACfj9D,KAAK6K,MAAMiyD,EAAS,IAGjBx7D,GAGT,YAAAk7D,kBAAA,WAOE,IANA,IAAIxwD,EAAOhM,KAAK0L,OAAOM,KACnBG,EAAQnM,KAAKkgB,IACb5e,EAAQupB,QAAQ,GAChB4yC,EAAQ5yC,QAAQ,GAChBiyC,EAAS3wD,EACTC,EAAMpM,KAAKoM,IACRpM,KAAKkgB,IAAM9T,GAAK,CACrB,IAAI8T,EAAMlgB,KAAKkgB,IACXxf,EAAIsL,EAAKM,WAAW4T,GACxB,GAAS,IAALxf,EAEFY,EAAQ07D,QAAQ17D,EAAOm8D,QAClB,GAAS,IAAL/8D,EAETY,EAAQy7D,QACNC,QAAQ17D,EAAOm8D,GACfA,OAEG,IAAS,IAAL/8D,EAWT,MAVIo8D,GAAU58C,GACZlgB,KAAKkN,MACH4vD,GAAU3wD,EACN,EAAA3B,eAAeyyD,wCACf,EAAAzyD,eAAe0yD,0DACnBl9D,KAAK6K,MAAMqV,IAGf48C,EAAS58C,EAAM,EAIjBlgB,KAAKkgB,IAAMA,EAAM,EAanB,OAXIlgB,KAAKkgB,KAAO/T,EACdnM,KAAKkN,MACH,EAAA1C,eAAekzD,sBACf19D,KAAK6K,MAAMsB,IAEJ2wD,GAAU98D,KAAKkgB,KACxBlgB,KAAKkN,MACH,EAAA1C,eAAeyyD,wCACfj9D,KAAK6K,MAAMiyD,EAAS,IAGjBx7D,GAGT,YAAAq8D,UAAA,WAWE,OAAO39D,KAAK49D,oBAGd,YAAAA,iBAAA,WAKE,IAHA,IAAIzxD,EAAQnM,KAAKkgB,IACb9T,EAAMpM,KAAKoM,IACXJ,EAAOhM,KAAK0L,OAAOM,KAChBhM,KAAKkgB,IAAM9T,GAAO,EAAA2sD,eAAe/sD,EAAKM,WAAWtM,KAAKkgB,SACzDlgB,KAAKkgB,IAET,GAAIlgB,KAAKkgB,IAAM9T,GAAoC,IAA7BJ,EAAKM,WAAWtM,KAAKkgB,KAEzC,MADElgB,KAAKkgB,IACAlgB,KAAKkgB,IAAM9T,GAAO,EAAA2sD,eAAe/sD,EAAKM,WAAWtM,KAAKkgB,SACzDlgB,KAAKkgB,IAGX,GAAIlgB,KAAKkgB,IAAM9T,EAAK,CAClB,IAAI1L,EAAIsL,EAAKM,WAAWtM,KAAKkgB,KAC7B,GAAS,KAALxf,GAAwB,IAALA,EAQrB,OANIV,KAAKkgB,IAAM9T,GACsB,KAAlC1L,EAAIsL,EAAKM,WAAWtM,KAAKkgB,OAAgC,IAALxf,GACrD,EAAAq4D,eAAe/sD,EAAKM,WAAWtM,KAAKkgB,IAAM,QAExClgB,KAAKkgB,IAEFlgB,KAAKkgB,IAAM9T,GAAO,EAAA2sD,eAAe/sD,EAAKM,WAAWtM,KAAKkgB,SACzDlgB,KAAKkgB,IAIb,OAAO29C,WAAW7xD,EAAKQ,UAAUL,EAAOnM,KAAKkgB,OAG/C,YAAA49C,aAAA,WACE,MAAM,IAAIzuC,MAAM,oBAGlB,YAAA0sC,kBAAA,WAKE,IAJA,IAAIgC,EAAS,EACTz8D,EAAQ,EACR8K,EAAMpM,KAAKoM,IACXJ,EAAOhM,KAAK0L,OAAOM,KAChBhM,KAAKkgB,IAAM9T,GAAK,CACrB,IAAI1L,EAAIsL,EAAKM,WAAWtM,KAAKkgB,OAC7B,GAAIxf,GAAK,IAAeA,GAAK,GAC3BY,GAASA,GAAS,GAAKZ,EAAI,QACtB,GAAIA,GAAK,IAAcA,GAAK,GACjCY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAK,IAAcA,GAAK,KAOjC,OAJAV,KAAKkN,MACH,EAAA1C,eAAe2yD,2BACfn9D,KAAK6K,MAAM7K,KAAKkgB,IAAM,EAAGlgB,KAAKkgB,MAEzB,GANP5e,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAVq9D,EAAa,MAErB,OAAIA,GACF/9D,KAAKkN,MACH,EAAA1C,eAAeqxD,uBACf77D,KAAK6K,MAAM7K,KAAKkgB,MAEX,IAEF3Y,OAAOy0D,aAAa16D,IAGrB,YAAAw6D,0BAAR,WACE,IAAI3vD,EAAQnM,KAAKkgB,IACb5e,EAAQtB,KAAKu8D,iBACbyB,EAAUrb,QAAQrhD,GAClB28D,GAAU,EAEd9zD,QAAQy4C,SAASthD,IACb08D,EAAU,UACZh+D,KAAKkN,MACH,EAAA1C,eAAe0zD,4EACfl+D,KAAK6K,MAAMsB,EAAOnM,KAAKkgB,MAEzB+9C,GAAU,GAGZ,IAAI7xD,EAAMpM,KAAKoM,IACXJ,EAAOhM,KAAK0L,OAAOM,KAiBvB,OAhBIhM,KAAKkgB,KAAO9T,GACdpM,KAAKkN,MACH,EAAA1C,eAAeqxD,uBACf77D,KAAK6K,MAAMsB,EAAOC,IAEpB6xD,GAAU,GAC4B,KAA7BjyD,EAAKM,WAAWtM,KAAKkgB,OAC5BlgB,KAAKkgB,KAEPlgB,KAAKkN,MACH,EAAA1C,eAAe2zD,qCACfn+D,KAAK6K,MAAMsB,EAAOnM,KAAKkgB,MAEzB+9C,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbz2D,OAAOy0D,aAAagC,GACpBz2D,OAAOy0D,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B,YAAAI,OAAA,aAEF,EA5lCA,CAA+B,EAAAhxD,mBAAlB,EAAAixD,YA+lCb,mBAAa,EAAA/C,QAUb,IAAID,EAA8B,M,cC5lDlC,IAAIiD,EAGJA,EAAI,WACH,OAAOt+D,KADJ,GAIJ,IAECs+D,EAAIA,GAAK,IAAIz0C,SAAS,cAAb,GACR,MAAO00C,GAEc,iBAAXC,SAAqBF,EAAIE,QAOrC7+D,EAAOD,QAAU4+D,G,4gCCdjB,IA6FYG,EA7FZ,OAKA,OA0BA,OAkCA,OAQA,OAKA,OAKA,OAKA,SAKA,SAAYA,GAEV,uBAEA,yBAJF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAQtB,kBAWE,WAEExoC,GAFF,MAIE,YAAMA,EAAQrpB,cAAY,K,OAT5B,EAAA8xD,sBAA2C,KAE3C,EAAAC,yBAA+C,KAQ7C,EAAK1oC,QAAUA,E,EAuqFnB,OAvrF8B,OAsB5B,YAAA2oC,YAAA,SAEEnuD,EAEAouD,EAEAC,EAEAC,GAEA,YAJA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAE5BvuD,EAAKjD,MACX,KAAK,EAAAD,SAAS4O,UACZ,OAAOnc,KAAKi/D,iBACKxuD,EACfouD,EACAC,EACAC,GAGJ,KAAK,EAAAxxD,SAAS6O,aACZ,OAAOpc,KAAKk/D,oBACQzuD,EAClBouD,EACAC,EACAC,GAGJ,QAAS50D,QAAO,GAElB,OAAO,MAID,YAAA80D,iBAAR,SAEExuD,EAEAouD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAEpC,IAAIliD,EAAWrM,EAAK7P,KAChBu+D,EAAoB1uD,EAAK5B,cACzBuwD,GAAgBtiD,EAAStO,KAG7B,GAAI4wD,EAAc,CAChB,IAAIC,EAAaviD,EAASvO,WAAWvC,KACrC,GAAiB,OAAb8yD,GAAqBA,EAAS90C,IAAIq1C,GAAa,CACjD,IAAItwD,EAAO+vD,EAAS59D,IAAIm+D,GASxB,OAR0B,OAAtBF,GAA8BA,EAAkBjzD,QAC9C6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe80D,sBACf7uD,EAAK5F,MAAOkE,EAAKtD,YAInBgF,EAAK3B,YACFC,EAAK2N,GAAG,MACPqiD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe+0D,gCACf9uD,EAAK5F,MAAOkE,EAAKtD,YAIhBsD,EAAK0kD,cAEP1kD,GAKX,IAAI4D,EAAU3S,KAAK2uB,gBAAgB7R,EAAU+hD,EAAYE,GACzD,IAAKpsD,EAAS,OAAO,KAGrB,GAAIA,EAAQujB,WACVvjB,EAAUA,EAAQujB,eAEb,CAGL,GAAIvjB,EAAQnF,MAAQ,EAAAoa,YAAY2P,KAiB9B,OAhB0B,OAAtB4nC,GAA8BA,EAAkBjzD,QAC9C6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe80D,sBACf7uD,EAAK5F,MAAO8H,EAAQkW,cAItBpY,EAAK3B,YACHiwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe+0D,gCACf9uD,EAAK5F,MAAO8H,EAAQ/R,KAAO,QAI1B,EAAAwpB,KAAKhnB,IAId,GAAIuP,EAAQnF,MAAQ,EAAAoa,YAAYiG,gBAAiB,CAC/C,IAAI8K,EAAW34B,KAAKw/D,8BACF7sD,EAChBwsD,EACAN,EACA,EAAAY,QAAqBX,GACrBruD,EACAsuD,GAEF,OAAKpmC,EACEloB,EAAK3B,WAAa6pB,EAAS5pB,KAAK0kD,aAAe96B,EAAS5pB,KADzC,MAM1B,GAAI4D,EAAQnF,MAAQ,EAAAoa,YAAYwP,eAAgB,CAG9C,GAAIzkB,EAAQ+J,GAAG,EAAAra,YAAYu0B,UAAW,CACV,OAAtBuoC,GAA8BA,EAAkBjzD,QAC9C6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe80D,sBACf7uD,EAAK5F,MAAO8H,EAAQkW,cAI1B,IAAI,EAAwBlW,EAAS5D,KACrC,GAAI0B,EAAK3B,WAAY,CACnB,GAAK,EAAK4N,GAAG,KAQX,OAAO,EAAK+2C,aAPRsL,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe+0D,gCACfziD,EAASjS,MAAOiS,EAASvO,WAAWvC,MAO5C,OAAO,EAIT,GAAIozD,EACF,OAAQtiD,EAASvO,WAAWwC,QAC1B,KAAK,EAAA/N,cAAc+B,OAAQ,OAAO/E,KAAK0/D,yBAAyBjvD,EAAMouD,EAAYC,EAAUC,GAC5F,KAAK,EAAA/7D,cAAcgC,QAAS,OAAOhF,KAAK2/D,0BAA0BlvD,EAAMouD,EAAYC,EAAUC,GAC9F,KAAK,EAAA/7D,cAAciC,QAAS,OAAOjF,KAAK4/D,0BAA0BnvD,EAAMouD,EAAYC,EAAUC,GAC9F,KAAK,EAAA/7D,cAAckC,SAAU,OAAOlF,KAAK6/D,6BAA6BpvD,EAAMouD,EAAYC,EAAUC,GAKtG,IAAIliC,EAAsClqB,EAASkqB,mBAEnD,GAAIA,GASF,IARgB78B,KAAK8/D,qBACnBjjC,EACAsiC,EACAN,EACAC,EAAW,EAAAW,QAAQX,GACnBruD,EACAsuD,GAEkB,OAAO,UAClBI,GAAqBA,EAAkBjzD,QAChDlM,KAAKkN,MACH,EAAA1C,eAAe80D,sBACf7uD,EAAK5F,MAAOiS,EAASvO,WAAWvC,MASpC,KANI+C,EAAO/O,KAAK4+D,YACGjsD,EAASotD,SAC1BptD,EACAmsD,EACAC,IAES,OAAO,KAClB,GAAItuD,EAAK3B,WAAY,CACnB,GAAKC,EAAK2N,GAAG,KAQX,OAAO3N,EAAK0kD,aAPRsL,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe+0D,gCACfziD,EAASjS,MAAOiS,EAASvO,WAAWvC,MAO5C,OAAO+C,EAQT,OANIgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfljD,EAASjS,MAAOiS,EAASvO,WAAWvC,MAGjC,MAID,YAAAkzD,oBAAR,SAEEzuD,EAEAouD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAEpC,IAAI5vD,EAAmBqB,EAAKrB,iBACxB+qB,EAAwB,KAC5B,GAAI/qB,KACF+qB,EAAWn6B,KAAK4+D,YACdxvD,EACAyvD,EACAC,EACAC,IAEa,OAAO,KAQxB,IANA,IAAIkB,EAAiBxvD,EAAKvB,WACtBmmD,EAAgB4K,EAAe/zD,OAC/BkuB,EAAiB,IAAI5yB,MAAY6tD,GACjCZ,EAAiB,IAAIjtD,MAAc6tD,GACnCX,EAAqB,EACrBC,GAAU,EACLt0D,EAAI,EAAGA,EAAIg1D,IAAiBh1D,EAAG,CACtC,IAAI6/D,EAAgBD,EAAe5/D,GACnC,OAAQ6/D,EAAcnwD,eACpB,KAAK,EAAAuM,cAAcg6C,QACjB5B,EAAqBr0D,EAAI,EACzB,MAEF,KAAK,EAAAic,cAAc6jD,KACjBh2D,OAAO9J,GAAKg1D,GACZV,GAAU,EAId,IAAIyL,EAAoBF,EAAcnxD,KACtC,GAAI,EAAAsxD,cAAcD,GAOhB,OANIrB,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe81D,cACfF,EAAkBv1D,OAGf,KAET,IAAIwvB,EAAgBr6B,KAAK4+D,YACvBwB,EACAvB,EACAC,EACAC,GAEF,IAAK1kC,EAAe,OAAO,KAC3BD,EAAe/5B,GAAKg6B,EACpBo6B,EAAep0D,GAAK6/D,EAAct/D,KAAKoL,KAEzC,IACImD,EADAoxD,EAAiB9vD,EAAKtB,WAE1B,GAAI,EAAAkxD,cAAcE,GACZxB,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe81D,cACfC,EAAe11D,OAGnBsE,EAAa,EAAAib,KAAKG,UAQlB,KANApb,EAAanP,KAAK4+D,YAChB2B,EACA1B,EACAC,EACAC,IAEe,OAAO,KAE1B,IAAInlD,EAAY,IAAI,EAAAmd,UAAU/2B,KAAKi2B,QAASmE,EAAgBjrB,EAAYgrB,GAIxE,OAHAvgB,EAAU66C,eAAiBA,EAC3B76C,EAAU86C,mBAAqBA,EAC/B96C,EAAU+6C,QAAUA,EACblkD,EAAK3B,WAAa8K,EAAU7K,KAAK0kD,aAAe75C,EAAU7K,MAG3D,YAAA2wD,yBAAR,SAEEjvD,EAEAouD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAEpC,IAAIG,EAAoB1uD,EAAK5B,cAC7B,IAAMswD,GAAiD,GAA5BA,EAAkBjzD,OAO3C,OANI6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeg2D,oCACf/vD,EAAK5F,MAAO,KAAMs0D,EAAoBA,EAAkBjzD,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIg1D,EAAezgE,KAAK4+D,YAAYO,EAAkB,GAAIN,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,OAAQA,EAAajzD,MACnB,KAAK,EACL,KAAK,EACL,KAAK,EAAc,OAAO,EAAA4c,KAAKhnB,IAC/B,KAAK,EAAgB,IAAKpD,KAAKi2B,QAAQ/L,QAAQY,SAAU,OAAO,EAAAV,KAAKhnB,IACrE,KAAK,EAAc,OAAO,EAAAgnB,KAAK/mB,IAC/B,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GAAe,OAAO,EAAA+mB,KAAK3mB,IAChC,KAAK,EAAgB,IAAKzD,KAAKi2B,QAAQ/L,QAAQY,SAAU,OAAO,EAAAV,KAAK3mB,IACrE,KAAK,EAAc,OAAO,EAAA2mB,KAAK1mB,IAC/B,KAAK,GAAc,OAAO,EAAA0mB,KAAKvmB,IAC/B,KAAK,GAAc,OAAO,EAAAumB,KAAKtmB,IAC/B,KAAK,GAAe,OAAO,EAAAsmB,KAAKrmB,KAChC,KAAK,GAAe,OAAO,EAAAqmB,KAAKG,KAChC,QAASpgB,QAAO,GAElB,OAAO,MAGD,YAAAw1D,0BAAR,SAEElvD,EAEAouD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAEpC,IAAIG,EAAoB1uD,EAAK5B,cAC7B,IAAMswD,GAAiD,GAA5BA,EAAkBjzD,OAO3C,OANI6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeg2D,oCACf/vD,EAAK5F,MAAO,KAAMs0D,EAAoBA,EAAkBjzD,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIg1D,EAAezgE,KAAK4+D,YAAYO,EAAkB,GAAIN,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAIlvC,EAAiBkvC,EAAalvC,eAClC,IAAKA,EAOH,OANIwtC,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfvB,EAAkB,GAAGt0D,MAAO41D,EAAah1D,YAGtC,KAET,IAAI4xB,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaS,aAC1D,OAAI4Z,EACEA,EAAS3gB,GAAG,EAAAra,YAAYmxB,SAC1BrpB,OAAmD,GAA5CkzB,EAASzjB,UAAUwgB,eAAeluB,QAClCmxB,EAASzjB,UAAUwgB,eAAe,KAEzCjwB,OAAmD,GAA5CkzB,EAASzjB,UAAUwgB,eAAeluB,QAClCmxB,EAASzjB,UAAUwgB,eAAe,KAGzC2kC,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfvB,EAAkB,GAAGt0D,MAAO41D,EAAah1D,YAGtC,OAGD,YAAAm0D,0BAAR,SAEEnvD,EAEAouD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAEpC,IAAIG,EAAoB1uD,EAAK5B,cAC7B,IAAMswD,GAAiD,GAA5BA,EAAkBjzD,OAO3C,OANI6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeg2D,oCACf/vD,EAAK5F,MAAO,KAAMs0D,EAAoBA,EAAkBjzD,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIg1D,EAAezgE,KAAK4+D,YAAYO,EAAkB,GAAIN,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAIlvC,EAAiBkvC,EAAalvC,eAClC,IAAKA,EAOH,OANIwtC,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfvB,EAAkB,GAAGt0D,MAAO41D,EAAah1D,YAGtC,KAGT,IAAI4xB,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaS,aAC1D,OAAI4Z,EAAiBA,EAASzjB,UAAUzK,YACpC4vD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfvB,EAAkB,GAAGt0D,MAAO41D,EAAah1D,YAGtC,OAGD,YAAAo0D,6BAAR,SAEEpvD,EAEAouD,EAEAC,EAEAC,QAFA,IAAAD,MAAA,WAEA,IAAAC,MAAyBN,EAAWO,QAEpC,IAAIG,EAAoB1uD,EAAK5B,cAC7B,IAAMswD,GAAiD,GAA5BA,EAAkBjzD,OAO3C,OANI6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeg2D,oCACf/vD,EAAK5F,MAAO,KAAMs0D,EAAoBA,EAAkBjzD,OAAS,GAAGT,SAAS,KAG1E,KAET,IAAIg1D,EAAezgE,KAAK4+D,YAAYO,EAAkB,GAAIN,EAAYC,EAAUC,GAChF,IAAK0B,EAAc,OAAO,KAC1B,IAAI5N,EAAqB4N,EAAa5N,mBACtC,OAAKA,EASEA,EAAmB1jD,YARpB4vD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAem2D,8BACfxB,EAAkB,GAAGt0D,MAAO41D,EAAah1D,YAGtC,OAMX,YAAAkjB,gBAAA,SAEEle,EAEAouD,EAEAE,QAAA,IAAAA,MAAaN,EAAWO,QAExB,IAAIrsD,EAAUksD,EAAW5nC,OAAOxmB,EAAKlC,WAAWvC,MAChD,IAAK2G,EAOH,OANIosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfvvD,EAAK5F,MAAO4F,EAAKlC,WAAWvC,MAGzB,KAIT,IAFA,IAAI40D,EAAOnwD,EACPjC,EAAOiC,EAAKjC,KACTA,GAAM,CACX,KAAMmE,EAAUA,EAAQwa,aAAa3e,EAAKD,WAAWvC,OAOnD,OANI+yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACfryD,EAAK3D,MAAO2D,EAAKD,WAAWvC,KAAM40D,EAAKryD,WAAWvC,MAG/C,KAET40D,EAAOpyD,EACPA,EAAOA,EAAKA,KAEd,OAAOmE,GAIT,YAAAmtD,qBAAA,SAEE3pD,EAEAgpD,EAEAN,EAEAC,EAEAgC,EAEA/B,QAJA,IAAAD,MAA6B,EAAAW,gBAE7B,IAAAqB,MAAA,WAEA,IAAA/B,MAAyBN,EAAWO,QAIpC,IAFA,IAAI+B,EAAoB,EACpBC,EAAoB,EACf3gE,EAAI,EAAGyiB,EAAI3M,EAAejK,OAAQ7L,EAAIyiB,IAAKziB,EAC7C8V,EAAe9V,GAAGoP,eAAesxD,IACpCC,EAEJ,IAAIC,EAAgB9B,EAAoBA,EAAkBjzD,OAAS,EACnE,GAAI+0D,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXAhhE,KAAKkN,MACH,EAAA1C,eAAeg2D,oCACfS,EACI,EAAA3zD,MAAMZ,KACcyyD,EAAmB,GAAGt0D,MACtBs0D,EAAmB8B,EAAgB,GAAGp2D,OAE1DV,OAAO22D,GAAuBj2D,OACjCo2D,EAAgBF,EAAoBA,EAAoBC,GAAmBv1D,SAAS,IACrFw1D,EAAcx1D,SAAS,KAElB,KAET,IAAIoD,EAAgB,IAAIrH,MAAYw5D,GACpC,IAAS3gE,EAAI,EAAGA,EAAI2gE,IAAqB3gE,EAAG,CAC1C,IAAI0O,EAAO1O,EAAI4gE,EACXjhE,KAAK4+D,YACeO,EAAmB9+D,GACrCw+D,EACAC,EACAC,GAEF/+D,KAAK4+D,YACHz0D,OAAOgM,EAAe9V,GAAGoP,aACzBovD,EACAC,EACAC,GAEN,IAAKhwD,EAAM,OAAO,KAElB+vD,EAASjiD,IAAI1G,EAAe9V,GAAGO,KAAKoL,KAAM+C,GAC1CF,EAAcxO,GAAK0O,EAErB,OAAOF,GAIT,YAAAqyD,iBAAA,SAAiBvuD,GACf,IAAInF,EAAOmF,EAAQnF,KACnB,GAAIA,GAAQ,EAAAoa,YAAY1K,SACjBld,KAAKmhE,yBAAiCxuD,EAAS8rD,EAAW2C,SAAU,OAAO,KAElF,GAAI,EAAAC,eAAe7zD,GAAO,CACxB,IAAIuB,EAAsB4D,EAAS5D,KAC/BwiB,EAAiBxiB,EAAKwiB,eAC1B,GAAIA,EAAgB,CAClB,IAAIE,EAAcF,EAAeE,YAC7BA,IAAa1iB,EAAO0iB,GAE1B,OAAO1iB,EAET,OAAIvB,GAAQ,EAAAoa,YAAYuT,gBAAyCxoB,EAAS5D,KACnE,MAIT,YAAAuyD,iBAAA,SAAiBvyD,GACf,GAAIA,EAAK2N,GAAG,KAAsB,CAChC,IAAI6U,EAAiBxiB,EAAKwiB,eAC1B,OAAIA,GACqBpnB,OAAO4E,EAAK8jD,oBACXkC,iBAAiB/0D,KAAKi2B,SAC3C,GAAIlnB,GAAQ,EAAAqb,KAAKG,KAAM,CAC5B,IAAInC,EAAiBpoB,KAAKi2B,QAAQ7N,eAElC,OADAje,OAAOie,EAAe4B,IAAIjb,IACnBqZ,EAAelnB,IAAI6N,GAE5B,OAAO,MAMT,YAAAwyD,iBAAA,SAEE9wD,EAEA+wD,EAEAC,EAEA1C,GAEA,SAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAE7BvuD,EAAKjD,MAAQ,EAAAD,SAASU,eAC3BwC,EAAiCA,EAAMc,WAEzC,OAAQd,EAAKjD,MACX,KAAK,EAAAD,SAASO,UACZ,OAAO9N,KAAK0hE,0BACWjxD,EACrB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASgR,OACZ,OAAOve,KAAK2hE,uBACQlxD,EAClB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASQ,KACZ,OAAO/N,KAAK4hE,qBACMnxD,EAChB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASoR,MACZ,OAAO3e,KAAK6hE,sBACOpxD,EACjB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASS,cACZ,OAAOhO,KAAK8hE,8BACerxD,EACzB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASuR,SACZ,OAAO9e,KAAK+hE,yBACUtxD,EACpB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASM,WACd,KAAK,EAAAN,SAASK,MACd,KAAK,EAAAL,SAASG,KACd,KAAK,EAAAH,SAASI,KACZ,OAAO3N,KAAKgiE,2BACYvxD,EACtB+wD,EAASA,EAAQS,eAAgBlD,GAGrC,KAAK,EAAAxxD,SAAS+R,KACZ,OAAOtf,KAAKkiE,qBACMzxD,EAChB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASY,MACZ,OAAOnO,KAAKmiE,sBACO1xD,EACjB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASwR,WACZ,OAAO/e,KAAKoiE,2BACY3xD,EACtB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASE,QACZ,OAAOzN,KAAKqiE,wBACS5xD,EACnB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAAS0R,IACZ,OAAOjf,KAAKsiE,oBACK7xD,EACf+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASW,eACZ,OAAOlO,KAAKuiE,+BACgB9xD,EAC1B+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAAS6R,QACZ,OAAOpf,KAAKwiE,wBACS/xD,EACnB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASiS,aACZ,OAAOxf,KAAKyiE,6BACchyD,EACxB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASkS,YACZ,OAAOzf,KAAK0iE,4BACajyD,EACvB+wD,EAASC,EAAS1C,GAUxB,OANIA,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGF,MAIT,YAAA83D,kBAAA,SAEElyD,EAEA+wD,EAEAC,EAEA1C,GAEA,SAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAE7BvuD,EAAKjD,MAAQ,EAAAD,SAASU,eAC3BwC,EAAiCA,EAAMc,WAEzC,OAAQd,EAAKjD,MACX,KAAK,EAAAD,SAASO,UACZ,OAAO9N,KAAK4iE,2BACWnyD,EACrB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASgR,OACZ,OAAOve,KAAK6iE,wBACQpyD,EAClB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASQ,KACZ,OAAO/N,KAAK8iE,sBACMryD,EAChB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASoR,MACZ,OAAO3e,KAAK+iE,uBACOtyD,EACjB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASS,cACZ,OAAOhO,KAAKgjE,+BACevyD,EACzB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASuR,SACZ,OAAO9e,KAAKijE,0BACUxyD,EACpB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASM,WACd,KAAK,EAAAN,SAASK,MACd,KAAK,EAAAL,SAASG,KACd,KAAK,EAAAH,SAASI,KACZ,OAAO3N,KAAKkjE,4BACYzyD,EACtB+wD,EAASA,EAAQS,eAAgBlD,GAGrC,KAAK,EAAAxxD,SAAS+R,KACZ,OAAOtf,KAAKmjE,sBACM1yD,EAChB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASY,MACZ,OAAOnO,KAAKojE,uBACO3yD,EACjB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASwR,WACZ,OAAO/e,KAAKqjE,4BACY5yD,EACtB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASE,QACZ,OAAOzN,KAAKsjE,yBACS7yD,EACnB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAAS0R,IACZ,OAAOjf,KAAKujE,qBACK9yD,EACf+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASW,eACZ,OAAOlO,KAAKwjE,gCACgB/yD,EAC1B+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAAS6R,QACZ,OAAOpf,KAAKyjE,yBACShzD,EACnB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASiS,aACZ,OAAOxf,KAAK0jE,8BACcjzD,EACxB+wD,EAASC,EAAS1C,GAGtB,KAAK,EAAAxxD,SAASkS,YACZ,OAAOzf,KAAK2jE,6BACalzD,EACvB+wD,EAASC,EAAS1C,GAUxB,OANIA,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGF,MAIT,YAAAm3D,2BAAA,SAEEvxD,EAEA+wD,EAEA3C,EAEAE,QAFA,IAAAF,MAAsB2C,EAAQS,qBAE9B,IAAAlD,MAAyBN,EAAWO,QAEpC,IACIrsD,EADA/R,EAAO6P,EAAKzE,KAEhB,OAAI2G,EAAU6uD,EAAQvqC,OAAOr2B,KAC3BZ,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzBhsD,IAELA,EAAUksD,EAAW5nC,OAAOr2B,KAC9BZ,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzBhsD,IAELA,EAAU3S,KAAKi2B,QAAQ5I,aAAazsB,KACtCZ,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzBhsD,IAELosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfvvD,EAAK5F,MAAOjK,GAGT,OAID,YAAAsiE,4BAAR,SAEEzyD,EAEA+wD,EAEA3C,EAEAE,QAFA,IAAAF,MAAsB2C,EAAQS,qBAE9B,IAAAlD,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKgiE,2BAA2BvxD,EAAM+wD,EAAS3C,EAAYE,GACzE,IAAKpsD,EAAS,OAAO,KACrB,IAAI5D,EAAO/O,KAAKkhE,iBAAiBvuD,GASjC,OARK5D,GACCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJkE,GAID,YAAAoyD,yBAAR,SAAiCzvC,EAAgBqtC,GAC/C,QAD+C,IAAAA,MAAyBN,EAAWO,QAC/EttC,EAAOhV,GAAG,EAAAra,YAAYu0B,UAAW,OAAO,EAC5C,IAAImpC,EAAWruC,EAAOquC,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIhxD,EAAO/O,KAAK4+D,YACdmB,EACAruC,EAAO7R,OACP,KACAk/C,GAEF,QAAKhwD,IACL2iB,EAAOL,QAAQtiB,IACR,IAID,YAAAwzD,+BAAR,SAEE9xD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAI4E,EAAanzD,EAAKc,WAClB2rB,EAASl9B,KAAKuhE,iBAAiBqC,EAAYpC,EAASC,EAAS1C,GACjE,IAAK7hC,EAAQ,OAAO,KACpB,IAAI2mC,EAAepzD,EAAKzO,SAASgK,KAGjC,OAAQkxB,EAAO1vB,MACb,KAAK,EAAAoa,YAAY1K,OAAQ,IAAKld,KAAKmhE,yBAAiCjkC,EAAQ6hC,GAAa,OAAO,KAChG,KAAK,EAAAn3C,YAAYsQ,MACjB,KAAK,EAAAtQ,YAAYwJ,MACf,IAAIriB,EAA6BmuB,EAAQnuB,KAEzC,GAF+C5E,OAAO4E,GAAQ,EAAAqb,KAAKG,QAC/DgH,EAAiBxiB,EAAKwiB,gBACL,CAEnB,KADInJ,EAAiBpoB,KAAKi2B,QAAQ7N,gBACf4B,IAAIjb,GASrB,OANIgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACfpwD,EAAKzO,SAAS6I,MAAOg5D,EAAoC3mC,EAAQnuB,KAAKtD,YAGnE,KARP8lB,EAAiBnJ,EAAelnB,IAAI6N,GAWxCmuB,EAAS3L,EACT,MAEF,KAAK,EAAA3J,YAAYoJ,mBAOf,KANI0K,EAAiB17B,KAAK4wB,gBACxBzmB,OAA2B+yB,EAAQjM,iBACnC,KACA,EAAAwuC,UACAV,IAEmB,OAAO,KAG5B,KADIxtC,GADAxiB,EAAO2sB,EAAe9hB,UAAUzK,YACVoiB,gBACL,CAEnB,KADInJ,EAAiBpoB,KAAKi2B,QAAQ7N,gBACf4B,IAAIjb,GASrB,OANIgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACfpwD,EAAKzO,SAAS6I,MAAOg5D,EAAc90D,EAAKtD,YAGrC,KARP8lB,EAAiBnJ,EAAelnB,IAAI6N,GAWxCmuB,EAAS3L,EACT,MAEF,KAAK,EAAA3J,YAAYuJ,SACf,IAAIuK,EAGJ,KADInK,GADAxiB,GADA2sB,EAAiBvxB,OAAkB+yB,EAAQxB,iBACrB9hB,UAAUzK,YACVoiB,gBACL,CAEnB,KADInJ,EAAiBpoB,KAAKi2B,QAAQ7N,gBACf4B,IAAIjb,GASrB,OANIgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACfpwD,EAAKzO,SAAS6I,MAAOg5D,EAAc90D,EAAKtD,YAGrC,KARP8lB,EAAiBnJ,EAAelnB,IAAI6N,GAWxCmuB,EAAS3L,EACT,MAEF,KAAK,EAAA3J,YAAYlJ,MACf,IAAI7L,EAAoB7S,KAAK2+D,yBAC7B,GAAI9rD,EAAmB,CACrB,IAAIixD,EAAqB5mC,EAAQF,eAAe,EAAAha,aAAaS,aAC7D,IAAKqgD,EAOH,OANI/E,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACf7tD,EAAkBhI,MAAeqyB,EAAQrU,cAGtC,KAET,IAAIk7C,EAAYD,EAAWlqD,UAAUzK,WAErC,KADIoiB,EAAiBwyC,EAAUxyC,gBACV,CACnB,IAAInJ,EACJ,KADIA,EAAiBpoB,KAAKi2B,QAAQ7N,gBACf4B,IAAI+5C,GASrB,OANIhF,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACfpwD,EAAKzO,SAAS6I,MAAOg5D,EAAcE,EAAUt4D,YAG1C,KARP8lB,EAAiBnJ,EAAelnB,IAAI6iE,GAWxC7mC,EAAS3L,EAEX,MAEF,KAAK,EAAA3J,YAAY+I,mBACf,IAAIuF,EAAagH,EAAOhH,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAWxZ,GAAG,EAAAra,YAAYu0B,UAAW,CACxC,IAAIotC,EAAehkE,KAAK4+D,YAAY1oC,EAAW6pC,SAAU7pC,EAAWrW,OAAQ,KAAMk/C,GAC9EiF,GAAc9tC,EAAW7E,QAAQ2yC,GAEvC,IAAIzyC,KAAiB2E,EAAWnnB,KAAKwiB,kBACjB2L,EAAS3L,EAAetvB,WAC5C,OAMN,OAAQi7B,EAAO1vB,MACb,KAAK,EAAAoa,YAAYiG,gBACjB,KAAK,EAAAjG,YAAYlJ,MACf,OAAG,CAED,IADIrI,EAAU6mB,EAAO7mB,UACNA,EAAQ2T,IAAI65C,GAGzB,OAFA7jE,KAAK0+D,sBAAwBkF,EAC7B5jE,KAAK2+D,yBAA2B,KACzBtoD,EAAQnV,IAAI2iE,GAGrB,GAAI3mC,EAAO1vB,MAAQ,EAAAoa,YAAYiG,gBAAiB,CAC9C,IAAqBqP,EAAQtO,cAG3B,MAFAsO,EAA0CA,EAAQtO,kBAK/C,IAAIsO,EAAO1vB,MAAQ,EAAAoa,YAAYlJ,MAOpC,MANA,IAAYwe,EAAQhB,KAGlB,MAFAgB,EAAwBA,EAAQhB,MAQtC,MAEF,QACE,IAAI7lB,EACJ,IADIA,EAAU6mB,EAAO7mB,UACNA,EAAQ2T,IAAI65C,GAGzB,OAFA7jE,KAAK0+D,sBAAwBkF,EAC7B5jE,KAAK2+D,yBAA2B,KACzBtoD,EAAQnV,IAAI2iE,GAYzB,OANI9E,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACfpwD,EAAKzO,SAAS6I,MAAOg5D,EAAc3mC,EAAOrU,cAGvC,MAID,YAAA26C,gCAAR,SAEE/yD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKuiE,+BAA+B9xD,EAAM+wD,EAASC,EAAS1C,GAC1E,IAAKpsD,EAAS,OAAO,KACrB,IAAI5D,EAAO/O,KAAKkhE,iBAAiBvuD,GASjC,OARK5D,GACCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJkE,GAID,YAAA+yD,8BAAR,SAEErxD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIiF,EAAmBxzD,EAAKc,WACxB+hD,EAAatzD,KAAK2iE,kBAAkBsB,EAAkBzC,EAASC,EAAS1C,GAC5E,IAAKzL,EAAY,OAAO,KACxB,GAAIA,EAAW52C,GAAG,KAAsB,CACtC,IAAI6U,EAAiB+hC,EAAW/hC,eAChC,GAAIA,EAGF,OAFAvxB,KAAK0+D,sBAAwBuF,EAC7BjkE,KAAK2+D,yBAA2BluD,EAAKoC,kBAC9B0e,EASX,OANIwtC,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfuD,EAAiBp5D,MAAOyoD,EAAW7nD,YAGhC,MAID,YAAAu3D,+BAAR,SAEEvyD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIiF,EAAmBxzD,EAAKc,WACxB+hD,EAAatzD,KAAK2iE,kBAAkBsB,EAAkBzC,EAASC,EAAS1C,GAC5E,IAAKzL,EAAY,OAAO,KACxB,GAAIA,EAAW52C,GAAG,KAAsB,CACtC,IAAI6U,EAAiB+hC,EAAW/hC,eAChC,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaS,aAC1D,GAAI4Z,EAAU,OAAOA,EAASzjB,UAAUzK,YAS5C,OANI4vD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfuD,EAAiBp5D,MAAOyoD,EAAW7nD,YAGhC,MAIT,YAAAy4D,4BAAA,SAEEC,EAEA1C,GAEA,IAAKA,EAAQ/kD,GAAG,KAEd,OAAQ+kD,EAAQj0D,MACd,KAAK,EACH,GAAI42D,UAAUD,GAAW,OAAO,EAAA/5C,KAAKlnB,GACrC,MAEF,KAAK,EACH,GAAImhE,UAAUF,GAAW,OAAO,EAAA/5C,KAAK7mB,GACrC,MAEF,KAAK,EACH,GAAI+gE,WAAWH,GAAW,OAAO,EAAA/5C,KAAKjnB,IACtC,MAEF,KAAK,EACH,GAAIohE,WAAWJ,GAAW,OAAO,EAAA/5C,KAAK5mB,IACtC,MAEF,KAAK,EACH,GAAIghE,WAAWL,GAAW,OAAO,EAAA/5C,KAAKhnB,IACtC,MAEF,KAAK,EACH,GAAIqhE,WAAWN,GAAW,OAAO,EAAA/5C,KAAK3mB,IACtC,MAEF,KAAK,GACH,GAAIihE,YAAYP,GAAW,OAAO,EAAA/5C,KAAKxmB,KACvC,MAEF,KAAK,EACH,IAAK5D,KAAKi2B,QAAQ/L,QAAQY,SAAU,CAClC,GAAI05C,WAAWL,GAAW,OAAO,EAAA/5C,KAAK4oC,QACtC,MAEF,OAAO,EAAA5oC,KAAK2oC,QAEd,KAAK,EACH,IAAK/yD,KAAKi2B,QAAQ/L,QAAQY,SAAU,CAClC,GAAI25C,WAAWN,GAAW,OAAO,EAAA/5C,KAAK8oC,QACtC,MAEF,OAAO,EAAA9oC,KAAK6oC,QAEd,KAAK,EAAc,OAAO,EAAA7oC,KAAK/mB,IAC/B,KAAK,EAAc,OAAO,EAAA+mB,KAAK1mB,IAC/B,KAAK,GAAc,OAAO,EAAA0mB,KAAKvmB,IAC/B,KAAK,GAAc,OAAO,EAAAumB,KAAKtmB,IAInC,OAAI0gE,WAAWL,GAAkB,EAAA/5C,KAAKhnB,IAClCqhE,WAAWN,GAAkB,EAAA/5C,KAAK3mB,IAC/B,EAAA2mB,KAAK/mB,KAIN,YAAAq+D,0BAAR,SAEEjxD,EAEA+wD,EAEAC,EAEA1C,GAEA,QAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEhCvuD,EAAKa,eAAiB,EAAAgN,cAAcqmD,QACtC,OAAO3kE,KAAKuhE,iBAAiB9wD,EAAKc,WAAYiwD,EAASC,EAAS1C,GAElE,IAAIhwD,EAAO/O,KAAK4+D,YACdz0D,OAAOsG,EAAKe,QACZgwD,EAAQS,eACRT,EAAQ3oC,wBACRkmC,GAEF,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GACpC,OAAI4D,IACAosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGT7K,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzB,OAID,YAAAiE,2BAAR,SAEEnyD,EAEA+wD,EAEAC,EAEA1C,GAEA,QAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEhCvuD,EAAKa,eAAiB,EAAAgN,cAAcqmD,QAAS,CAC/C,IAAI51D,EAAO/O,KAAK2iE,kBAAkBlyD,EAAKc,WAAYiwD,EAASC,EAAS1C,GACrE,OAAOhwD,EAAOA,EAAK+jD,gBAAkB,KAEvC,OAAO9yD,KAAK4+D,YACVz0D,OAAOsG,EAAKe,QACZgwD,EAAQS,eACRT,EAAQ3oC,wBACRkmC,IAKI,YAAA2D,4BAAR,SAEEjyD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIjwD,EAAO/O,KAAK2jE,6BAA6BlzD,EAAM+wD,EAASC,EAAS1C,GACrE,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GASpC,OARK4D,GACCosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,EAAAg6D,sBAAsBp0D,EAAKkB,UAAW5C,EAAKtD,YAItDkH,GAID,YAAAgxD,6BAAR,SAEElzD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIxpD,EAAU/E,EAAK+E,QACf7D,EAAWlB,EAAKkB,SACpB,OAAQA,GACN,KAAK,EAAAtE,MAAM4X,MAET,GAAIzP,EAAQhI,MAAQ,EAAAD,SAASE,SAA+B+H,EAAS4I,aAAe,EAAAF,YAAYc,QAC9F,OAAOhf,KAAKkkE,4BAA4BY,QAAQC,SAAqCvvD,EAASlU,OAAQmgE,GAI1G,KAAK,EAAAp0D,MAAM0X,KACX,KAAK,EAAA1X,MAAMoa,UACX,KAAK,EAAApa,MAAMqa,YAET,KADI3Y,EAAO/O,KAAK2iE,kBAAkBntD,EAASgsD,EAASC,EAAS1C,IAClD,OAAO,KAClB,GAAIhwD,EAAK2N,GAAG,KAEV,GADI6U,EAAiBxiB,EAAKwiB,eACN,CAElB,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAasE,qBAAqB3V,IACjE,OAAO0rB,EAASzjB,UAAUzK,WACxC,IAAIsiB,EAAcF,EAAeE,YAC7BA,IAAa1iB,EAAO0iB,GAG5B,OAAK1iB,EAAK6N,MAAM,KAAwC7N,EAAK2N,GAAG,MAC1DqiD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,EAAAg6D,sBAAsBlzD,GAAW5C,EAAKtD,YAG/C,MAEFsD,EAET,KAAK,EAAA1B,MAAMka,YAET,KADIxY,EAAO/O,KAAK2iE,kBAAkBntD,EAASgsD,EAASC,EAAS1C,IAClD,OAAO,KAClB,GAAIhwD,EAAK2N,GAAG,KAEV,GADI6U,EAAiBxiB,EAAKwiB,eAGxB,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAamC,KAC5C,OAAOkY,EAASzjB,UAAUzK,WAG5C,OAAO,EAAAib,KAAKxmB,KAEd,KAAK,EAAAyJ,MAAMma,MACT,IAAIzY,EAGEwiB,EAEE8L,EAJR,KADItuB,EAAO/O,KAAK2iE,kBAAkBntD,EAASgsD,EAASC,EAAS1C,IAClD,OAAO,KAClB,GAAIhwD,EAAK2N,GAAG,KAEV,GADI6U,EAAiBxiB,EAAKwiB,eAGxB,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaoC,aAC5C,OAAOiY,EAASzjB,UAAUzK,WAG5C,OAAKJ,EAAK6N,MAAM,KAAyC7N,EAAK2N,GAAG,KAS1D3N,EAAKi2D,SARNjG,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,IAAKkE,EAAKtD,YAGnB,MAIX,QAAStB,QAAO,GAElB,OAAO,MAID,YAAAs4D,6BAAR,SAEEhyD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIjwD,EAAO/O,KAAK0jE,8BAA8BjzD,EAAM+wD,EAASC,EAAS1C,GACtE,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GASpC,OARK4D,GACCosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,EAAAg6D,sBAAsBp0D,EAAKkB,UAAW5C,EAAKtD,YAItDkH,GAID,YAAA+wD,8BAAR,SAEEjzD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIrtD,EAAWlB,EAAKkB,SACpB,OAAQA,GACN,KAAK,EAAAtE,MAAMoa,UACX,KAAK,EAAApa,MAAMqa,YACT,IAAI3Y,EAAO/O,KAAK2iE,kBAAkBlyD,EAAK+E,QAASgsD,EAASC,EAAS1C,GAClE,IAAKhwD,EAAM,OAAO,KAClB,GAAIA,EAAK2N,GAAG,KAAsB,CAChC,IAAI6U,EAAiBxiB,EAAKwiB,eAC1B,GAAIA,EAAgB,CAClB,IAAI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa2E,sBAAsBhW,IAChF,GAAI0rB,EAAU,OAAOA,EAASzjB,UAAUzK,YAG5C,OAAKJ,EAAK6N,MAAM,KAAyC7N,EAAK2N,GAAG,KAS1D3N,GARDgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,EAAAg6D,sBAAsBlzD,GAAW5C,EAAKtD,YAG/C,MAIX,QAAStB,QAAO,GAQlB,OANI40D,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGF,MAID,YAAA82D,uBAAR,SAEElxD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIjwD,EAAO/O,KAAK6iE,wBAAwBpyD,EAAM+wD,EAASC,EAAS1C,GAChE,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GACpC,OAAI4D,IACAosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGF,OAID,YAAAg4D,wBAAR,SAEEpyD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIptD,EAAOnB,EAAKmB,KACZC,EAAQpB,EAAKoB,MACbF,EAAWlB,EAAKkB,SAEpB,OAAQA,GAIN,KAAK,EAAAtE,MAAM6qD,OACX,KAAK,EAAA7qD,MAAMqY,YACX,KAAK,EAAArY,MAAMsY,aACX,KAAK,EAAAtY,MAAMwY,gBACX,KAAK,EAAAxY,MAAM8Y,yBACX,KAAK,EAAA9Y,MAAM0Y,aACX,KAAK,EAAA1Y,MAAM4Y,eACX,KAAK,EAAA5Y,MAAMsZ,yBACX,KAAK,EAAAtZ,MAAMwZ,+BACX,KAAK,EAAAxZ,MAAM0Z,2CACX,KAAK,EAAA1Z,MAAMgZ,iBACX,KAAK,EAAAhZ,MAAMkZ,WACX,KAAK,EAAAlZ,MAAMoZ,aACT,OAAOzmB,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,GAKxD,KAAK,EAAA1xD,MAAM+Z,SACX,KAAK,EAAA/Z,MAAM6Z,YACX,KAAK,EAAA7Z,MAAMga,gBACX,KAAK,EAAAha,MAAM8Z,mBAET,KADI89C,EAAWjlE,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,IAC/C,OAAO,KACtB,GAAIkG,EAASvoD,GAAG,KAEd,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAawC,gBAAgB7T,IAC5D,OAAO0rB,EAASzjB,UAAUzK,WAG5C,OAAK81D,EAASroD,MAAM,KAAwCqoD,EAASvoD,GAAG,MAClEqiD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,EAAAg6D,sBAAsBlzD,GAAWszD,EAASx5D,YAGnD,MAEF,EAAA2e,KAAKxmB,KAKd,KAAK,EAAAyJ,MAAM2Z,cACX,KAAK,EAAA3Z,MAAM4Z,mBAET,KADIg+C,EAAWjlE,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,IAC/C,OAAO,KACtB,GAAIkG,EAASvoD,GAAG,KAEd,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAawC,gBAAgB7T,IAC5D,OAAO0rB,EAASzjB,UAAUzK,WAG5C,OAAO,EAAAib,KAAKxmB,KAKd,KAAK,EAAAyJ,MAAMyqD,qBACX,KAAK,EAAAzqD,MAAM0qD,0BACT,OAAO,EAAA3tC,KAAKxmB,KAKd,KAAK,EAAAyJ,MAAM0X,KACX,KAAK,EAAA1X,MAAM4X,MACX,KAAK,EAAA5X,MAAMuY,SACX,KAAK,EAAAvY,MAAMyY,MACX,KAAK,EAAAzY,MAAM2Y,QAET,KADIi/C,EAAWjlE,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,IAC/C,OAAO,KACtB,GAAIkG,EAASvoD,GAAG,KAEd,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAawC,gBAAgB7T,IAC5D,OAAO0rB,EAASzjB,UAAUzK,WAI5C,OADI+1D,EAAYllE,KAAK2iE,kBAAkB9wD,EAAO2vD,EAASyD,EAAUlG,MAE7DoG,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,KAEvDnG,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf30D,EAAK5F,MAAOo6D,EAASx5D,WAAYy5D,EAAUz5D,YAI1C05D,GAVgB,KAezB,KAAK,EAAA93D,MAAM6Y,kBAET,KADI++C,EAAWjlE,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,IAC/C,OAAO,KACtB,GAAIkG,EAASvoD,GAAG,KAEd,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAagB,KAC5C,OAAOqZ,EAASzjB,UAAUzK,WAG5C,OAAO81D,GAAY,EAAA76C,KAAKvmB,IAAM,EAAAumB,KAAKvmB,IAAM,EAAAumB,KAAKtmB,IAKhD,KAAK,EAAAuJ,MAAMqZ,kBACX,KAAK,EAAArZ,MAAMuZ,wBACX,KAAK,EAAAvZ,MAAMyZ,oCAET,KADIm+C,EAAWjlE,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,IAC/C,OAAO,KACtB,GAAIkG,EAASvoD,GAAG,KAEd,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAawC,gBAAgB7T,IAC5D,OAAO0rB,EAASzjB,UAAUzK,WAG5C,OAAK81D,EAASvoD,GAAG,IAAsBuoD,EAASvoD,GAAG,MAC7CqiD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfn0D,EAAK5F,MAAO,EAAAg6D,sBAAsBlzD,GAAWszD,EAASx5D,YAGnD,MAEFw5D,EAKT,KAAK,EAAA53D,MAAM+Y,UACX,KAAK,EAAA/Y,MAAMiZ,IACX,KAAK,EAAAjZ,MAAMmZ,MACT,IAAIy+C,EAGE1zC,EAEE8L,EAIJ6nC,EAEAC,EAVJ,KADIF,EAAWjlE,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,IAC/C,OAAO,KACtB,GAAIkG,EAASvoD,GAAG,KAEd,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAawC,gBAAgB7T,IAC5D,OAAO0rB,EAASzjB,UAAUzK,WAI5C,OADI+1D,EAAYllE,KAAK2iE,kBAAkB9wD,EAAO2vD,EAASC,EAAS1C,MAE5DoG,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,KACzCC,EAAWzoD,GAAG,KAAsByoD,EAAWzoD,GAAG,MAChEqiD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf30D,EAAK5F,MAAO,EAAAg6D,sBAAsBlzD,GAAWszD,EAASx5D,WAAYy5D,EAAUz5D,YAI3E05D,GAVgB,KAezB,KAAK,EAAA93D,MAAM2qD,oBACX,KAAK,EAAA3qD,MAAM4qD,QACT,OAAOj4D,KAAK2iE,kBAAkB/wD,EAAM4vD,EAASC,EAAS1C,GAU1D,OANIA,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGF,MAID,YAAAq3D,qBAAR,SAEEzxD,EAEA+wD,EAEAC,EAEA1C,GAEA,QAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEhCwC,EAAQ9kD,GAAG,OAA2B,CACxC,IAAI2oD,EAAY7D,EAAQ8D,YAAY,EAAAtiE,cAAcsC,OAClD,GAAI+/D,EAGF,OAFArlE,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzB0G,EAGX,IAAIxlD,EAAS2hD,EAAQS,eAAepiD,OACpC,OAAIA,GACF7f,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzB9+C,IAELk/C,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe+6D,+CACf90D,EAAK5F,OAGF,OAID,YAAAs4D,sBAAR,SAEE1yD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKkiE,qBAAqBzxD,EAAM+wD,EAASC,EAAS1C,GAChE,IAAKpsD,EAAS,OAAO,KACrB,IAAI5D,EAAO/O,KAAKkhE,iBAAiBvuD,GASjC,OARK5D,GACCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJkE,GAID,YAAAozD,sBAAR,SAEE1xD,EAEA+wD,EAEAC,EAEA1C,GAEA,QAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEhCwC,EAAQ9kD,GAAG,OAA2B,CACxC,IAAI8oD,EAAahE,EAAQ8D,YAAY,EAAAtiE,cAAcuC,QACnD,GAAIigE,EAGF,OAFAxlE,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzB6G,EAGX,IAAI3lD,EAAyB2hD,EAAQS,eAAepiD,OACpD,OAAIA,GAAUA,EAAOrS,MAAQ,EAAAoa,YAAYlJ,QAAUmB,EAAiBA,EAAQqc,OAC1El8B,KAAK0+D,sBAAwB,KAC7B1+D,KAAK2+D,yBAA2B,KACzB9+C,IAELk/C,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAei7D,iDACfh1D,EAAK5F,OAGF,OAID,YAAAu4D,uBAAR,SAEE3yD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKmiE,sBAAsB1xD,EAAM+wD,EAASC,EAAS1C,GACjE,IAAKpsD,EAAS,OAAO,KACrB,IAAI5D,EAAO/O,KAAKkhE,iBAAiBvuD,GASjC,OARK5D,GACCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJkE,GAID,YAAAszD,wBAAR,SAEE5xD,EAEA+wD,EAEAC,EAEA1C,GAEA,YAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAE5BvuD,EAAK2N,aACX,KAAK,EAAAF,YAAYc,QACfhf,KAAK0+D,sBAAwBjuD,EAC7BzQ,KAAK2+D,yBAA2B,KAChC,IAAIqG,EAAUhlE,KAAKkkE,4BACUzzD,EAAMnP,MACjCmgE,GAEEr5C,EAAiBpoB,KAAKi2B,QAAQ7N,eAElC,OADAje,OAAOie,EAAe4B,IAAIg7C,IACnB58C,EAAelnB,IAAI8jE,GAE5B,KAAK,EAAA9mD,YAAYW,MACf7e,KAAK0+D,sBAAwBjuD,EAC7BzQ,KAAK2+D,yBAA2B,KAChC,IAAI+G,EAAUjE,GAAW,EAAAr3C,KAAKvmB,IAAM,EAAAumB,KAAKvmB,IAAM,EAAAumB,KAAKtmB,IAChDskB,EAAiBpoB,KAAKi2B,QAAQ7N,eAElC,OADAje,OAAOie,EAAe4B,IAAI07C,IACnBt9C,EAAelnB,IAAIwkE,GAE5B,KAAK,EAAAxnD,YAAYmB,OAGf,OAFArf,KAAK0+D,sBAAwBjuD,EAC7BzQ,KAAK2+D,yBAA2B,KACzB3+D,KAAKi2B,QAAQxI,eAWxB,OANIsxC,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAGF,MAID,YAAAy4D,yBAAR,SAEE7yD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKqiE,wBAAwB5xD,EAAM+wD,EAASC,EAAS1C,GACnE,IAAKpsD,EAAS,OAAO,KACrB,IAAI5D,EAAO/O,KAAKkhE,iBAAiBvuD,GASjC,OARK5D,GACCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJkE,GAID,YAAA6yD,qBAAR,SAEEnxD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAKG,WAErB,IAAAw0C,MAAyBN,EAAWO,QAEpC,IAAIjwD,EAAO/O,KAAK8iE,sBAAsBryD,EAAM+wD,EAASC,EAAS1C,GAC9D,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GASpC,OARK4D,GACCosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJ8H,GAID,YAAAmwD,sBAAR,SAEEryD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAKG,WAErB,IAAAw0C,MAAyBN,EAAWO,QAEpC,IAAIiF,EAAmBxzD,EAAKc,WACxB2rB,EAASl9B,KAAKuhE,iBAChB0C,EACAzC,EACAC,EACA1C,GAEF,IAAK7hC,EAAQ,OAAO,KAEpB,OAAQA,EAAO1vB,MACb,KAAK,EAAAoa,YAAY+I,mBAEf,GACsBuM,EAAQrU,cAAgB,EAAA88C,eAAexoC,WAC3D1sB,EAAKL,UAAUlE,OAAS,EAExB,OAAOlM,KAAK2iE,kBAAkBlyD,EAAKL,UAAU,GAAIoxD,EAASC,EAAS1C,GAGrE,IAAIpmC,EAAW34B,KAAK4lE,iCACC1oC,EACnBzsB,EAAK5B,cACL2yD,EAAQS,eACR,EAAAxC,QAAQ+B,EAAQ3oC,yBAChBpoB,EACAsuD,GAEF,OAAKpmC,EACEA,EAAS/e,UAAUzK,WADJ,KAGxB,KAAK,EAAAyY,YAAYuT,gBACf,OAAwB+B,EAAQtjB,UAAUzK,WAS9C,OANI4vD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAeq7D,uGACf5B,EAAiBp5D,MAAOqyB,EAAOrU,cAG5B,MAID,YAAAg5C,sBAAR,SAEEpxD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAI1sD,EAAc7B,EAAK6B,YACvB,OAAOtS,KAAKuhE,iBAAiBjvD,EAAYnI,OAAOmI,EAAYpG,QAAU,GAAIs1D,EAASC,EAAS1C,IAItF,YAAAgE,uBAAR,SAEEtyD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAI1sD,EAAc7B,EAAK6B,YACvB,OAAOtS,KAAK2iE,kBAAkBrwD,EAAYnI,OAAOmI,EAAYpG,QAAU,GAAIs1D,EAASC,EAAS1C,IAIvF,YAAAqD,2BAAR,SAEE3xD,EAEA+wD,EAEAC,EAEA1C,QAFA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAEpC,IAAI52C,EAAiBpoB,KAAKi2B,QAAQ7N,eAElC,OADAje,OAAOie,EAAe4B,IAAI,EAAAI,KAAKxmB,OACxBwkB,EAAelnB,IAAI,EAAAkpB,KAAKxmB,OAIzB,YAAAy/D,4BAAR,SAEE5yD,EAEA+wD,EAEAC,EAEA1C,GAEA,YAJA,IAAA0C,MAAgB,EAAAr3C,KAAK+oC,WAErB,IAAA4L,MAAyBN,EAAWO,QAE7B,EAAA50C,KAAKxmB,MAIN,YAAA4+D,wBAAR,SAEE/xD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIjwD,EAAO/O,KAAKyjE,yBAAyBhzD,EAAM+wD,EAASC,EAAS1C,GACjE,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GASpC,OARK4D,GACCosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJ8H,GAID,YAAA8wD,yBAAR,SAEEhzD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAI8G,EAAW9lE,KAAK2iE,kBAAkBlyD,EAAKmE,OAAQ4sD,EAASC,EAAS1C,GACrE,IAAK+G,EAAU,OAAO,KACtB,IAAIC,EAAW/lE,KAAK2iE,kBAAkBlyD,EAAKoE,OAAQ2sD,EAASsE,EAAU/G,GACtE,IAAKgH,EAAU,OAAO,KACtB,IAAIZ,EAAa,EAAA/6C,KAAK4pC,kBAAkB8R,EAAUC,GAAU,GAS5D,OARKZ,GACCpG,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf30D,EAAK5F,MAAO,KAAMi7D,EAASr6D,WAAYs6D,EAASt6D,YAI/C05D,GAID,YAAA7C,oBAAR,SAEE7xD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKuhE,iBAAiB9wD,EAAKc,WAAYiwD,EAASC,EAAS1C,GACvE,OAAKpsD,EACDA,EAAQnF,MAAQ,EAAAoa,YAAYiG,gBACvB7tB,KAAKw/D,8BACM7sD,EAChBlC,EAAK5B,cACL2yD,EAAQS,eACR,EAAAxC,QAAqB+B,EAAQ3oC,yBAC7BpoB,EACAsuD,IAGAA,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAew7D,yEACfv1D,EAAK5F,OAGF,MAjBc,MAqBf,YAAA04D,qBAAR,SAEE9yD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIrsD,EAAU3S,KAAKsiE,oBAAoB7xD,EAAM+wD,EAASC,EAAS1C,GAC/D,IAAKpsD,EAAS,OAAO,KACrB,IAAI5D,EAAO/O,KAAKkhE,iBAAiBvuD,GASjC,OARK5D,GACCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJkE,GAID,YAAAgzD,yBAAR,SAEEtxD,EAEA+wD,EAEAC,EAEA1C,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIjwD,EAAO/O,KAAKijE,0BAA0BxyD,EAAM+wD,EAASC,EAAS1C,GAClE,IAAKhwD,EAAM,OAAO,KAClB,IAAI4D,EAAU3S,KAAKshE,iBAAiBvyD,GASpC,OARK4D,GACCosD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfviB,EAAK5F,OAIJ8H,GAID,YAAAswD,0BAAR,SAEExyD,EAEA+wD,EAEAC,EAEA1C,GAEA,YAFA,IAAAA,MAAyBN,EAAWO,QAE7Bh/D,KAAKk/D,oBAAoBzuD,EAAK0B,YAAYyH,UAAW4nD,EAAQS,eAAgBT,EAAQ3oC,wBAAyBkmC,IAMvH,YAAAnuC,gBAAA,SAEE3uB,EAEA4M,EAEAiwD,EAEAC,QAFA,IAAAD,MAA6B,EAAAW,gBAE7B,IAAAV,MAAyBN,EAAWO,QAEpC,IAAIiH,EAAehkE,EAAU4d,OAAOrS,MAAQ,EAAAoa,YAAYoJ,mBACpD/uB,EAAU4d,OAAOA,OACjB5d,EAAU4d,OACVsJ,EAA8B,KAC9BsP,EAAc5pB,EAAgB,EAAAq3D,cAAcr3D,GAAiB,GAGjE,GAAI5M,EAAUya,GAAG,EAAAra,YAAYqzB,UAAW,CAMtC,GALAvrB,OAAO87D,EAAaz4D,MAAQ,EAAAoa,YAAYlJ,OACxCyK,EAAuB88C,EAGnBE,EAAmBlkE,EAAUu2B,oBAAoBC,GAC/B,OAAO0tC,EAG7B,IAAIC,EAAqBj9C,EAActa,cACvC,GAAIu3D,EAAoB,CACtB,IAAIC,EAAsBl8D,OAAOgf,EAAclnB,UAAU46B,oBACrDypC,EAAwBD,EAAoBn6D,OAChD/B,OAAOm8D,GAAyBD,EAAoBn6D,QACpD,IAAK,IAAI7L,EAAI,EAAGA,EAAIimE,IAAyBjmE,EAAG,CAC9C,IAAIkmE,EAAyBF,EAAoBhmE,GAAGO,KAAKoL,KACpD8yD,EAAS90C,IAAIu8C,IAChBzH,EAASjiD,IACP0pD,EACAH,EAAmB/lE,UAKtB,CAEL,IAAI8lE,EACJ,GAFAh8D,OAAO87D,EAAaz4D,MAAQ,EAAAoa,YAAYlJ,OACpCynD,EAAmBlkE,EAAUu2B,oBAAoBC,GAC/B,OAAO0tC,EAI/B,IAEIK,EAFAC,EAAgBxkE,EAAUykE,iBAC1B7pC,EAAqB56B,EAAU46B,mBAEnC,GAAIhuB,IAAkB23D,EAA2B33D,EAAc3C,QAAS,CACtE/B,OAAO0yB,GAAsB2pC,GAA4B3pC,EAAmB3wB,QAC5E,IAAS7L,EAAI,EAAGA,EAAImmE,IAA4BnmE,EAC9Cy+D,EAASjiD,IACeggB,EAAoBx8B,GAAGO,KAAKoL,KAClD6C,EAAcxO,SAIlB8J,QAAQ0yB,GAAmD,GAA7BA,EAAmB3wB,QAInD,IAAIiuB,EAAwB,KACxB/qB,EAAmBq3D,EAAcr3D,iBACrC,GAAIA,EAAkB,CAOpB,KANA+qB,EAAWn6B,KAAK4+D,YACdxvD,EACAnN,EAAU4d,OACVi/C,EACAC,IAEa,OAAO,KACtBD,EAASjiD,IAAI,EAAA7Z,cAAcsC,MAAO60B,QACzBhR,IACTgR,EAAWhR,EAAcpa,KACzB+vD,EAASjiD,IAAI,EAAA7Z,cAAcsC,MAAO60B,IAIpC,IAgCIhrB,EAhCAw3D,EAAsBF,EAAcv3D,WACpC03D,EAAyBD,EAAoBz6D,OAC7CkuB,EAAiB,IAAI5yB,MAAYo/D,GACjCnS,EAAiB,IAAIjtD,MAAco/D,GACnClS,EAAqB,EACzB,IAASr0D,EAAI,EAAGA,EAAIumE,IAA0BvmE,EAAG,CAC/C,IAAIwmE,EAAuBF,EAAoBtmE,GAC3CwmE,EAAqB92D,eAAiB,EAAAuM,cAAcg6C,UACtD5B,EAAqBr0D,EAAI,GAE3B,IAAI0/D,EAAW8G,EAAqB93D,KACpC,GAAI,EAAAsxD,cAAcN,GAOhB,OANIhB,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe81D,cACfP,EAASl1D,OAGN,KAET,IAAIwvB,EAAgBr6B,KAAK4+D,YACvBmB,EACA99D,EAAU4d,OACVi/C,EACAC,GAEF,IAAK1kC,EAAe,OAAO,KAC3BD,EAAe/5B,GAAKg6B,EACpBo6B,EAAep0D,GAAKwmE,EAAqBjmE,KAAKoL,KAKhD,GAAI/J,EAAUya,GAAG,EAAAra,YAAYgxB,KAC3BlkB,EAAa,EAAAib,KAAKG,UACb,GAAItoB,EAAUya,GAAG,EAAAra,YAAYuc,aAClCzP,EAAahF,OAAOgf,GAAepa,SAC9B,CACDgxD,EAAW0G,EAAct3D,WAC7B,GAAI,EAAAkxD,cAAcN,GAOhB,OANIhB,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe81D,cACfP,EAASl1D,OAGN,KAET,IAAIkE,EAAO/O,KAAK4+D,YACdmB,EACA99D,EAAU4d,OACVi/C,EACAC,GAEF,IAAKhwD,EAAM,OAAO,KAClBI,EAAaJ,EAGf,IAAI6K,EAAY,IAAI,EAAAmd,UAAU/2B,KAAKi2B,QAASmE,EAAgBjrB,EAAYgrB,GACxEvgB,EAAU66C,eAAiBA,EAC3B76C,EAAU86C,mBAAqBA,EAE/B,IAAI97B,EAAyB32B,EAAUrB,KACnC63B,EAAYvsB,SAAQ0sB,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAI,EAAA9O,SACjB+O,EACA32B,EACA2X,EACAklD,GAGF,OADA78D,EAAUy2B,oBAAoBD,EAAaE,GACpCA,GAIT,YAAAitC,iCAAA,SAEE3jE,EAEAk9D,EAEAN,EAEAC,EAEAgI,EAEA/H,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIiH,EAAehkE,EAAU4d,OAAOrS,MAAQ,EAAAoa,YAAYoJ,mBACpD/uB,EAAU4d,OAAOA,OACjB5d,EAAU4d,OACVknD,EAAuC,KAG3C,GAAI9kE,EAAUya,GAAG,EAAAra,YAAYqoB,SAAU,CAGrC,GAAIzoB,EAAUya,GAAG,EAAAra,YAAYqzB,UAAW,CACtCvrB,OAAO87D,EAAaz4D,MAAQ,EAAAoa,YAAYlJ,OACxC,IAAI0nD,EAA6BH,EAAcp3D,cAC/C,GAAIu3D,EAAoB,CACtB,IAAIvpC,EAAqB1yB,OAAe87D,EAAchkE,UAAU46B,oBAC5DypC,EAAwBF,EAAmBl6D,OAC/C/B,OAAOm8D,GAAyBzpC,EAAmB3wB,QACnD,IAAK,IAAI7L,EAAI,EAAGA,EAAIimE,IAAyBjmE,EAC3Cy+D,EAASjiD,IACPggB,EAAmBx8B,GAAGO,KAAKoL,KAC3Bo6D,EAAmB/lE,KAc3B,KARA0mE,EAAwB/mE,KAAK8/D,qBAC3B31D,OAAOlI,EAAU46B,oBACjBsiC,EACAN,EACAC,EACAgI,EACA/H,IAE0B,OAAO,UAInC,GAA0B,OAAtBI,GAA8BA,EAAkBjzD,OAOlD,OANI6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe80D,sBACfwH,EAAWj8D,MAAO5I,EAAU4mB,cAGzB,KAKX,OAAO7oB,KAAK4wB,gBACV3uB,EACA8kE,EACAjI,EACAC,IAKJ,YAAAruC,aAAA,SAEEzuB,EAEA4M,EAEAiwD,EAEAC,G,qBAFA,IAAAD,MAA6B,EAAAW,gBAE7B,IAAAV,MAAyBN,EAAWO,QAEpC,IAAIvmC,EAAc5pB,EAAgB,EAAAq3D,cAAcr3D,GAAiB,GAG7D8pB,EAAW12B,EAAUu2B,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAI9pB,EAAe,CACjB,IACIm4D,GADAnqC,EAAqB1yB,OAAOlI,EAAU46B,qBACC3wB,OACvCsS,EAAmB3P,EAAc3C,OACrC/B,OAAOqU,GAAoBwoD,GAC3B,IAAK,IAAI3mE,EAAI,EAAGA,EAAIme,IAAoBne,EACtCy+D,EAASjiD,IAAIggB,EAAmBx8B,GAAGO,KAAKoL,KAAM6C,EAAcxO,QAEzD,CACL,IAAIw8B,EAAqB56B,EAAU46B,mBACnC1yB,SAAS0yB,GAAsBA,EAAmB3wB,SAIpD,IAAI0iB,EAAgB3sB,EAAU2sB,cAC1Bq4C,EAA0B,KAC9B,GAAIr4C,EAAe,CACjB,IAAIH,EAActkB,OAAOlI,EAAUwsB,aASnC,KARAw4C,EAAYjnE,KAAKw/D,8BACf5wC,EACAH,EAAY5f,cACZ5M,EAAU4d,OACV,EAAA4/C,QAAQX,GACRrwC,EACAswC,IAEc,OAAO,KAIzB,IAAImI,EAAwBjlE,EAAUrB,KAClC63B,EAAYvsB,SAAQg7D,GAAyB,IAAMzuC,EAAc,MACrEE,EAAW,IAAI,EAAA6F,MAAM0oC,EAAuBjlE,EAAW4M,EAAeo4D,IAC7DpuC,wBAA0BimC,EACnC78D,EAAUy2B,oBAAoBD,EAAaE,GAG3C,IAAI4C,EAAoB,EACxB,GAAI0rC,EAAW,CAEb,GADIE,EAAcF,EAAU5wD,QACX,EACXya,EAAkB6H,EAAStiB,WACTsiB,EAAStiB,QAAUya,EAAkB,IAAInpB,K,IAC/D,IAAyC,QAAAw/D,GAAW,8BAAE,CAA7C,mBAACC,EAAA,KAAgBC,EAAA,KACxBv2C,EAAgBjU,IAAIuqD,EAAgBC,I,kGAGxC9rC,EAAe0rC,EAAU7qC,oBAI3B,IAAIkrC,EAA2BrlE,EAAU6uB,gBACzC,GAAIw2C,E,IACF,IAAmB,QAAAA,EAAyBvzD,UAAQ,8BAAE,CAAjD,IAAIgd,EAAM,QACb,OAAQA,EAAOvjB,MAGb,KAAK,EAAAoa,YAAY0T,gBACf,IAAIxK,EACJ,GADIA,EAAkB6H,EAAStiB,SAE1B,GAAIya,EAAgB9G,IAAI+G,EAAOnwB,MAAO,CACzCZ,KAAKkN,MACH,EAAA1C,eAAe2nB,uBACEpB,EAAQhC,eAAelkB,MACxCkmB,EAAOnwB,MAET,YAPoB+3B,EAAStiB,QAAUya,EAAkB,IAAInpB,IAS/D,IAAI4/D,EAAiCx2C,EAAQgvC,SACzCyH,EAAyB,KAE7B,GAAKD,EAoBHC,EAAYxnE,KAAK4+D,YACf2I,EACAtlE,EAAU4d,OACV8Y,EAASE,wBACTkmC,OAxBgB,CAEhB,IAAIoI,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAU5wD,UACT8wD,EAAYn9C,IAAqB+G,EAAQnwB,MAAO,CACjE,IAAI6mE,EAAYN,EAAYjmE,IAAqB6vB,EAAQnwB,MACpD6mE,EAAU/qD,GAAG,EAAAra,YAAY+0D,WAC5BjtD,OAAOs9D,EAAUj6D,MAAQ,EAAAoa,YAAYwJ,OACrCo2C,EAAoBC,EAAW14D,MAIhCy4D,GACCzI,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe81D,cACEvvC,EAAQhC,eAAelkB,MAAM68D,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAI,EAAAnsC,MAAsBzK,EAAQ4H,EAAU6uC,GAChEr9D,OAAO,EAAAy9D,WAAWJ,EAAU7U,WAC5B,IAAIjU,EAAO8oB,EAAU7U,SAAW,EAC5Bp3B,EAAemjB,IAAMnjB,EAAuC,GAAvBA,EAAemjB,IACxDipB,EAAcpsC,aAAeA,EAC7BA,GAAgBisC,EAAU7U,SAC1Bh6B,EAASnO,IAAIuG,EAAOnwB,KAAM+mE,GAC1B,MAEF,KAAK,EAAA//C,YAAY+I,mBACf,IAAIk3C,EAAqC92C,EAAQuH,QAAQK,GACzDA,EAASnO,IAAIq9C,EAAejnE,KAAMinE,GAClC,MAEF,KAAK,EAAAjgD,YAAYoJ,mBACf,IAAI82C,EAAmB,IAAI,EAAAlsC,SAA4B7K,EAAQ4H,GAC3D1H,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIyK,EAAiB17B,KAAK4wB,gBACxBK,EAAgBqH,QAAQK,GACxB,KACA,EAAA8mC,QAAQ9mC,EAASE,yBACjBkmC,GAEErjC,IACFosC,EAAiBpsC,eAAiBA,EAClCosC,EAAiBz2C,QAAQqK,EAAe9hB,UAAUzK,aAGtD,IAAI+hB,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIyK,EAAiB37B,KAAK4wB,gBACxBM,EAAgBoH,QAAQK,GACxB,KACA,EAAA8mC,QAAQ9mC,EAASE,yBACjBkmC,GAEEpjC,IACFmsC,EAAiBnsC,eAAiBA,EAC7BmsC,EAAiBprD,GAAG,EAAAra,YAAYu0B,YACnCzsB,OAAyD,GAAlDwxB,EAAe/hB,UAAUwgB,eAAeluB,QAC/C47D,EAAiBz2C,QAAQsK,EAAe/hB,UAAUwgB,eAAe,MAIvEzB,EAASnO,IAAIs9C,EAAiBlnE,KAAMknE,GACpC,MAEF,QAAS39D,QAAO,K,iGAMtBwuB,EAASyD,oBAAsBb,EAI7B,IAAIwsC,EAAgBpvC,EAASxL,aAAa,EAAAnqB,cAAcwC,aACxD,GAAIuiE,GAAiBA,EAAcloD,SAAW8Y,EAAU,CACtDxuB,OAAO49D,EAAcv6D,MAAQ,EAAAoa,YAAY+I,oBACzC,IAAIq3C,EAAehoE,KAAK4wB,gBACHm3C,EACnB,KACApvC,EAASE,wBACTkmC,GAEEiJ,IAAcrvC,EAAS0D,oBAAgC2rC,G,IAK/D,IAAsC,QAAA/lE,EAAUmyB,oBAAkB,iCAAE,CAA3D,qBAAC5mB,GAAA,MAAMy6D,GAAA,MACd99D,OAAOqD,IAAQ,EAAAwV,aAAauC,SAC5B,IAAI2iD,QAAgB,EACpB,GAAID,GAAkBvrD,GAAG,EAAAra,YAAYqzB,UAAW,CAC1CmyC,EAAiBI,GAAkB3vC,QAAQK,GAC/CuvC,GAAmBloE,KAAK4wB,gBACtBi3C,EACA,KACA,EAAApI,UACAV,QAGFmJ,GAAmBloE,KAAK4wB,gBACtBq3C,GACA,KACA,EAAAxI,UACAV,GAGJ,GAAKmJ,GAAL,CACA,IAAI/zC,GAAYwE,EAASxE,UAKzB,GAJKA,KAAWwE,EAASxE,UAAYA,GAAY,IAAIxsB,KAIjDugE,GAAiBxrD,GAAG,EAAAra,YAAYqzB,UAClC,OAAQloB,IACN,KAAK,EAAAwV,aAAagC,WAClB,KAAK,EAAAhC,aAAakC,WAClB,KAAK,EAAAlC,aAAaqC,YAClB,KAAK,EAAArC,aAAasC,YAChB,IAAInW,GAAa+4D,GAAiBtuD,UAAUzK,WACvCA,GAAW8tB,eAAetE,EAAS5pB,OAClCgwD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfF,GAAkBvB,iBAAiBv3D,WAAWtE,MAAOsE,GAAW1D,WAAYktB,EAAS5pB,KAAKtD,YAOtG0oB,GAAUtX,IAAIrP,GAAM06D,M,mGAEtB,OAAOvvC,GAIT,YAAA6mC,8BAAA,SAEEv9D,EAEAk9D,EAEAN,EAEAC,EAEAgI,EAEA/H,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAI+H,EAAuC,KAG3C,GAAI9kE,EAAUya,GAAG,EAAAra,YAAYqoB,UAS3B,KARAq8C,EAAwB/mE,KAAK8/D,qBAC3B31D,OAAOlI,EAAU46B,oBACjBsiC,EACAN,EACAC,EACAgI,EACA/H,IAE0B,OAAO,UAInC,GAA0B,OAAtBI,GAA8BA,EAAkBjzD,OAOlD,OANI6yD,GAAcN,EAAWO,QAC3Bh/D,KAAKkN,MACH,EAAA1C,eAAe80D,sBACfwH,EAAWj8D,MAAO5I,EAAU4mB,cAGzB,KAKX,OAAO7oB,KAAK0wB,aACVzuB,EACA8kE,EACAjI,EACAC,IAGN,EAvrFA,CAA8B,EAAA3xD,mBAAjB,EAAA2b,Y,mZCrGb,IAuIYq/C,EAvIZ,OAMA,OAQA,OAuCA,OAIA,QASA,SAAkBC,GAEhB,mBAKA,yBAEA,yCAEA,yCAEA,uBAEA,wBAEA,8BAEA,8BAEA,mCAEA,iCAKA,uDAEA,sDAEA,8DAEA,sDAEA,4DAEA,6DAKA,2CAEA,iDAKA,2CAWA,6CA7DF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAqE3B,SAAYD,GAEV,mBAGA,2BAEA,yBAEA,yBAEA,2BAEA,8BAEA,4BAGA,wDAEA,2DAEA,yDAGA,0CAQA,2CAMA,qCAvCF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KA0CtB,SAAiBA,GACC,EAAA17D,KAAhB,SAAqBkF,EAAkBC,GACrC,OAASD,EAAOw2D,EAAWE,gBAAoBz2D,EAAQu2D,EAAWE,gBACzD12D,EAAOw2D,EAAWG,gBAAoB12D,EAAQu2D,EAAWG,iBAHtE,CAAiBH,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAQ3B,SAAYI,GAEV,mBAGA,iCAEA,6DAGA,yCAGA,yCAbF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAetB,SAAiBA,GACC,EAAA97D,KAAhB,SAAqBkF,EAAkBC,GACrC,OAASD,EAAO42D,EAAWF,gBAAoBz2D,EAAQ22D,EAAWF,gBACzD12D,EAAO42D,EAAWD,gBAAoB12D,EAAQ22D,EAAWD,iBAHtE,CAAiB,EAAAC,aAAA,EAAAA,WAAU,KAQ3B,iBAsDE,aArCA,KAAAC,aAAyC,KAIzC,KAAAC,WAA4C,KA6yB9C,OAtyBS,EAAA/mE,OAAP,SAAcgnE,GACZ,IAAInuC,EAAO,IAAIC,EAWf,OAVAD,EAAK3a,OAAS,KACd2a,EAAKjmB,MAAQ,EACbimB,EAAKmuC,eAAiBA,EACtBnuC,EAAKouC,cAAgB,KACrBpuC,EAAKT,WAAa,KAClBS,EAAKrrB,WAAaw5D,EAAe/uD,UAAUzK,WAC3CqrB,EAAK3B,wBAA0B8vC,EAAe9vC,wBAC9C2B,EAAKquC,WAAa,GAClBruC,EAAKsuC,eAAiB,KACtBtuC,EAAKuuC,kBAAoB,KAClBvuC,GAIF,EAAAwuC,aAAP,SAAoBL,EAA0BG,GAC5C,IAAItuC,EAAOC,EAAK94B,OAAOgnE,GAMvB,OALAnuC,EAAK3d,IAAI,OACT2d,EAAKsuC,eAAiBA,EACtBtuC,EAAKuuC,kBAAoBD,EAAejgD,aAAe,aAAeigD,EAAezvC,gBAAgB5tB,SAAS,IAC9G+uB,EAAKrrB,WAAa25D,EAAelvD,UAAUzK,WAC3CqrB,EAAK3B,wBAA0BiwC,EAAejwC,wBACvC2B,GAMT,sBAAI,6BAAc,C,IAAlB,WACE,OAAOx6B,KAAK8oE,gBAAkB9oE,KAAK2oE,gB,gCAIrC,YAAAjsD,GAAA,SAAGC,GAAyB,OAAQ3c,KAAKuU,MAAQoI,IAASA,GAE1D,YAAAC,MAAA,SAAMD,GAAyB,OAA8B,IAAtB3c,KAAKuU,MAAQoI,IAEpD,YAAAE,IAAA,SAAIF,GAAyB3c,KAAKuU,OAASoI,GAE3C,YAAA0Z,MAAA,SAAM1Z,GAAyB3c,KAAKuU,QAAUoI,GAG9C,YAAAssD,KAAA,WACE,IAAIC,EAAS,IAAIzuC,EAWjB,OAVAyuC,EAAOrpD,OAAS7f,KAChBkpE,EAAO30D,MAAQvU,KAAKuU,MACpB20D,EAAOP,eAAiB3oE,KAAK2oE,eAC7BO,EAAON,cAAgB5oE,KAAK4oE,cAC5BM,EAAOnvC,WAAa/5B,KAAK+5B,WACzBmvC,EAAO/5D,WAAanP,KAAKmP,WACzB+5D,EAAOrwC,wBAA0B74B,KAAK64B,wBACtCqwC,EAAOL,WAAa7oE,KAAK6oE,WAAWM,QACpCD,EAAOJ,eAAiB9oE,KAAK8oE,eAC7BI,EAAOH,kBAAoB/oE,KAAK+oE,kBACzBG,GAIT,YAAAE,aAAA,SAAar6D,EAAYwvB,QAAA,IAAAA,MAAA,MACvB,IACI8qC,EASAnvC,EAVAyuC,EAAiB3oE,KAAK2oE,eAE1B,OAAQ55D,EAAKmlD,gBACX,KAAK,EAAA/0B,WAAWz4B,IAAO2iE,EAAQV,EAAenvC,SAAU,MACxD,KAAK,EAAA2F,WAAWx4B,IAAO0iE,EAAQV,EAAelvC,SAAU,MACxD,KAAK,EAAA0F,WAAWh4B,IAAOkiE,EAAQV,EAAejvC,SAAU,MACxD,KAAK,EAAAyF,WAAW/3B,IAAOiiE,EAAQV,EAAehvC,SAAU,MACxD,KAAK,EAAAwF,WAAW93B,KAAQgiE,EAAQV,EAAe/uC,UAAW,MAC1D,QAAS,MAAM,IAAIvK,MAAM,0BAG3B,GAAIkP,EAAQ,CACV,GAAI8qC,GAASA,EAAMn9D,OACjB,IAAK,IAAI7L,EAAI,EAAGyiB,EAAIumD,EAAMn9D,OAAQ7L,EAAIyiB,IAAKziB,EACzC,IAAKk+B,EAAOvU,IAAIq/C,EAAMhpE,GAAG43B,OAAQ,CAC/BiC,EAAQmvC,EAAMhpE,GAEd,IADA,IAAI,EAAIgpE,EAAMn9D,OAAS,EAChB7L,EAAI,GAAG88B,UAAUksC,EAAMhpE,GAAKgpE,EAAY,EAANhpE,MAKzC,OAJAgpE,EAAMn9D,OAAS,EACfguB,EAAMnrB,KAAOA,EACbmrB,EAAM3lB,MAAQ,EAAAlS,YAAYoa,KAC1Bzc,KAAKspE,eAAepvC,EAAMjC,OAAO,GAC1BiC,EAIbA,EAAQyuC,EAAehuC,SAAS5rB,QAE5Bs6D,GAASA,EAAMn9D,SACjBguB,EAAQmvC,EAAMtrB,OACRhvC,KAAOA,EACbmrB,EAAM3lB,MAAQ,EAAAlS,YAAYoa,MAE1Byd,EAAQyuC,EAAehuC,SAAS5rB,GAIpC,OADA/O,KAAKspE,eAAepvC,EAAMjC,OAAO,GAC1BiC,GAIT,YAAAqvC,oBAAA,SAAoBx6D,EAAYwvB,QAAA,IAAAA,MAAA,MAC9B,IAAIrE,EAAQl6B,KAAKopE,aAAar6D,EAAMwvB,GACpCrE,EAAMrd,IAAI,EAAAxa,YAAYmnE,QACtB,IAAIf,EAAezoE,KAAKyoE,aAIxB,OAHKA,IAAczoE,KAAKyoE,aAAeA,EAAe,IAAI9gE,KAC1D8gE,EAAa5rD,IAAI,QAAW7c,KAAK2oE,eAAepvC,oBAAsBW,GACtEl6B,KAAKypE,aAAavvC,EAAMjC,MAAOmwC,EAAWsB,UACnCxvC,GAIT,YAAAyvC,cAAA,SAAczvC,GACZ,IAAIA,EAAMxd,GAAG,EAAAra,YAAYs1B,SAAzB,CACAxtB,OAAO+vB,EAAMjC,OAAS,GACtB,IACIoxC,EADAV,EAAiB3oE,KAAK2oE,eAG1B,OADAx+D,OAAqB,MAAd+vB,EAAMnrB,MACEmrB,EAAMnrB,KAAMmlD,gBACzB,KAAK,EAAA/0B,WAAWz4B,IACd2iE,EAAQV,EAAenvC,WAAamvC,EAAenvC,SAAW,IAC9D,MAEF,KAAK,EAAA2F,WAAWx4B,IACd0iE,EAAQV,EAAelvC,WAAakvC,EAAelvC,SAAW,IAC9D,MAEF,KAAK,EAAA0F,WAAWh4B,IACdkiE,EAAQV,EAAejvC,WAAaivC,EAAejvC,SAAW,IAC9D,MAEF,KAAK,EAAAyF,WAAW/3B,IACdiiE,EAAQV,EAAehvC,WAAagvC,EAAehvC,SAAW,IAC9D,MAEF,KAAK,EAAAwF,WAAW93B,KACdgiE,EAAQV,EAAe/uC,YAAc+uC,EAAe/uC,UAAY,IAChE,MAEF,QAAS,MAAM,IAAIvK,MAAM,0BAE3BllB,OAAO+vB,EAAMjC,OAAS,GACtBoxC,EAAM58D,KAAKytB,KAIb,YAAA0vC,oBAAA,SAAoB76D,EAAYwvB,QAAA,IAAAA,MAAA,MAC9B,IAAIrE,EAAQl6B,KAAKopE,aAAar6D,EAAMwvB,GAEpC,OADAv+B,KAAK2pE,cAAczvC,GACZA,GAIT,YAAA2vC,eAAA,SAAejpE,GACb,IAAI6nE,EAAezoE,KAAKyoE,aACxB,OAAIA,GAAgBA,EAAaz+C,IAAIppB,GAAc6nE,EAAavnE,IAAIN,GAC7D,MAIT,YAAAkpE,eAAA,SAAelpE,EAAcmO,EAAYwvB,QAAA,IAAAA,MAAA,MACvC,IAAIwrC,EAAc/pE,KAAKopE,aAAar6D,EAAMwvB,GACtCkqC,EAAezoE,KAAKyoE,aAKxB,OAJKA,EACAt+D,QAAQs+D,EAAaz+C,IAAIppB,IADXZ,KAAKyoE,aAAeA,EAAe,IAAI9gE,IAE1DoiE,EAAYltD,IAAI,EAAAxa,YAAYmnE,QAC5Bf,EAAa5rD,IAAIjc,EAAMmpE,GAChBA,GAIT,YAAAC,eAAA,SAAeppE,EAAcmO,EAAYkpB,EAAY6uC,GACnD,QADmD,IAAAA,MAAA,MAC9C9mE,KAAKyoE,aACL,CACH,IAAIwB,EAAgBjqE,KAAKyoE,aAAavnE,IAAIN,GAC1C,GAAIqpE,EAOF,OANInD,GACF9mE,KAAK2oE,eAAe1yC,QAAQ/oB,MAC1B,EAAA1C,eAAe2nB,uBACf20C,EAAWj8D,OAGRo/D,OAVajqE,KAAKyoE,aAAe,IAAI9gE,IAahDwC,OAAO8tB,EAAQj4B,KAAK2oE,eAAe5vC,cAAc7sB,QACjD,IAAIg+D,EAAc,IAAI,EAAA/xC,MAAMv3B,EAAMq3B,EAAOlpB,EAAM/O,KAAK2oE,gBAGpD,OADA3oE,KAAKyoE,aAAa5rD,IAAIjc,EAAMspE,GACrBA,GAIT,YAAAC,iBAAA,W,QACE,GAAInqE,KAAKyoE,aAAc,C,IACrB,IAAwB,QAAAzoE,KAAKyoE,aAAa10D,UAAQ,8BAAE,CAA/C,IAAIg2D,EAAW,QACdA,EAAYrtD,GAAG,EAAAra,YAAYmnE,SAC7BxpE,KAAK2pE,cAAcI,I,iGAGvB/pE,KAAKyoE,aAAe,OAKxB,YAAAnD,YAAA,SAAY1kE,GACV,IACIwpE,EADAh0C,EAAuBp2B,KAE3B,GAAG,IAAKoqE,EAAQh0C,EAAQqyC,eAAkB2B,EAAMpgD,IAAIppB,GAAQ,OAAOwpE,EAAMlpE,IAAIN,SACtEw1B,EAAUA,EAAQvW,QACzB,OAAO7f,KAAK2oE,eAAe7vC,aAAa53B,IAAIN,IAI9C,YAAAq2B,OAAA,SAAOr2B,GACL,IAAI+R,EAAU3S,KAAKslE,YAAY1kE,GAC/B,OAAI+R,GACG3S,KAAKiiE,eAAehrC,OAAOr2B,IAIpC,YAAAypE,YAAA,SAAYpyC,EAAYtb,EAAkB2tD,GACxC,YADwC,IAAAA,OAAA,GACpCryC,EAAQ,EAAUqyC,EAEfryC,EADUj4B,KAAK6oE,WACI38D,SAAWixB,UAAUn9B,KAAK6oE,WAAW5wC,IAAUtb,IAASA,GAIpF,YAAA4tD,eAAA,SAAetyC,EAAYtb,EAAkB2tD,GAC3C,YAD2C,IAAAA,OAAA,GACvCryC,EAAQ,EAAUqyC,EAEfryC,EADUj4B,KAAK6oE,WACI38D,QAAwD,IAA7CixB,UAAUn9B,KAAK6oE,WAAW5wC,IAAUtb,IAI3E,YAAA8sD,aAAA,SAAaxxC,EAAYtb,GACvB,KAAIsb,EAAQ,GAAZ,CACA,IAAI4wC,EAAa7oE,KAAK6oE,WAClBt0D,EAAQ0jB,EAAQ4wC,EAAW38D,OAASixB,UAAU0rC,EAAW5wC,IAAU,EACvEj4B,KAAK6oE,WAAW5wC,GAAS1jB,EAAQoI,IAInC,YAAA2sD,eAAA,SAAerxC,EAAYtb,GACzB,KAAIsb,EAAQ,GAAZ,CACA,IAAI4wC,EAAa7oE,KAAK6oE,WAClBt0D,EAAQ0jB,EAAQ4wC,EAAW38D,OAASixB,UAAU0rC,EAAW5wC,IAAU,EACvEj4B,KAAK6oE,WAAW5wC,GAAS1jB,GAASoI,IAIpC,YAAA6tD,eAAA,WACE,IAAI7B,EAAiB3oE,KAAK2oE,eACtBr/C,EAAKq/C,EAAe9uC,cACpB4wC,EAAQ9B,EAAe7uC,WAG3B,OAFK2wC,EACAA,EAAMh+D,KAAK6c,GADJq/C,EAAe7uC,WAAa,CAAExQ,GAEnCq/C,EAAe5uC,WAAazQ,EAAG7d,SAAS,KAIjD,YAAAi/D,cAAA,WACE,IAAI/B,EAAiB3oE,KAAK2oE,eACtB8B,EAAQtgE,OAAOw+D,EAAe7uC,YAC9B5tB,EAAS/B,OAAOsgE,EAAMv+D,QAC1Bu+D,EAAM1sB,MACF7xC,EAAS,EACXy8D,EAAe5uC,WAAa0wC,EAAMv+D,EAAS,GAAGT,SAAS,KAEvDk9D,EAAe5uC,WAAa,KAC5B4uC,EAAe7uC,WAAa,OAKhC,YAAA6wC,QAAA,SAAQrsC,GACNt+B,KAAKuU,OAAuB,MAAd+pB,EAAM/pB,MACpBvU,KAAK6oE,WAAavqC,EAAMuqC,YAI1B,YAAA+B,mBAAA,SAAmBtsC,GACbA,EAAM5hB,GAAG,IACX1c,KAAK6c,IAAI,KAEPyhB,EAAM5hB,GAAG,IACX1c,KAAK6c,IAAI,MAEPyhB,EAAM5hB,GAAG,KAAqB4hB,EAAMvE,YAAc/5B,KAAK+5B,YACzD/5B,KAAK6c,IAAI,MAEPyhB,EAAM5hB,GAAG,KAAwB4hB,EAAMsqC,eAAiB5oE,KAAK4oE,eAC/D5oE,KAAK6c,IAAI,MAEPyhB,EAAM5hB,GAAG,KACX1c,KAAK6c,IAAI,OAGX,IADA,IAAIgsD,EAAavqC,EAAMuqC,WACdxoE,EAAI,EAAGyiB,EAAI+lD,EAAW38D,OAAQ7L,EAAIyiB,IAAKziB,EAAG,CACjD,IAAIkU,EAAQs0D,EAAWxoE,GACnBkU,EAAQ6zD,EAAWsB,UAAU1pE,KAAKypE,aAAappE,EAAG+nE,EAAWyC,wBAC7Dt2D,EAAQ6zD,EAAW0C,UAAU9qE,KAAKypE,aAAappE,EAAG+nE,EAAW2C,wBAC7Dx2D,EAAQ6zD,EAAW4C,WAAWhrE,KAAKypE,aAAappE,EAAG+nE,EAAW6C,2BAKtE,YAAAC,cAAA,SAAct5D,EAAYC,GAExB7R,KAAK6c,IAAIjL,EAAK2C,MAAQ1C,EAAM0C,MAAQ,KAGpCvU,KAAK6c,IAAiB,MAAbjL,EAAK2C,OACdvU,KAAK6c,IAAkB,MAAdhL,EAAM0C,OAGfvU,KAAK4qE,mBAAmBh5D,GACxB5R,KAAK4qE,mBAAmB/4D,GAQxB,IALA,IAAIs5D,EAAiBv5D,EAAKi3D,WACtBuC,EAAoBD,EAAej/D,OACnCm/D,EAAkBx5D,EAAMg3D,WACxByC,EAAqBD,EAAgBn/D,OACrCq/D,EAAgB,IAAI/jE,MAAkBgkE,IAASJ,EAAmBE,IAC7DjrE,EAAI,EAAGA,EAAI+qE,IAAqB/qE,EACvCkrE,EAAclrE,GAAK+nE,EAAW17D,KAC5BywB,UAAUguC,EAAe9qE,IACzBA,EAAIirE,EACAnuC,UAAUkuC,EAAgBhrE,IAC1B,GAGR,IAASA,EAAI+qE,EAAmB/qE,EAAIirE,IAAsBjrE,EACxDkrE,EAAclrE,GAAK+nE,EAAW17D,KAC5B,EACAywB,UAAUkuC,EAAgBhrE,KAG9BL,KAAK6oE,WAAa0C,GAIpB,YAAAE,UAAA,SAAU56D,EAAqB9B,GAC7B,IAAKA,EAAK2N,GAAG,KAAqB,OAAO,EAIzC,OAAQ,EAAAgtC,gBAAgB74C,IACtB,KAAK,EAAAuuB,aAAaovB,SAChB,IAAK,EAAAkd,WAAW76D,GAAO,MAEvB,QADIqpB,EAAQl6B,KAAK2oE,eAAe5vC,cAAc,EAAA4yC,iBAAiB96D,KACjD9B,KAAK2N,GAAG,MAAuB1c,KAAKqqE,YAAYnwC,EAAMjC,MAAOmwC,EAAWzD,SAAS,GAEjG,KAAK,EAAAvlC,aAAa0oB,SAChB,IAAI5tB,EACJ,QADIA,EAAQl6B,KAAK2oE,eAAe5vC,cAAc,EAAA6yC,iBAAiB/6D,KACjD9B,KAAK2N,GAAG,MAAuB1c,KAAKqqE,YAAYnwC,EAAMjC,MAAOmwC,EAAWzD,SAAS,GAGnG,OAAO,GAIT,YAAAkH,qBAAA,SAAqBh7D,GAEnB,OAAQ,EAAA64C,gBAAgB74C,IACtB,KAAK,EAAAuuB,aAAaovB,SAChB,IAAK,EAAAkd,WAAW76D,GAAO,MACvB,IAAIqpB,EAAQl6B,KAAK2oE,eAAe5vC,cAAc,EAAA4yC,iBAAiB96D,IAC/D7Q,KAAKypE,aAAavvC,EAAMjC,MAAOmwC,EAAWzD,SAC1C3kE,KAAK6rE,qBAAqB,EAAAC,iBAAiBj7D,IAC3C,MAEF,KAAK,EAAAuuB,aAAa0oB,SACZ5tB,EAAQl6B,KAAK2oE,eAAe5vC,cAAc,EAAA6yC,iBAAiB/6D,IAC/D7Q,KAAKypE,aAAavvC,EAAMjC,MAAOmwC,EAAWzD,SAC1C,MAEF,KAAK,EAAAvlC,aAAa4uB,GAChB,IAAIv1C,EAAU,EAAAszD,WAAWl7D,GACzB,IAAK4H,EAAS,MACV,EAAAixC,gBAAgBjxC,IAAY,EAAA2mB,aAAaooB,QAIxC,EAAAwkB,kBAAkBvzD,IAAY,EAAA0mB,WAAWz4B,KAAoC,GAA7B,EAAAulE,iBAAiBxzD,IACjE,EAAAuzD,kBAAkBvzD,IAAY,EAAA0mB,WAAWx4B,KAAuC,GAAhC,EAAAulE,oBAAoBzzD,IAAkD,GAAjC,EAAA0zD,qBAAqB1zD,MAE3GzY,KAAK6rE,qBAAqB,EAAAO,eAAev7D,IACzC7Q,KAAK6rE,qBAAqB,EAAAQ,UAAUx7D,KAGxC,MAEF,KAAK,EAAAuuB,aAAaspB,MAChB,OAAQ,EAAA4jB,WAAWz7D,IACjB,KAAK,EAAAyyB,QAAQipC,OACb,KAAK,EAAAjpC,QAAQkpC,OACXxsE,KAAKysE,sBAAsB,EAAAC,cAAc77D,IAI7C,MAEF,KAAK,EAAAuuB,aAAaypB,OAChB,OAAQ,EAAA8jB,YAAY97D,IAClB,KAAK,EAAAu4B,SAASwjC,MACZ,IAAIh7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAmC,GAA1B,EAAAykB,iBAAiBr6D,GAClE5R,KAAK6rE,qBAAqBh6D,GACjB,EAAA63C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAoC,GAA3B,EAAAykB,iBAAiBp6D,IAC1E7R,KAAK6rE,qBAAqBj6D,GAE5B,MAEF,KAAK,EAAAw3B,SAAS2jC,MACRn7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAuC,GAA7B,EAAA0kB,oBAAoBt6D,IAA4C,GAA9B,EAAAu6D,qBAAqBv6D,GAEhG,EAAA83C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAwC,GAA9B,EAAA0kB,oBAAoBr6D,IAA8C,GAA/B,EAAAs6D,qBAAqBt6D,IAClH7R,KAAK6rE,qBAAqBj6D,GAF1B5R,KAAK6rE,qBAAqBh6D,GAI5B,MAEF,KAAK,EAAAu3B,SAAS4jC,MACRp7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAmC,GAA1B,EAAAykB,iBAAiBr6D,GAClE5R,KAAK6rE,qBAAqBh6D,GACjB,EAAA63C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAoC,GAA3B,EAAAykB,iBAAiBp6D,IAC1E7R,KAAK6rE,qBAAqBj6D,GAE5B,MAEF,KAAK,EAAAw3B,SAAS6jC,MACRr7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAsC,GAA7B,EAAA0kB,oBAAoBt6D,IAA4C,GAA9B,EAAAu6D,qBAAqBv6D,GACxG5R,KAAK6rE,qBAAqBh6D,GACjB,EAAA63C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAuC,GAA9B,EAAA0kB,oBAAoBr6D,IAA8C,GAA/B,EAAAs6D,qBAAqBt6D,IACjH7R,KAAK6rE,qBAAqBj6D,GAKhC,MAEF,KAAK,EAAAwtB,aAAagvB,KAGhB,OAFW,EAAA8e,cAAcr8D,IAGvB,KAFY7Q,KAAK2oE,eAAe1yC,QAEnBjG,eAAenH,aAC1B7oB,KAAK6rE,qBAAqB,EAAAsB,eAAet8D,EAAM,OAUzD,YAAA47D,sBAAA,SAAsB57D,GAEpB,OAAQ,EAAA64C,gBAAgB74C,IACtB,KAAK,EAAAuuB,aAAaspB,MAChB,OAAQ,EAAA4jB,WAAWz7D,IACjB,KAAK,EAAAyyB,QAAQipC,OACb,KAAK,EAAAjpC,QAAQkpC,OACXxsE,KAAK6rE,qBAAqB,EAAAa,cAAc77D,IAI5C,MAEF,KAAK,EAAAuuB,aAAa4uB,GAChB,IAAIx1C,EAAS,EAAA6zD,UAAUx7D,GACvB,GAAI,EAAA64C,gBAAgBlxC,IAAW,EAAA4mB,aAAaooB,MAAO,CAEjD,IADc,EAAAukB,WAAWl7D,GACX,OAIX,EAAAm7D,kBAAkBxzD,IAAW,EAAA2mB,WAAWz4B,KAAmC,GAA5B,EAAAulE,iBAAiBzzD,IAChE,EAAAwzD,kBAAkBxzD,IAAW,EAAA2mB,WAAWx4B,MAAuC,GAA/B,EAAAulE,oBAAoB1zD,IAAgD,GAAhC,EAAA2zD,qBAAqB3zD,OAE1GxY,KAAKysE,sBAAsB,EAAAL,eAAev7D,IAC1C7Q,KAAKysE,sBAAsB,EAAAV,WAAWl7D,KAI1C,MAEF,KAAK,EAAAuuB,aAAaypB,OAChB,OAAQ,EAAA8jB,YAAY97D,IAElB,KAAK,EAAAu4B,SAASwjC,MACZ,IAAIh7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAmC,GAA1B,EAAAykB,iBAAiBr6D,GAClE5R,KAAK6rE,qBAAqBh6D,GACjB,EAAA63C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAoC,GAA3B,EAAAykB,iBAAiBp6D,IAC1E7R,KAAK6rE,qBAAqBj6D,GAE5B,MAEF,KAAK,EAAAw3B,SAAS2jC,MACRn7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAsC,GAA7B,EAAA0kB,oBAAoBt6D,IAA4C,GAA9B,EAAAu6D,qBAAqBv6D,GACxG5R,KAAK6rE,qBAAqBh6D,GACjB,EAAA63C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAuC,GAA9B,EAAA0kB,oBAAoBr6D,IAA8C,GAA/B,EAAAs6D,qBAAqBt6D,IACjH7R,KAAK6rE,qBAAqBj6D,GAE5B,MAEF,KAAK,EAAAw3B,SAAS4jC,MACRp7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAmC,GAA1B,EAAAykB,iBAAiBr6D,GAClE5R,KAAK6rE,qBAAqBh6D,GACjB,EAAA63C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAoC,GAA3B,EAAAykB,iBAAiBp6D,IAC1E7R,KAAK6rE,qBAAqBj6D,GAE5B,MAEF,KAAK,EAAAw3B,SAAS6jC,MACRr7D,EAAO,EAAAi7D,cAAch8D,GACrBgB,EAAQ,EAAAi7D,eAAej8D,GACvB,EAAA64C,gBAAgB93C,IAAS,EAAAwtB,aAAaooB,OAAuC,GAA7B,EAAA0kB,oBAAoBt6D,IAA4C,GAA9B,EAAAu6D,qBAAqBv6D,GAEhG,EAAA83C,gBAAgB73C,IAAU,EAAAutB,aAAaooB,OAAwC,GAA9B,EAAA0kB,oBAAoBr6D,IAA8C,GAA/B,EAAAs6D,qBAAqBt6D,IAClH7R,KAAK6rE,qBAAqBj6D,GAF1B5R,KAAK6rE,qBAAqBh6D,MAiBtC,YAAAu7D,YAAA,SAAYv8D,EAAqB9B,GAM/B,GAHA5E,OAAO4E,GAAQ,EAAAqb,KAAKG,OAGfxb,EAAK2N,GAAG,IAAsC,OAAO,EAE1D,IAAIlH,EACJ,OAAQ,EAAAk0C,gBAAgB74C,IAGtB,KAAK,EAAAuuB,aAAa0oB,SAChB,IAAI5tB,EAAQl6B,KAAK2oE,eAAe5vC,cAAc,EAAA6yC,iBAAiB/6D,IAC/D,OAAQ7Q,KAAKqqE,YAAYnwC,EAAMjC,MAAOmwC,EAAWiF,SAAS,IACnDC,EAAsBpzC,EAAMnrB,KAAMA,GAI3C,KAAK,EAAAqwB,aAAaovB,SAEhB,OADArkD,OAAO,EAAAuhE,WAAW76D,IACX7Q,KAAKotE,YAAY,EAAAtB,iBAAiBj7D,GAAO9B,GAIlD,KAAK,EAAAqwB,aAAa4oB,UAEhB,IAAI,EAAS79C,OAAOnK,KAAK2oE,eAAe1yC,QAAQhO,eAAe/mB,IAAIiJ,OAAO,EAAAojE,iBAAiB18D,MAE3F,OADA1G,OAAO,EAAOqD,MAAQ,EAAAoa,YAAY1K,QAC3BowD,EAAsBnjE,OAAgB,EAAQ4E,MAAOA,GAG9D,KAAK,EAAAqwB,aAAaypB,OAChB,OAAQ,EAAA8jB,YAAY97D,IAGlB,KAAK,EAAAu4B,SAASwjC,MACd,KAAK,EAAAxjC,SAAS2jC,MACd,KAAK,EAAA3jC,SAASokC,MACd,KAAK,EAAApkC,SAASqkC,MACd,KAAK,EAAArkC,SAAS4jC,MACd,KAAK,EAAA5jC,SAAS6jC,MACd,KAAK,EAAA7jC,SAASskC,MACd,KAAK,EAAAtkC,SAASukC,MACd,KAAK,EAAAvkC,SAASwkC,MACd,KAAK,EAAAxkC,SAASykC,MACd,KAAK,EAAAzkC,SAAS0kC,MACd,KAAK,EAAA1kC,SAAS2kC,MACd,KAAK,EAAA3kC,SAAS4kC,MACd,KAAK,EAAA5kC,SAAS6kC,MACd,KAAK,EAAA7kC,SAAS8kC,MACd,KAAK,EAAA9kC,SAAS+kC,MACd,KAAK,EAAA/kC,SAASglC,MACd,KAAK,EAAAhlC,SAASilC,MACd,KAAK,EAAAjlC,SAASklC,MACd,KAAK,EAAAllC,SAASmlC,MACd,KAAK,EAAAnlC,SAASolC,MACd,KAAK,EAAAplC,SAASqlC,MACd,KAAK,EAAArlC,SAASslC,MACd,KAAK,EAAAtlC,SAASulC,MACd,KAAK,EAAAvlC,SAASwlC,MACd,KAAK,EAAAxlC,SAASylC,MACd,KAAK,EAAAzlC,SAAS0lC,MACd,KAAK,EAAA1lC,SAAS2lC,MACd,KAAK,EAAA3lC,SAAS4lC,MACd,KAAK,EAAA5lC,SAAS6lC,MACd,KAAK,EAAA7lC,SAAS8lC,MACd,KAAK,EAAA9lC,SAAS+lC,MAAO,OAAO,EAG5B,KAAK,EAAA/lC,SAASgmC,OACZ,QAEI,EAAA1lB,gBAAgBl0C,EAAU,EAAAq3D,cAAch8D,KAAU,EAAAuuB,aAAaooB,QAEhC,GAA7B,EAAAykB,iBAAiBz2D,IAEc,GAA7B,EAAAy2D,iBAAiBz2D,KAChBxV,KAAKotE,YAAY,EAAAN,eAAej8D,GAAO9B,KAI5C,EAAA26C,gBAAgBl0C,EAAU,EAAAs3D,eAAej8D,KAAU,EAAAuuB,aAAaooB,QAEjC,GAA7B,EAAAykB,iBAAiBz2D,IAEc,GAA7B,EAAAy2D,iBAAiBz2D,KAChBxV,KAAKotE,YAAY,EAAAP,cAAch8D,GAAO9B,KASjD,KAAK,EAAAq6B,SAASimC,OAGZ,QAGM,EAAA3lB,gBAAgBl0C,EAAU,EAAAq3D,cAAch8D,KAAU,EAAAuuB,aAAaooB,OAC/D,EAAAykB,iBAAiBz2D,IAAYzG,EAAKwkD,wBAAwB,EAAAnpC,KAAKhnB,OAC3DpD,KAAKotE,YAAY53D,EAASzG,IAG9B,EAAA26C,gBAAgBl0C,EAAU,EAAAs3D,eAAej8D,KAAU,EAAAuuB,aAAaooB,OAChE,EAAAykB,iBAAiBz2D,IAAYzG,EAAKwkD,wBAAwB,EAAAnpC,KAAKhnB,OAC3DpD,KAAKotE,YAAY53D,EAASzG,IAMtC,KAAK,EAAAq6B,SAASkmC,OACZ,IAAIrwB,EAAQ,GAAKlwC,EAAK8tC,KACtB,OAAO,EAAA6M,gBAAgBl0C,EAAU,EAAAs3D,eAAej8D,KAAU,EAAAuuB,aAAaooB,OAChE,EAAAykB,iBAAiBz2D,GAAWypC,EAIrC,KAAK,EAAA7V,SAASmmC,OACRtwB,EAAQ,GAAKlwC,EAAK8tC,KACtB,OAAO78C,KAAKotE,YAAY,EAAAP,cAAch8D,GAAO9B,KAC3C,EAAA26C,gBAAgBl0C,EAAU,EAAAs3D,eAAej8D,KAAU,EAAAuuB,aAAaooB,OAChE,EAAAykB,iBAAiBz2D,GAAWypC,GAMhC,KAAK,EAAA7V,SAASomC,OACRvwB,EAAQ,GAAKlwC,EAAK8tC,KACtB,OAAO9tC,EAAK2N,GAAG,KAET,EAAAgtC,gBAAgBl0C,EAAU,EAAAs3D,eAAej8D,KAAU,EAAAuuB,aAAaooB,OAChE,EAAAykB,iBAAiBz2D,GAAWypC,GAE9Bj/C,KAAKotE,YAAY,EAAAP,cAAch8D,GAAO9B,MACpC,EAAA26C,gBAAgBl0C,EAAU,EAAAs3D,eAAej8D,KAAU,EAAAuuB,aAAaooB,OAChE,EAAAykB,iBAAiBz2D,IAAYypC,GAKrC,KAAK,EAAA7V,SAASqmC,OACd,KAAK,EAAArmC,SAASsmC,OACd,KAAK,EAAAtmC,SAASumC,OACZ,OAAO3vE,KAAKotE,YAAY,EAAAP,cAAch8D,GAAO9B,IACtC/O,KAAKotE,YAAY,EAAAN,eAAej8D,GAAO9B,GAGlD,MAGF,KAAK,EAAAqwB,aAAaspB,MAChB,OAAQ,EAAA4jB,WAAWz7D,IAGjB,KAAK,EAAAyyB,QAAQipC,OACb,KAAK,EAAAjpC,QAAQkpC,OAAQ,OAAO,EAG5B,KAAK,EAAAlpC,QAAQssC,OACb,KAAK,EAAAtsC,QAAQusC,OACb,KAAK,EAAAvsC,QAAQwsC,UAAW,OAAO/gE,EAAK8tC,KAAO,EAE7C,MAIF,KAAK,EAAAzd,aAAaooB,MAChB,IAAIlmD,EAAa,EACjB,OAAQ,EAAA0qE,kBAAkBn7D,IACxB,KAAK,EAAAsuB,WAAWz4B,IAAOpF,EAAQ,EAAA2qE,iBAAiBp7D,GAAO,MACvD,KAAK,EAAAsuB,WAAWx4B,IAAOrF,EAAQ,EAAA4qE,oBAAoBr7D,GAAO,MAC1D,KAAK,EAAAsuB,WAAWh4B,IAAO7F,EAAQ8B,IAAI,EAAA2sE,iBAAiBl/D,IAAQ,MAC5D,KAAK,EAAAsuB,WAAW/3B,IAAO9F,EAAQ8B,IAAI,EAAA4sE,iBAAiBn/D,IAAQ,MAC5D,QAAS1G,QAAO,GAElB,OAAQ4E,EAAKvB,MACX,KAAK,EAAa,OAAOlM,EAAQ4B,GAAG+sE,WAAa3uE,EAAQ4B,GAAGmkD,UAC5D,KAAK,EAAc,OAAO/lD,EAAQ6B,IAAI8sE,WAAa3uE,EAAQ6B,IAAIkkD,UAC/D,KAAK,EAAa,OAAO/lD,EAAQ,GAAKA,EAAQiC,GAAG8jD,UACjD,KAAK,EAAc,OAAO/lD,EAAQ,GAAKA,EAAQkC,IAAI6jD,UACnD,KAAK,GAAe,OAAuB,KAAP,EAAR/lD,GAE9B,MAIF,KAAK,EAAA89B,aAAa+oB,KAChB,IAAI+nB,OAAQ,EACRn3B,EAAS,EAAAo3B,aAAat/D,GAC1B,OAAQ,EAAAu/D,aAAav/D,IACnB,KAAK,EAAMq/D,EAAWn3B,EAAS,EAAA3uB,KAAKlnB,GAAM,EAAAknB,KAAK7mB,GAAK,MACpD,KAAK,EAAM2sE,EAAWn3B,EAAS,EAAA3uB,KAAKjnB,IAAM,EAAAinB,KAAK5mB,IAAK,MACpD,QAAW0sE,EAAWn3B,EAAS,EAAA3uB,KAAKhnB,IAAM,EAAAgnB,KAAK3mB,IAEjD,OAAO6pE,EAAsB4C,EAAUnhE,GAMzC,KAAK,EAAAqwB,aAAayuB,MAChB,IAAK,EAAAwiB,aAAax/D,GAAO,CACvB,IAAIgsC,EAAO1yC,OAAO,EAAAmmE,mBAAmBz/D,IACjC0/D,EAAO,EAAAC,cAAc3/D,EAAMgsC,EAAO,GACtC,OAAO78C,KAAKotE,YAAYmD,EAAMxhE,GAEhC,MAIF,KAAK,EAAAqwB,aAAa4uB,GAChB,OAAOhuD,KAAKotE,YAAY,EAAAf,UAAUx7D,GAAO9B,IAClC/O,KAAKotE,YAAYjjE,OAAO,EAAA4hE,WAAWl7D,IAAQ9B,GAIpD,KAAK,EAAAqwB,aAAa+yB,OAChB,OAAOnyD,KAAKotE,YAAY,EAAAqD,cAAc5/D,GAAO9B,IACtC/O,KAAKotE,YAAY,EAAAsD,cAAc7/D,GAAO9B,GAI/C,KAAK,EAAAqwB,aAAagvB,KAChB,IACIjmC,EADUnoB,KAAK2oE,eAAe1yC,QACJ9N,gBAC1BwoD,EAAexmE,OAAO,EAAA+iE,cAAcr8D,IACxC,GAAIsX,EAAgB6B,IAAI2mD,GAAe,CACrC,IAAIh4C,EAAWxQ,EAAgBjnB,IAAIyvE,GACnCxmE,OAAOwuB,EAASnrB,MAAQ,EAAAoa,YAAY9I,UACpC,IAAI3P,EAAwBwpB,EAAU/e,UAAUzK,WAChD,OAAmBwpB,EAAU6B,KAAK9d,GAAG,IAC9B4wD,EAAsBn+D,EAAYJ,GAE3C,OAAO,EAIT,KAAK,EAAAqwB,aAAauuB,YAAa,OAAO,EAExC,OAAO,GAGT,YAAAliD,SAAA,WAGE,IAFA,IAAImlE,EAAS,EACT/wD,EAAS7f,KAAK6f,OACXA,GACLA,EAASA,EAAOA,SACd+wD,EAEJ,MAAO,QAAU5wE,KAAKiiE,eAAiB,KAAO2O,EAAOnlE,WAAa,KAEtE,EAl0BA,GAq0BA,SAAS6hE,EAAsB4C,EAAgB1+D,GAC7C,OAAQ0+D,EAASxzD,GAAG,IACbwzD,EAASrzB,KAAOrrC,EAAOqrC,MACvBqzB,EAASxzD,GAAG,IAAqBlL,EAAOkL,GAAG,GAUpD,SAASm0D,EAAoBhgE,EAAqBigE,GAChD,OAAQ,EAAApnB,gBAAgB74C,IACtB,KAAK,EAAAuuB,aAAa0oB,SAChBgpB,EAAKtmD,IAAI,EAAAohD,iBAAiB/6D,IAC1B,MAEF,KAAK,EAAAuuB,aAAaovB,SAChBsiB,EAAKtmD,IAAI,EAAAmhD,iBAAiB96D,IAG5B,QAAS,EAAAkgE,SAASlgE,EAAMigE,EAAMD,IA51BrB,EAAAp2C,OA40Bb,0BAA+B5pB,EAAqBigE,GAElD,YAFkD,IAAAA,MAAA,IAAqBppE,KACvE,EAAAqpE,SAASlgE,EAAMigE,EAAMD,GACdC,I,4gCC9hCT,YASA,OAKA,OA6BA,OAYA,OAwBA,QAOA,OAIA,OAKA,OAgEA,OAQA,OAWA,0BAGE,KAAA5zC,OAAiB,EAAAzzB,OAAOuhB,OAExB,KAAAC,UAAiB,EAEjB,KAAA+lD,cAAqB,EAErB,KAAAC,aAAoB,EAEpB,KAAAC,aAAoB,EAEpB,KAAAp2C,WAAkB,EAElB,KAAAq2C,eAAsB,EAEtB,KAAAjmD,WAAkB,EAElB,KAAAgE,cAA2C,KAE3C,KAAAkiD,SAAQ,EAER,KAAAC,UAAiB,EAGjB,KAAAlmD,kBAAyB,EAEzB,KAAAC,gBAAuB,EA0BzB,OAvBE,sBAAI,uBAAQ,C,IAAZ,WACE,OAAOprB,KAAKk9B,QAAU,EAAAzzB,OAAOshB,Q,gCAI/B,sBAAI,wBAAS,C,IAAb,WACE,OAAO/qB,KAAKk9B,QAAU,EAAAzzB,OAAOshB,OAAS,EAAAX,KAAK6oC,QAAU,EAAA7oC,KAAK8oC,S,gCAI5D,sBAAI,wBAAS,C,IAAb,WACE,OAAOlzD,KAAKk9B,QAAU,EAAAzzB,OAAOshB,OAAS,EAAAX,KAAK2oC,QAAU,EAAA3oC,KAAK4oC,S,gCAI5D,sBAAI,6BAAc,C,IAAlB,WACE,OAAOhzD,KAAKk9B,QAAU,EAAAzzB,OAAOshB,OAAS,EAAAoU,WAAWx4B,IAAM,EAAAw4B,WAAWz4B,K,gCAIpE,YAAAikB,WAAA,SAAW2mD,GACT,OAAoC,IAA5BtxE,KAAKoxE,SAAWE,IAE5B,EAtDA,GAAa,EAAAC,UAyDb,SAAkBC,GAChB,mBAGA,qCAEA,qCAEA,6BAGA,6BAEA,kCAEA,sCAfF,CAAkB,EAAAA,cAAA,EAAAA,YAAW,KAmB7B,SAAkBC,GAChB,mBAEA,mBAEA,mBAEA,mCAEA,mCATF,CAAkB,EAAAA,kBAAA,EAAAA,gBAAe,KAajC,IAmqRIC,EACAC,EApqRJ,cA2CE,WAAY17C,EAAkB/L,QAAA,IAAAA,MAAA,MAA9B,MACE,YAAM+L,EAAQrpB,cAAY,KA/B5B,EAAAglE,uBAAqC,GAErC,EAAAC,YAA2B,KAE3B,EAAAC,YAAoB,EAAA1nD,KAAKG,KAMzB,EAAAwnD,eAAkC,GAElC,EAAAC,eAA4C,IAAIrqE,IAEhD,EAAAsqE,cAA0B,CAAE,QAE5B,EAAAC,QAAqB,EAErB,EAAAC,QAAuB,EAEvB,EAAAC,gBAAe,EAEf,EAAAC,oBAA0C,IAAI3qE,IA6wFtC,EAAA4qE,eAAkC,KAClC,EAAAC,eAAkC,KAClC,EAAAC,eAAkC,KAClC,EAAAC,eAAkC,KAtwFxC,EAAKx8C,QAAUA,EACV/L,IAASA,EAAU,IAAIqnD,GAC5B,EAAKrnD,QAAUA,EACf,EAAKqR,aAAe1Q,QAGlB2gD,IAAIthD,EAAQgB,WAAY,IAE1B,EAAKvrB,OAAS,EAAAm2C,OAAOn0C,SACrB,IAAI4iD,EAAqC,E,OACrC,EAAKr6B,QAAQS,WAAW,KAAyB45B,GAAgB,EAAAxkB,aAAa2yC,SAC9E,EAAKxoD,QAAQS,WAAW,KAA0B45B,GAAgB,EAAAxkB,aAAa4yC,gBAC/E,EAAKzoD,QAAQS,WAAW,KAA0B45B,GAAgB,EAAAxkB,aAAa6yC,oBAC/E,EAAK1oD,QAAQS,WAAW,KAAsB45B,GAAgB,EAAAxkB,aAAa8yC,YAC3E,EAAK3oD,QAAQS,WAAW,MAAe45B,GAAgB,EAAAxkB,aAAa+yC,SACpE,EAAK5oD,QAAQS,WAAW,MAAkB45B,GAAgB,EAAAxkB,aAAagzC,SACvE,EAAK7oD,QAAQS,WAAW,MAA6B45B,GAAgB,EAAAxkB,aAAaizC,mBAClF,EAAK9oD,QAAQS,WAAW,OAAqB45B,GAAgB,EAAAxkB,aAAakzC,UAC1E,EAAK/oD,QAAQS,WAAW,OAA0B45B,GAAgB,EAAAxkB,aAAamzC,gBACnF,EAAKvzE,OAAO2kD,YAAYC,G,EA0iR5B,OA1mR8B,OAK5B,sBAAI,uBAAQ,C,IAAZ,WAA2B,OAAOvkD,KAAKi2B,QAAQnN,U,gCAiCxC,EAAAqqD,QAAP,SAAel9C,EAAkB/L,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIkpD,EAASn9C,EAAS/L,GAASipD,WA6BxC,YAAAA,QAAA,W,YACMjpD,EAAUlqB,KAAKkqB,QACfvqB,EAASK,KAAKL,OACds2B,EAAUj2B,KAAKi2B,QAGnBA,EAAQhM,WAAWC,GAGnB,IAAImpD,EAAwBp9C,EAAQtM,mBAAmB,QAAS,IAAI,EAAAoN,UAAUd,EAAS,GAAI,EAAA7L,KAAKG,OAChG8oD,EAAsBxqD,aAAe,QACrC,IAAIyqD,EAAoB,IAAI9rE,MAC5BxH,KAAKuzE,YAAcF,EAAsB74C,KACzCx6B,KAAKwzE,YAAcF,EAGfppD,EAAQY,UACVnrB,EAAOw/C,UAAU,EAAAwmB,eAAe8N,UAAW,EAAAt0C,WAAWx4B,KAAK,EAAMhH,EAAO0D,IAAI,IAC5E1D,EAAOw/C,UAAU,EAAAwmB,eAAe+N,UAAW,EAAAv0C,WAAWx4B,KAAK,EAAMhH,EAAO0D,IAAI,MAE5E1D,EAAOw/C,UAAU,EAAAwmB,eAAe8N,UAAW,EAAAt0C,WAAWz4B,KAAK,EAAM/G,EAAOyD,IAAI,IAC5EzD,EAAOw/C,UAAU,EAAAwmB,eAAe+N,UAAW,EAAAv0C,WAAWz4B,KAAK,EAAM/G,EAAOyD,IAAI,KAI9E,IAAIuwE,EAAQ19C,EAAQjO,Y,IACpB,IAAiB,QAAA2rD,EAAM5/D,UAAQ,8BAAE,EAAxB2X,EAAI,SACFhgB,OAAOuU,YAAc,EAAAP,WAAW6Q,aACvCvwB,KAAK4zE,YAAYloD,GACjB1rB,KAAK6zE,eAAenoD,K,iGAKxB,IAAIooD,GAAgBR,EAAkBpnE,OAClCilE,EAAgBjnD,EAAQinD,cAC5B,IAAK2C,GAAgB3C,EAAe,CAClC,IAAIv3D,EAAYy5D,EAAsBz5D,WACjCk6D,GAAgB3C,IACnBxxE,EAAOw/C,UAAU,EAAAwmB,eAAeoO,QAAS,EAAA50C,WAAWz4B,KAAK,EAAM/G,EAAOyD,IAAI,IAC1EkwE,EAAkBU,QAChBr0E,EAAO07C,GACL17C,EAAOi5C,WAAW,EAAA+sB,eAAeoO,QAAS,EAAA50C,WAAWz4B,KACrD/G,EAAO87C,SACP97C,EAAO+6C,WAAW,EAAAirB,eAAeoO,QAASp0E,EAAOyD,IAAI,OAI3D,IAAI6wE,EAAUt0E,EAAOggD,YACnB0zB,EAAsBxqD,aACtB7oB,KAAKk0E,mBACHt6D,EAAUwgB,eACVxgB,EAAUzK,WACVyK,EAAUugB,UAEZ,EAAAg6C,mBAAmBd,EAAsBr6C,kBACzCr5B,EAAOi7C,MAAM,KAAM04B,IAErBD,EAAsBx4C,SAASl7B,EAAQs0E,GAClC9C,EACAxxE,EAAO2gD,kBAAkB+yB,EAAsBxqD,aAAc,WAD9ClpB,EAAO0jD,SAAS4wB,GAKX,EAAvBj0E,KAAKoyE,iBAAgD,EAAAgC,oBAAoBp0E,MAClD,EAAvBA,KAAKoyE,iBAAgD,EAAAiC,oBAAoBr0E,MAC7EL,EAAO2/C,aAAa,EAAAqmB,eAAe+N,WACR,EAAvB1zE,KAAKoyE,iBAAwC,EAAAkC,YAAYt0E,MAG7D,IAAIu7B,EAAev7B,KAAKu7B,aACxBA,EAAeg5C,UAAUh5C,EAAcrR,EAAQI,UAAUqoC,UACzD3yD,KAAKu7B,aAAeA,EACpB57B,EAAO2/C,aAAa,EAAAqmB,eAAe8N,WACR,EAAvBzzE,KAAKoyE,kBACHloD,EAAQY,SACVnrB,EAAOw/C,UACL,EAAAwmB,eAAe8N,UACf,EAAAt0C,WAAWx4B,KACX,EACAhH,EAAO0D,IAAIs/C,QAAQpnB,GAAeqnB,SAASrnB,KAG7C57B,EAAOw/C,UACL,EAAAwmB,eAAe8N,UACf,EAAAt0C,WAAWz4B,KACX,EACA/G,EAAOyD,IAAIu/C,QAAQpnB,MAMzB,IAAIi5C,EAAiBtqD,EAAQS,WAAW,KAAoBT,EAAQ+mD,aAAe,EACnFtxE,EAAOwiD,UACLniD,KAAKkqB,QAAQgB,YAAiClrB,KAAK+xE,eAAe7lE,OAC9Dy2C,QAAQ8xB,UAAUF,UAAUh5C,EAAc,OAAU1Q,QAAQ,GAAI,KAChE,EACJ2pD,EAAiBtqD,EAAQ+mD,aAAe,EAAAn7B,OAAO2T,iBAC/CzpD,KAAK+xE,eACL7nD,EAAQgT,OACR,SACAs3C,GAIEtqD,EAAQ8mD,cAAcrxE,EAAO+hD,gBAAgB,IAAK,MAAO,SAAU8yB,GAGvE,IAAIvC,EAAgBjyE,KAAKiyE,cACzBtyE,EAAOujD,iBAAiB+uB,EAAc/lE,OAAQ,WAAY+lE,GAC1DtyE,EAAOggD,YAAY,OAAQ3/C,KAAKk0E,mBAAmB,KAAM,EAAA9pD,KAAKG,MAAO,KAAM5qB,EAAOi7C,MAAM,KAAM,KAG1F1wB,EAAQgnD,aAAavxE,EAAO6hD,eAAe,IAAK,MAAO,S,IAG3D,IAAiB,QAAAxhD,KAAKi2B,QAAQjO,YAAYjU,UAAQ,8BAAE,CAA/C,IAAI2X,KAAI,SACFhgB,OAAOuU,YAAc,EAAAP,WAAW6Q,YAAYvwB,KAAK00E,oBAAoBhpD,I,iGAEhF,OAAO/rB,GAMD,YAAA+0E,oBAAR,SAA4BhpD,G,QACtBrV,EAAUqV,EAAKhsB,QACnB,GAAI2W,E,IAAS,IAA2B,QAAAA,GAAO,+BAAzB,mBAACzV,EAAA,KAAMmwB,EAAA,KAAoB/wB,KAAK20E,mBAAmB/zE,EAAMmwB,I,iGAC/E,IAAIzE,EAAcZ,EAAKY,YACvB,GAAIA,EACF,IAAK,IAAIjsB,EAAI,EAAGyiB,EAAIwJ,EAAYpgB,OAAQ7L,EAAIyiB,IAAKziB,EAAGL,KAAK00E,oBAAoBpoD,EAAYjsB,KAKrF,YAAAs0E,mBAAR,SAA2B/zE,EAAc+R,EAAkBiiE,G,oBACzD,YADyD,IAAAA,MAAA,IACjDjiE,EAAQnF,MAGd,KAAK,EAAAoa,YAAY+I,mBAEf,GADIyH,EAAgCzlB,EAASylB,U,IAE3C,IAAqB,QAAAA,EAAUrkB,UAAQ,8BAAE,CAApC,IAAI4kB,EAAQ,QACXg4C,EAAe/vE,EACnB,GAAI+3B,EAASjc,GAAG,EAAAra,YAAYqoB,SAE1BimD,IADIkE,EAAWl8C,EAAS9P,cACCrc,UAAUqoE,EAAS10D,YAAY,MAE1DngB,KAAK20E,mBAAmBhE,EAAch4C,EAAUi8C,I,iGAGpD,MAEF,KAAK,EAAAhtD,YAAYiG,gBACf,IAAIuK,EACJ,GADIA,EAA6BzlB,EAASylB,U,IAExC,IAAqB,QAAAA,EAAUrkB,UAAQ,8BAAE,CAApC,IAGG8gE,EAHCl8C,EAAQ,QACXg4C,EAAe/vE,EACnB,GAAI+3B,EAASjc,GAAG,EAAAra,YAAYqoB,SAE1BimD,IADIkE,EAAWl8C,EAAS9P,cACCrc,UAAUqoE,EAAS10D,YAAY,MAE1DngB,KAAK20E,mBAAmBhE,EAAch4C,EAAUi8C,I,iGAGpD,MAEF,KAAK,EAAAhtD,YAAYoJ,mBACf,IAAInwB,EAA6B8R,EAASse,gBACtC6jD,EAA6BniE,EAASue,gBACtCrwB,GAAQb,KAAK20E,mBAAmB,EAAAnyE,cAAgB5B,EAAMC,EAAQ+zE,GAC9DE,GAAQ90E,KAAK20E,mBAAmB,EAAAlyE,cAAgB7B,EAAMk0E,EAAQF,GAClE,MAIF,KAAK,EAAAhtD,YAAY1K,OACDvK,EAAQ+J,GAAG,EAAAra,YAAYuvB,QAAUjf,EAAQ+J,GAAG,EAAAra,YAAYmxB,OAAS,EAAAnxB,YAAYqxB,WAC1E1zB,KAAKkqB,QAAQS,WAAW,GAMvC3qB,KAAKL,OAAOihD,gBAAgBjuC,EAAQkW,aAAc+rD,EAASh0E,GAL3DZ,KAAKkN,MACH,EAAA1C,eAAeuqE,+BACNpiE,EAASoc,eAAelkB,OAKrC,MAEF,KAAK,EAAA+c,YAAYkQ,UACEnlB,EAASolB,aAAgB/3B,KAAKkqB,QAAQS,WAAW,GAMhE3qB,KAAKL,OAAOihD,gBAAgBjuC,EAAQkW,aAAc+rD,EAASh0E,GAL3DZ,KAAKkN,MACH,EAAA1C,eAAeuqE,+BACHpiE,EAASoc,eAAelkB,OAKxC,MAEF,KAAK,EAAA+c,YAAY9I,SACf,IACIlF,GADA+e,EAAqBhmB,GACAiH,UACrBA,EAAU86C,mBAAqB96C,EAAUwgB,eAAeluB,SAE1DysB,EAAW34B,KAAKg1E,iBAAiBr8C,GACjC34B,KAAKi1E,iBAEHt8C,EAASjc,GAAG,EAAAra,YAAY6yE,WAAWl1E,KAAKL,OAAO2gD,kBAAkB3nB,EAAS9P,aAAc+rD,EAASh0E,GACrG,MAEF,KAAK,EAAAgnB,YAAYuJ,UACXtwB,EAAoB8R,EAAS+oB,iBACrB17B,KAAK20E,mBAAmB,EAAAnyE,cAAgB5B,EAAMC,EAAQ+zE,IAC9DE,EAAoBniE,EAASgpB,iBACrB37B,KAAK20E,mBAAmB,EAAAlyE,cAAgB7B,EAAMk0E,EAAQF,GAClE,MAEF,KAAK,EAAAhtD,YAAYwJ,MACfpxB,KAAKm1E,wBAAwBP,EAAS,EAAApyE,cAAgB5B,EAAa+R,GAC9DA,EAAQ+J,GAAG,EAAAra,YAAYqxB,WAC1B1zB,KAAKo1E,wBAAwBR,EAAS,EAAAnyE,cAAgB7B,EAAa+R,GAErE,MAEF,KAAK,EAAAiV,YAAYlJ,MAEf,IAAa/L,EAAS5D,KAAKsmE,YAAa,CACtC,IAAI11E,EAASK,KAAKL,OACdkpB,EAAuBlW,EAASkW,aACpClpB,EAAOw/C,UAAUt2B,EAAc,EAAAsW,WAAWz4B,KAAK,EAAO/G,EAAOyD,IAAYuP,EAAS2W,KAClF3pB,EAAOihD,gBAAgB/3B,EAAc+rD,EAASh0E,GAEhD,MAIF,KAAK,EAAAgnB,YAAY2P,KACjB,KAAK,EAAA3P,YAAY0P,UACjB,KAAK,EAAA1P,YAAYuO,KACjB,KAAK,EAAAvO,YAAYwP,eAAgB,MAEjC,QAASjtB,QAAO,GAIlB,IAAIkM,EAAU1D,EAAQ0D,QACtB,GAAIA,EAAS,CACX,IAAIi/D,EAAYV,EAASh0E,GAAQ+R,EAAQnF,MAAQ,EAAAoa,YAAYlJ,MACzD,EAAAhc,mBACA,EAAAC,kBAEJ,GACEgQ,EAAQnF,MAAQ,EAAAoa,YAAY0P,WAC5B3kB,EAAQnF,MAAQ,EAAAoa,YAAYuO,K,IAE5B,IAAmB,QAAA9f,EAAQtC,UAAQ,8BAAE,EAA5Bgd,EAAM,SACDrU,GAAG,EAAAra,YAAY+e,SAC3BphB,KAAK20E,mBAAmB5jD,EAAOnwB,KAAMmwB,EAAQukD,I,0GAG/C,IAAmB,QAAAj/D,EAAQtC,UAAQ,8BAAE,CAAhC,IAAIgd,KAAM,SACFrU,GAAG,EAAAra,YAAY+0D,UAC1Bp3D,KAAK20E,mBAAmB5jD,EAAOnwB,KAAMmwB,EAAQukD,I,oGAO7C,YAAAH,wBAAR,SAAgCv0E,EAAc48B,GAC5C,IAAIzuB,EAAOyuB,EAAMzuB,KACbpP,EAASK,KAAKL,OACd2qB,EAAYtqB,KAAKkqB,QAAQI,UACzBirD,EAAW51E,EAAOm5C,KAAK/pC,EAAK4jD,SAAU5jD,EAAK2N,GAAG,GAChD/c,EAAO64C,UAAU,EAAGluB,EAAU4pC,gBAC9BnlD,EAAKmlD,eAAgB12B,EAAMjC,cAGzBxsB,EAAKymE,YAAWD,EAAWv1E,KAAKy1E,WAAWF,IAC/C51E,EAAOggD,YACL/+C,EACAZ,KAAKk0E,mBAAmB,KAAMnlE,EAAMub,GACpC,KACAirD,GAEF51E,EAAO2gD,kBAAkB1/C,EAAMA,IAIzB,YAAAw0E,wBAAR,SAAgCx0E,EAAc48B,GAC5C,IAAIzuB,EAAOyuB,EAAMzuB,KACbpP,EAASK,KAAKL,OACd+1E,EAAa3mE,EAAKmlD,eAClB5pC,EAAYtqB,KAAKkqB,QAAQI,UACzBqrD,EAAiBrrD,EAAU4pC,eAC3B0hB,EAAYj2E,EAAO64C,UAAU,EAAGk9B,GAChC3mE,EAAKymE,YACPI,EAAY51E,KAAK61E,kBACfl2E,EAAOm5C,KAAK/pC,EAAK4jD,UAAU,EACzBhzD,EAAO64C,UAAU,EAAGm9B,GACpBD,EAAYl4C,EAAMjC,cAEpBq6C,IAGJj2E,EAAOggD,YACL/+C,EACAZ,KAAKk0E,mBAAmB,CAAEnlE,GAAQ,EAAAqb,KAAKG,KAAMD,GAC7C,KACA3qB,EAAOk4C,MACL9oC,EAAK4jD,SACLhzD,EAAO64C,UAAU,EAAGm9B,GACpBC,EACAF,EACAl4C,EAAMjC,eAGV57B,EAAO2gD,kBAAkB1/C,EAAMA,IAMjC,YAAAk1E,eAAA,SAAenjE,EAAkBojE,GAC/B,YAD+B,IAAAA,OAAA,GACvBpjE,EAAQnF,MACd,KAAK,EAAAoa,YAAY1K,OACfld,KAAKg2E,cAAsBrjE,GAC3B,MAEF,KAAK,EAAAiV,YAAY2P,KACfv3B,KAAKi2E,YAAkBtjE,GACvB,MAEF,KAAK,EAAAiV,YAAY+I,mBACVhe,EAAQ+J,GAAG,EAAAra,YAAYqoB,UAC1B1qB,KAAKk2E,kCAAqDvjE,EAAS,IAErE,MAEF,KAAK,EAAAiV,YAAYiG,gBACVlb,EAAQ+J,GAAG,EAAAra,YAAYqoB,UAC1B1qB,KAAKm2E,+BAA+CxjE,EAAS,IAE/D,MAEF,KAAK,EAAAiV,YAAYoJ,mBACf,IAAIC,EAAsCte,EAASse,gBAC/CA,GACFjxB,KAAKk2E,kCAAkCjlD,EAAiB,IAE1D,IAAIC,EAAsCve,EAASue,gBAC/CA,GACFlxB,KAAKk2E,kCAAkChlD,EAAiB,IAE1D,MAEF,KAAK,EAAAtJ,YAAY0P,UACjB,KAAK,EAAA1P,YAAYwP,eACjB,KAAK,EAAAxP,YAAYkQ,UAAW,MAC5B,QAAS3tB,QAAO,EAAO,EAAAyd,YAAYjV,EAAQnF,OAEzCuoE,GAAgB/1E,KAAK+1E,eAAepjE,IAI1C,YAAAojE,eAAA,SAAepjE,G,QACT0D,EAAU1D,EAAQ0D,QACtB,GAAIA,E,IAAS,IAAoB,QAAAA,EAAQtC,UAAQ,+BAA/B,IAAI,EAAO,QAAsB/T,KAAK81E,eAAe,I,mGAIzE,YAAAjC,eAAA,SAAenoD,G,YACThsB,EAAUgsB,EAAKhsB,QACnB,GAAIA,E,IAAS,IAAoB,QAAAA,EAAQqU,UAAQ,+BAA/B,IAAIpB,EAAO,QAAsB3S,KAAK81E,eAAenjE,I,iGACvE,IAAI2Z,EAAcZ,EAAKY,YACvB,GAAIA,E,IACF,IAAuB,QAAAA,GAAW,8BAAE,CAA/B,IAAIC,EAAU,QACjBvsB,KAAK4zE,YAAYrnD,GACjBvsB,KAAK6zE,eAAetnD,I,mGAQ1B,YAAA6pD,kBAAA,SAAkBC,EAAwCvP,GACxD,IAAIp7C,EAEA4qD,EADAtuD,EAAchoB,KAAKi2B,QAAQjO,YAE/B,GAAIA,EAAYgC,IAAIqsD,GAClB3qD,EAAO1D,EAAY9mB,IAAIm1E,OAClB,KAAIruD,EAAYgC,IAAIssD,EAAgBD,EAAiC,EAAAtzE,cAO1E,YAJA/C,KAAKkN,MACH,EAAA1C,eAAemiB,iBACfm6C,EAAWj8D,MAAOwrE,GAJpB3qD,EAAO1D,EAAY9mB,IAAIo1E,GAQzBt2E,KAAK4zE,YAAYloD,IAInB,YAAAkoD,YAAA,SAAYloD,GACV,IAAIA,EAAKhP,GAAG,EAAAra,YAAY6yE,UAAxB,CACAxpD,EAAK7O,IAAI,EAAAxa,YAAY6yE,UAGrB,IAAIp+C,EAAgBpL,EAAKoL,cACrBy/C,EAAev2E,KAAKwzE,YACpBF,EAAoB,IAAI9rE,MAC5BxH,KAAKwzE,YAAcF,EAGnB,IAAIkD,EAAex2E,KAAKuzE,YACpB/4C,EAAO1D,EAAc0D,KACzBx6B,KAAKuzE,YAAc/4C,EACnB,IAAK,IAAI3kB,EAAa6V,EAAKhgB,OAAOmK,WAAYxV,EAAI,EAAGyiB,EAAIjN,EAAW3J,OAAQ7L,EAAIyiB,IAAKziB,EACnFL,KAAKy2E,yBAAyB5gE,EAAWxV,GAAIizE,GAO/C,GALAtzE,KAAK02E,mBAAmBl8C,EAAM84C,GAC9BtzE,KAAKuzE,YAAciD,EACnBx2E,KAAKwzE,YAAc+C,EAGfjD,EAAkBpnE,OAAQ,CAC5B,IAAIvM,EAASK,KAAKL,OACdi7B,EAAS9D,EAAciC,cACvB49C,EAAY/7C,EAAO1uB,OACnB0zC,EAAW,IAAIp4C,MAAkBmvE,GACrC,IAASt2E,EAAI,EAAGA,EAAIs2E,IAAat2E,EAAGu/C,EAASv/C,GAAKu6B,EAAOv6B,GAAG0O,KAAKmlD,eACjEv0D,EAAOggD,YACL7oB,EAAcjO,aACd7oB,KAAKk0E,mBAAmBp9C,EAAcld,UAAUwgB,eAAgBtD,EAAcld,UAAUzK,YACxFywC,EACA0zB,EAAkBpnE,OAAS,EACvBvM,EAAOi7C,MAAM,KAAM04B,GACnBA,EAAkB,IAExBiD,EAAa9pE,KACX9M,EAAOa,KAAKs2B,EAAcjO,aAAc,KAAM,EAAAsW,WAAWga,UAO/D,YAAA68B,cAAA,SAActkD,GACZ,GAAIA,EAAOhV,GAAG,EAAAra,YAAY6yE,UAAW,OAAO,EAC5CxjD,EAAO7U,IAAI,EAAAxa,YAAY6yE,UAEvB,IAAIv1E,EAASK,KAAKL,OACdi3E,EAA0B,EAC1BC,GAA+B,EAC/B9W,EAAWruC,EAAOquC,SAClB+W,EAAkBplD,EAAOolD,gBAE7B,IAAKplD,EAAOhV,GAAG,EAAAra,YAAYu0B,UAGzB,GAAImpC,EAAU,CACZ,IAAIiE,EAAehkE,KAAK8oB,SAAS81C,YAAYmB,EAAUruC,EAAO7R,QAC9D,IAAKmkD,EAAc,OAAO,EAC1B,GAAIA,GAAgB,EAAA55C,KAAKG,KAKvB,OAJAvqB,KAAKkN,MACH,EAAA1C,eAAe81D,cACfP,EAASl1D,QAEJ,EAET6mB,EAAOL,QAAQ2yC,OAGV,KAAI8S,EAyBT,OAJA92E,KAAKkN,MACH,EAAA1C,eAAe81D,cACf5uC,EAAO3C,eAAelkB,MAAM68D,QAEvB,EAxBP,IAAI8O,EAAex2E,KAAKuzE,YASxB,GARI7hD,EAAO7C,aAAa,EAAAhH,eAAezK,QACrCpd,KAAKuzE,YAAc7hD,EAAOhG,KAAKoL,cAAc0D,MAE/Co8C,EAAW52E,KAAK+2E,kBAAkBD,EAAiB,EAAA1sD,KAAK+oC,KACtD,IAEEnzD,KAAKqyE,oBAAoBroD,IAAI4sD,KAAWC,GAAyB,GACrE72E,KAAKuzE,YAAciD,EACfx2E,KAAK8xE,aAAe,EAAA1nD,KAAKG,KAK3B,OAJAvqB,KAAKkN,MACH,EAAA1C,eAAe29D,mCACf2O,EAAgBjsE,MAAO7K,KAAK8xE,YAAYrmE,WAAY,WAE/C,EAETimB,EAAOL,QAAQrxB,KAAK8xE,aAaxB,GAAIpgD,EAAOhV,GAAG,EAAAra,YAAYozB,UAAY/D,EAAO7C,aAAa,EAAAhH,eAAe7K,SAGvE,OAFI0U,EAAO7I,cAAgB,EAAA88C,eAAe8N,UAAWzzE,KAAKoyE,iBAAmB,EACpE1gD,EAAO7I,cAAgB,EAAA88C,eAAe+N,YAAW1zE,KAAKoyE,iBAAmB,IAC3E,EAGT,IAAIrjE,EAAO2iB,EAAO3iB,KACd2mE,EAAa3mE,EAAKmlD,eAClB8iB,EAAqBtlD,EAAOhV,GAAG,EAAAra,YAAYuvB,QAAUF,EAAOhV,GAAG,EAAAra,YAAYmxB,OAAS,EAAAnxB,YAAYqxB,UAChGujD,EAAmBvlD,EAAO7C,aAAa,EAAAhH,eAAe1K,QAG1D,GAAIuU,EAAOhV,GAAG,EAAAra,YAAYozB,SAGxB,OAAIuhD,GAAsBh3E,KAAKkqB,QAAQS,WAAW,IAChD+G,EAAO7U,IAAI,EAAAxa,YAAY60E,eACvBC,EAAiBzlD,EAAQA,EAAOvf,aAChCxS,EAAOkiD,gBACLnwB,EAAO7I,aACP6oD,EACAC,EACA+D,GACCsB,GAEHtlD,EAAO7U,IAAI,EAAAxa,YAAY6yE,WAChB,IAIPl1E,KAAKkN,MACH,EAAA1C,eAAewoB,wBACftB,EAAOvf,YAAYtH,QAGhB,GAKT,IAAIusE,GAAoB,EAGxB,GAAIN,EAAiB,CACnB,IAAKF,EAAU,CACTJ,EAAex2E,KAAKuzE,YACpB7hD,EAAO7C,aAAa,EAAAhH,eAAezK,QACrCpd,KAAKuzE,YAAc7hD,EAAOhG,KAAKoL,cAAc0D,MAE/Co8C,EAAW52E,KAAK+2E,kBAAkBD,EAAiB/nE,EACjD,IAEE/O,KAAKqyE,oBAAoBroD,IAAI4sD,KAAWC,GAAyB,GACrE72E,KAAKuzE,YAAciD,EAarB,GAVI,EAAA9sB,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,QACxCwvB,GACFJ,EAAWj3E,EAAOslD,qBAAqB2xB,GACnC,EAAAltB,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,QAAO4vB,GAAoB,IAEzEA,GAAoB,GAKpBH,EACF,GAAIG,EACFp3E,KAAKgN,QACH,EAAAxC,eAAe6sE,gCACfP,EAAgBjsE,WAEb,CAGL,OAFAV,OAAO,EAAAu/C,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,OAClC,EAAAwkB,kBAAkB4K,IAE/B,KAAK,EAAAz3C,WAAWz4B,IACdgrB,EAAO+F,kBAAoB,EAC3B/F,EAAOgG,qBAAuB7M,QAAQ,EAAAohD,iBAAiB2K,GAAW,GAClE,MAEF,KAAK,EAAAz3C,WAAWx4B,IACd+qB,EAAO+F,kBAAoB,EAC3B/F,EAAOgG,qBAAuB7M,QAC5B,EAAAqhD,oBAAoB0K,GACpB,EAAAzK,qBAAqByK,IAEvB,MAEF,KAAK,EAAAz3C,WAAWh4B,IACduqB,EAAO+F,kBAAoB,EAC3B/F,EAAOkG,mBAAqB,EAAAm4C,iBAAiB6G,GAC7C,MAEF,KAAK,EAAAz3C,WAAW/3B,IACdsqB,EAAO+F,kBAAoB,EAC3B/F,EAAOkG,mBAAqB,EAAAo4C,iBAAiB4G,GAC7C,MAEF,QAEE,OADAzsE,QAAO,IACA,EAGXunB,EAAO7U,IAAI,EAAAxa,YAAYs1B,eAM3Bi/C,EAAW7nE,EAAKolD,aAAax0D,GAG/B,IAAIkpB,EAAe6I,EAAO7I,aAiB1B,OAfIuuD,GACEH,GACFj3E,KAAKkN,MACH,EAAA1C,eAAemoB,8BACfxoB,OAAO,EAAAmtE,cAAc,EAAAhnE,cAAc6M,OAAQuU,EAAO6lD,iBAAiB1sE,MAAO,UAG9ElL,EAAOw/C,UAAUt2B,EAAc6sD,GAAY,EAAM3mE,EAAKolD,aAAax0D,IAC/DoP,EAAKymE,YAAcqB,IAAwBD,EAAW52E,KAAKy1E,WAAWmB,IAC1E52E,KAAKwzE,YAAY/mE,KACf9M,EAAO+6C,WAAW7xB,EAAc+tD,KAExBK,GACVt3E,EAAOw/C,UAAUt2B,EAAc6sD,GAAasB,EAAoBJ,IAE3D,GAKT,YAAAX,YAAA,SAAYtjE,G,QACV,GAAIA,EAAQ+J,GAAG,EAAAra,YAAY6yE,UAAW,OAAO,EAC7CviE,EAAQkK,IAAI,EAAAxa,YAAY6yE,UAExB,IAAIv1E,EAASK,KAAKL,OAClBK,KAAK6xE,YAAcl/D,EACnB,IAAI6kE,EAAkC,KAClCC,GAAqB,EACrBC,EAAW/kE,EAAQ+J,GAAG,EAAAra,YAAYuvB,QAAUjf,EAAQkc,aAAa,EAAAhH,eAAe1K,QAEpF,GAAIxK,EAAQ0D,Q,IACV,IAAmB,QAAA1D,EAAQ0D,QAAQtC,UAAQ,8BAAE,CAAxC,IAAIgd,EAAM,QACb,GAAIA,EAAOvjB,MAAQ,EAAAoa,YAAYkQ,UAA/B,CACA,IAAI6/C,GAAc,EACd5qB,EAAiBh8B,EACjB6mD,EAAY7qB,EAAI6qB,UACpB7qB,EAAIlwC,IAAI,EAAAxa,YAAY6yE,UACpB,IAAIsB,EAAex2E,KAAKuzE,YACpB5gE,EAAQkc,aAAa,EAAAhH,eAAezK,QACtCpd,KAAKuzE,YAAc5gE,EAAQ+Y,KAAKoL,cAAc0D,MAEhD,IAAIo8C,OAAQ,EACRgB,GACFhB,EAAW52E,KAAK+2E,kBAAkBa,EAAW,EAAAxtD,KAAKhnB,IAAG,GAGjD,EAAAsmD,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,QAC5CovB,EAAWj3E,EAAOslD,qBAAqB2xB,GACnC,EAAAltB,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,QACxC70C,EAAQ+J,GAAG,EAAAra,YAAYuvB,QACzB5xB,KAAKkN,MACH,EAAA1C,eAAeqtE,0EACfD,EAAU/sE,OAGd8sE,GAAc,KAGQ,MAAjBH,EACTZ,EAAWj3E,EAAOyD,IAAI,IAElBq0E,GACFz3E,KAAKkN,MACH,EAAA1C,eAAestE,kCACH/mD,EAAQhC,eAAelkB,MAAM68D,OAG7CkP,EAAWj3E,EAAOu4C,OAAO,EAAA9O,SAAS2uC,OAChCp4E,EAAOi5C,WAAW4+B,EAAc3uD,aAAc,EAAAsW,WAAWz4B,KACzD/G,EAAOyD,IAAI,IAEbwzE,EAAWj3E,EAAOslD,qBAAqB2xB,GACnC,EAAAltB,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,QACxC70C,EAAQ+J,GAAG,EAAAra,YAAYuvB,QACzB5xB,KAAKkN,MACH,EAAA1C,eAAeqtE,0EACf9mD,EAAO5e,YAAYtH,OAGvB8sE,GAAc,IAGlB33E,KAAKuzE,YAAciD,EACfmB,GACFh4E,EAAOw/C,UAAU4N,EAAIlkC,aAAc,EAAAsW,WAAWz4B,KAAK,EAAM/G,EAAOyD,IAAI,IACpEpD,KAAKwzE,YAAY/mE,KACfzM,KAAKg4E,qBAAqBjrB,EAAK6pB,GAAU,IAE3Ca,GAAqB,IAEjBC,GACF3qB,EAAIl7B,wBAAwBhH,QAAQ,EAAAohD,iBAAiB2K,IAAY,EAAAxsD,KAAKhnB,KAClE2pD,EAAIrwC,GAAG,EAAAra,YAAYwuB,gBACrBlxB,EAAOw/C,UAAU4N,EAAIlkC,aAAc,EAAAsW,WAAWz4B,KAAK,EAAOkwE,IAG5Dj3E,EAAOw/C,UAAU4N,EAAIlkC,aAAc,EAAAsW,WAAWz4B,KAAK,EAAOkwE,GAE5D7pB,EAAIh1B,aAAc,EAClB0/C,GAAqB,GAEvBD,EAA2BzqB,I,iGAI/B,OADA/sD,KAAK6xE,YAAc,MACZ,GAMT,YAAAqE,kCAAA,SACEj0E,EACA4M,EACAgqB,EACAioC,GAEA,QAHA,IAAAjoC,MAA4C,EAAA4mC,gBAC5C,IAAAqB,MAAA,MAEI7+D,EAAU4sB,aAAa,EAAAhH,eAAe7K,SAAU,OAAO,KAC3D,IAAI2b,EAAW34B,KAAK8oB,SAAS88C,iCAC3B3jE,EACA4M,EACA5M,EAAU4d,OACVgZ,EACAioC,GAAyB7+D,EAAUkQ,aAErC,OAAKwmB,GACA34B,KAAKi4E,gBAAgBt/C,GACnBA,EAFe,MAMxB,YAAAu7C,mBAAA,SACE95C,EACAjrB,EACAgrB,QAAA,IAAAA,MAAA,MAEA,IACIwc,EADA0e,EAAgBj7B,EAAiBA,EAAeluB,OAAS,EAEzD+rB,EAAQ,EAQZ,GAPIkC,IACFwc,EAAa,IAAInvC,MAAM,EAAI6tD,IAChB,GAAKl7B,EAAS+5B,eACzBj8B,EAAQ,GAER0e,EAAa,IAAInvC,MAAM6tD,GAErBj7B,EACF,IAAK,IAAI/5B,EAAI,EAAGA,EAAIg1D,IAAiBh1D,IAAK43B,EACxC0e,EAAW1e,GAASmC,EAAe/5B,GAAG6zD,eAG1C,IAAIgkB,EAAa/oE,EAAW+kD,eACxBv0D,EAASK,KAAKL,OACdygD,EAAUzgD,EAAOq3C,2BAA2BkhC,EAAYvhC,GAC5D,IAAKyJ,EAAS,CACZ,IAAIx/C,EAAO,EAAAm2B,UAAU2+B,oBAAoBt7B,EAAgBjrB,EAAYgrB,GACrEimB,EAAUzgD,EAAO82C,gBAAgB71C,EAAMs3E,EAAYvhC,GAErD,OAAOyJ,GAIT,YAAA+3B,oBAAA,SAEEx/C,EAEAy/C,QAAA,IAAAA,MAAA,MAEA,IAAIz4E,EAASK,KAAKL,OACd04E,EAAWluE,OAAOwuB,EAAS12B,UAAUo2E,UACrClpE,EAAawpB,EAAS/e,UAAUzK,WAChCqrB,EAAOx6B,KAAKuzE,YAGhB,GAAI8E,EAAS7qE,MAAQ,EAAAD,SAASoT,MAC5By3D,EAAQp4E,KAAKs4E,kBAAmCD,EAAUxiE,YAAY,EAAMuiE,OACvE,CAELjuE,OAAOkuE,EAAS7qE,MAAQ,EAAAD,SAAS+T,YAGjCnX,OAAOwuB,EAAS12B,UAAU6X,WAG1B3P,QAAQwuB,EAAS/b,MAAM,EAAAva,YAAYuc,YAAc,EAAAvc,YAAY+wB,IAAM,EAAA/wB,YAAYgxB,IAAM,EAAAhxB,YAAYk2E,OAEjG,IAAI1nE,EAAO7Q,KAAK+2E,kBAAwCsB,EAAU9mE,WAAYpC,EAAU,GAKxF,GAFKipE,EACAA,EAAM3rE,KAAKoE,GADJunE,EAAQ,CAAEvnE,IAEjB2pB,EAAK9d,GAAG,KAAuB,CAClC,IAAI87D,EAAcJ,EAAMlsE,OACxBlM,KAAKy4E,oBAAoBj+C,EAAM49C,GAC/Bp4E,KAAK02E,mBAAmBl8C,EAAM49C,GAC9B,IAAIhL,EAAc5yC,EAAK4yC,YAAYv8D,EAAM1B,GACrCupE,EAAUl+C,EAAKixC,UAAU56D,EAAM1B,GACnC,GAAIipE,EAAMlsE,OAASssE,EAAa,CAC9B,IAAIG,EAAOn+C,EAAKovC,oBAAoBz6D,GAC/Bi+D,GAAa5yC,EAAKivC,aAAakP,EAAK1gD,MAAO,EAAAmwC,WAAWiF,SACvDqL,GAASl+C,EAAKivC,aAAakP,EAAK1gD,MAAO,EAAAmwC,WAAWzD,SACtDyT,EAAMI,EAAc,GAAK74E,EAAO66C,UAAUm+B,EAAK1gD,MAAOpnB,GACtDunE,EAAM3rE,KAAK9M,EAAO64C,UAAUmgC,EAAK1gD,MAAO9oB,EAAW+kD,iBAEhDkZ,GAAa5yC,EAAK3d,IAAI,GACvB67D,GAASl+C,EAAK3d,IAAI,GACtB2d,EAAK3d,IAAI,MAKb,GAAI8b,EAASjc,GAAG,EAAAra,YAAYuc,aAAc,CACxC,IAAI+2D,EAAiB31E,KAAKkqB,QAAQyrD,eAClCxrE,OAAOwuB,EAASjc,GAAG,EAAAra,YAAYqzB,WAC/B,IAAIvM,EAAgBhf,OAAOwuB,EAAS9Y,QAEpC,GAF6C1V,OAAOgf,EAAc3b,MAAQ,EAAAoa,YAAYlJ,QAEjF8b,EAAK9d,GAAG,KAAuB,CAClC,IAAI2oD,EAAYl7D,OAAOqwB,EAAK8qC,YAAY,EAAAtiE,cAAcsC,QAGjDk1B,EAAK9d,GAAG,MAMX07D,EAAM3rE,KACJ9M,EAAO07C,GACL17C,EAAOo4C,MAAM49B,GAAkB,EAAAx2C,WAAWx4B,IAAM,EAAA28B,QAAQkpC,OAAS,EAAAlpC,QAAQipC,OACvE5sE,EAAO64C,UAAU6sB,EAAUptC,MAAO09C,IAEpCh2E,EAAO66C,UAAU6qB,EAAUptC,MACzBj4B,KAAKy1E,WACHz1E,KAAK44E,eAAsBzvD,OAKnCnpB,KAAK64E,wBAA+B1vD,EAAeivD,IAErDp4E,KAAKy4E,oBAAoBj+C,EAAM49C,GAC/Bp4E,KAAK02E,mBAAmBl8C,EAAM49C,GAC9BA,EAAM3rE,KAAK9M,EAAO64C,UAAU6sB,EAAUptC,MAAOj4B,KAAKkqB,QAAQyrD,iBAC1Dn7C,EAAK3d,IAAI,KAICsM,EAAe+S,OAAS1B,EAAK9d,GAAG,MAC1C1c,KAAKkN,MACH,EAAA1C,eAAesuE,2DACfngD,EAAS12B,UAAUkQ,YAAYtH,YAK1BsE,GAAc,EAAAib,KAAKG,MAASiQ,EAAK9d,GAAG,MAC7C1c,KAAKkN,MACH,EAAA1C,eAAeuuE,+DACfpgD,EAAS12B,UAAUykE,iBAAiBv3D,WAAWtE,OAInD,OAAOutE,GAIT,YAAAH,gBAAA,SAAgBt/C,GACd,GAAIA,EAASjc,GAAG,EAAAra,YAAY6yE,UAAW,OAAO,EAC9C/qE,SAASwuB,EAASjc,GAAG,EAAAra,YAAYozB,UAAYkD,EAAS9J,aAAa,EAAAhH,eAAe7K,WAElF,IAAIg8D,EAAeh5E,KAAK8xE,YACxBn5C,EAAS9b,IAAI,EAAAxa,YAAY6yE,UAEzB,IAKIjB,EALAt0E,EAASK,KAAKL,OACdia,EAAY+e,EAAS/e,UACrBy+D,EAAW1/C,EAAS12B,UAAUo2E,SAE9Bj4B,EAAUpgD,KAAKk0E,mBAAmBt6D,EAAUwgB,eAAgBxgB,EAAUzK,WAAYyK,EAAUugB,UAIhG,GAAIk+C,EAAU,CAWZ,GARI1/C,EAASjc,GAAG,EAAAra,YAAYozB,UAC1Bz1B,KAAKkN,MACH,EAAA1C,eAAeyuE,yDACftgD,EAAS5J,eAAelkB,OAKxB8tB,EAAS9J,aAAa,EAAAhH,eAAe5K,UAAW,CAClD,IAAIs6D,EAAiB5+C,EAAS4+C,eAC1Bx0D,EAAY5Y,OAAO,EAAAmtE,cAAc,EAAAhnE,cAAc2M,SAAUs6D,IAC7Dv3E,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfjQ,EAAUlY,OAKd,IAAI2rE,EAAex2E,KAAKuzE,YACpB/4C,EAAO7B,EAAS6B,KACpBx6B,KAAKuzE,YAAc/4C,EACnB,IAAI49C,EAAQ,IAAI5wE,MAGZywB,EAAQ,EACGre,EAAUugB,YAGrBlC,EAGJ,IADA,IAAImC,EAAiBxgB,EAAUwgB,eACtB/5B,EAAI,EAAGyiB,EAAIsX,EAAeluB,OAAQ7L,EAAIyiB,IAAKziB,IAAK43B,EAAO,CAC9D,IAAIlpB,EAAOqrB,EAAe/5B,GACtB0O,EAAKymE,YACP4C,EAAM3rE,KACJ9M,EAAOs7C,KACLj7C,KAAKy1E,WACH91E,EAAO64C,UAAUvgB,EAAOlpB,EAAKmlD,mBAInC15B,EAAKivC,aAAaxxC,EAAO,EAAAmwC,WAAWsB,WAIxC1pE,KAAKm4E,oBAAoBx/C,EAAUy/C,GAC9B59C,EAAK9d,GAAG,OACX1c,KAAKy4E,oBAAoBj+C,EAAM49C,GAC/Bp4E,KAAK02E,mBAAmBl8C,EAAM49C,IAEhCp4E,KAAKuzE,YAAciD,EAGnBvC,EAAUt0E,EAAOggD,YACfhnB,EAAS9P,aACTu3B,EACA,EAAA+zB,mBAAmBx7C,EAASK,kBAC5BkgD,EAAQv5E,EAAQy4E,EAAOz/C,EAAS/e,UAAUzK,WAAW+kD,sBAKlDv7B,EAASjc,GAAG,EAAAra,YAAYozB,UAC3Bz1B,KAAKkN,MACH,EAAA1C,eAAe2uE,gFACfxgD,EAAS5J,eAAelkB,OAI5B8tB,EAAS9b,IAAI,EAAAxa,YAAY60E,eACzBC,EAAiBx+C,EAAUA,EAASxmB,aAGpCxS,EAAOuhD,kBACLvoB,EAAS9P,aACT6oD,EACAC,EACAvxB,GAEF6zB,EAAUt0E,EAAOmgD,YAAYnnB,EAAS9P,cAKxC,OAFA8P,EAASkC,SAASl7B,EAAQs0E,GAC1Bj0E,KAAK8xE,YAAckH,GACZ,GAKT,YAAA7C,+BAAA,SACEl0E,EACA4M,EACAgqB,EACAioC,QADA,IAAAjoC,MAA4C,EAAA4mC,gBAC5C,IAAAqB,MAAA,MAEA,IAAInoC,EAAW34B,KAAK8oB,SAAS02C,8BAC3Bv9D,EACA4M,EACA5M,EAAU4d,OACVgZ,EACAioC,GAAyB7+D,EAAUkQ,aAEhCwmB,GACL34B,KAAKo5E,aAAazgD,IAGpB,YAAAygD,aAAA,SAAazgD,G,YACX,GAAIA,EAASjc,GAAG,EAAAra,YAAY6yE,UAAW,OAAO,EAC9Cv8C,EAAS9b,IAAI,EAAAxa,YAAY6yE,UACzB,IACImE,EADY1gD,EAAS12B,UACuBoU,QAChD,GAAIgjE,E,IACF,IAAoB,QAAAA,EAActlE,UAAQ,8BAAE,CAC1C,QADOpB,EAAO,SACEnF,MACd,KAAK,EAAAoa,YAAY1K,OACfld,KAAKg2E,cAAsBrjE,GAC3B,MAEF,KAAK,EAAAiV,YAAY+I,mBAEQhe,EAAS+J,GAAG,EAAAra,YAAYqoB,UAE7C1qB,KAAKk2E,kCACgBvjE,EACnB,GACA,EAAA8sD,UACoB9sD,EAASoc,gBAGjC,MAEF,KAAK,EAAAnH,YAAYoJ,oBACXnwB,EAA6B8R,EAASse,kBAExCjxB,KAAKk2E,kCACHr1E,EACA,GACA,EAAA4+D,UACA5+D,EAAOkuB,iBAGP+lD,EAA6BniE,EAASue,kBAExClxB,KAAKk2E,kCACHpB,EACA,GACA,EAAArV,UACAqV,EAAO/lD,gBAGX,MAEF,KAAK,EAAAnH,YAAYuJ,Y,iGAKvB,IAAI62C,EAAervC,EAAS0D,oBACxB2rC,GAAchoE,KAAKi4E,gBAAgBjQ,GACvC,IAAIl3C,EAAkB6H,EAAStiB,QAC/B,GAAIya,E,IACF,IAAoB,QAAAA,EAAgB/c,UAAQ,8BAAE,CAAzC,IAAIpB,EACP,QADOA,EAAO,SACEnF,MACd,KAAK,EAAAoa,YAAY+I,mBAEQhe,EAAS+J,GAAG,EAAAra,YAAYqoB,UAE7C1qB,KAAKk2E,kCACgBvjE,EACnB,GACA,EAAA8sD,QAAqB9mC,EAASE,yBACVlmB,EAASR,YAAYvR,MAG7C,MAEF,KAAK,EAAAgnB,YAAY0T,gBACf3oB,EAAQkK,IAAI,EAAAxa,YAAY6yE,UACxB,MAEF,KAAK,EAAAttD,YAAYuJ,SACf,IAAItwB,EAEAi0E,GAFAj0E,EAAoB8R,EAAS+oB,iBACrB17B,KAAKi4E,gBAAgBp3E,IAC7Bi0E,EAAoBniE,EAASgpB,iBACrB37B,KAAKi4E,gBAAgBnD,K,iGAMzC,OAAO,GAGT,YAAAwE,4BAAA,SACEnnE,EACAtD,EACAgqB,EACAioC,QADA,IAAAjoC,MAAA,WACA,IAAAioC,MAAA,MAGA9gE,KAAKkN,MACH,EAAA1C,eAAewoB,wBACf7gB,EAAYtH,QAOhB,YAAA0uE,iBAAA,SAAiBtwD,EAAoBuwD,QAAA,IAAAA,MAAA,GACnC,IAAIj+C,EAAeg5C,UAAUv0E,KAAKu7B,aAAci+C,GAC5C/jC,EAAU,EAAAC,cAAc/zC,OAAOsnB,EAAQsS,GAG3C,OAFAv7B,KAAK+xE,eAAetlE,KAAKgpC,GACzBz1C,KAAKu7B,aAAewhC,QAAQxhC,EAAc1Q,QAAQ5B,EAAO/c,OAAQ,IAC1DupC,GAIT,YAAAgkC,mBAAA,SAAmBC,GACjB,IAGIC,EAHA1jD,EAAUj2B,KAAKi2B,QACf2jD,EAAe3jD,EAAQ4jD,kBACvBpsD,EAAiBtjB,OAAO8rB,EAAQxI,gBAEhC60B,EAAWtiD,KAAKgyE,eACpB,GAAI1vB,EAASt4B,IAAI0vD,GACfC,EAAgBr3B,EAASphD,IAAIw4E,OACxB,CACL,IAAIxtE,EAASwtE,EAAYxtE,OACrB+c,EAAS,IAAI7gB,WAAWwxE,GAAgB1tE,GAAU,IACtD+pB,EAAQjN,mBAAmBC,EAAQ,EAAGwE,EAAgBvhB,GAAU,GAChE,IAAK,IAAI7L,EAAI,EAAGA,EAAI6L,IAAU7L,EAC5B,EAAAu9B,SAAS87C,EAAYptE,WAAWjM,GAAI4oB,EAAQ2wD,GAAgBv5E,GAAK,IAEnEs5E,EAAgB35E,KAAKu5E,iBAAiBtwD,GACtCq5B,EAASzlC,IAAI68D,EAAaC,GAE5B,IAAIzgD,EAAM6jC,QAAQ4c,EAAczwD,OAAQ2B,QAAQ+uD,IAEhD,OADA55E,KAAK8xE,YAAcrkD,EAAe1e,KAC9B/O,KAAKkqB,QAAQY,SACR9qB,KAAKL,OAAO0D,IAAIs/C,QAAQzpB,GAAM0pB,SAAS1pB,KAE9C/uB,OAAOs6D,WAAWvrC,IACXl5B,KAAKL,OAAOyD,IAAIu/C,QAAQzpB,MAInC,YAAA4gD,wBAAA,SAAwBC,EAAmBhmE,GACzC,IAAIkiB,EAAUj2B,KAAKi2B,QACf/pB,EAAS6H,EAAO7H,OAChBymD,EAAWonB,EAAYpnB,SACvBqnB,EAAa9tE,EAASymD,EACtBsnB,EAAiB9vE,OAAO8rB,EAAQ1I,qBAChCssD,EAAoB5jD,EAAQ4jD,kBAE5BK,EAAM,IAAI9xE,WAAWyxE,EAAoBG,GAC7C/jD,EAAQjN,mBAAmBkxD,EAAK,EAAGD,EAAgBD,GACnD,IAAI95D,EAAM25D,EACNnE,EAAaqE,EAAY7lB,eAC7B,OAAQwhB,GACN,KAAK,EAAAv2C,WAAWz4B,IACd,OAAQisD,GACN,KAAK,EACH,IAAK,IAAItyD,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC/B,IAAIiB,EAAQyS,EAAO1T,GACnB8J,OAAO,EAAA6hE,kBAAkB1qE,IAAUo0E,GACnCvrE,OAAO,EAAAu/C,gBAAgBpoD,IAAU,EAAA89B,aAAaooB,OAC9C,EAAA7pB,QAAQ,EAAAsuC,iBAAiB3qE,GAAQ44E,EAAKh6D,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS7f,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC3BiB,EAAQyS,EAAO1T,GACnB8J,OAAO,EAAA6hE,kBAAkB1qE,IAAUo0E,GACnCvrE,OAAO,EAAAu/C,gBAAgBpoD,IAAU,EAAA89B,aAAaooB,OAC9C,EAAA5pB,SAAS,EAAAquC,iBAAiB3qE,GAAQ44E,EAAKh6D,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS7f,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC3BiB,EAAQyS,EAAO1T,GACnB8J,OAAO,EAAA6hE,kBAAkB1qE,IAAUo0E,GACnCvrE,OAAO,EAAAu/C,gBAAgBpoD,IAAU,EAAA89B,aAAaooB,OAC9C,EAAAn+B,SAAS,EAAA4iD,iBAAiB3qE,GAAQ44E,EAAKh6D,GACvCA,GAAO,EAET,MAEF,QAAS/V,QAAO,GAElB,MAEF,KAAK,EAAAg1B,WAAWx4B,IACd,IAAStG,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC3BiB,EAAQyS,EAAO1T,GACnB8J,OAAO,EAAA6hE,kBAAkB1qE,IAAUo0E,GACnCvrE,OAAO,EAAAu/C,gBAAgBpoD,IAAU,EAAA89B,aAAaooB,OAC9C,EAAA2yB,SAAStvD,QAAQ,EAAAqhD,oBAAoB5qE,GAAQ,EAAA6qE,qBAAqB7qE,IAAS44E,EAAKh6D,GAChFA,GAAO,EAET,MAEF,KAAK,EAAAif,WAAWh4B,IACd,IAAS9G,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC3BiB,EAAQyS,EAAO1T,GACnB8J,OAAO,EAAA6hE,kBAAkB1qE,IAAUo0E,GACnCvrE,OAAO,EAAAu/C,gBAAgBpoD,IAAU,EAAA89B,aAAaooB,OAC9C,EAAA3pB,SAAS,EAAAkyC,iBAAiBzuE,GAAQ44E,EAAKh6D,GACvCA,GAAO,EAET,MAEF,KAAK,EAAAif,WAAW/3B,IACd,IAAS/G,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC3BiB,EAAQyS,EAAO1T,GACnB8J,OAAO,EAAA6hE,kBAAkB1qE,IAAUo0E,GACnCvrE,OAAO,EAAAu/C,gBAAgBpoD,IAAU,EAAA89B,aAAaooB,OAC9C,EAAA1pB,SAAS,EAAAkyC,iBAAiB1uE,GAAQ44E,EAAKh6D,GACvCA,GAAO,EAET,MAEF,QAAS/V,QAAO,GAIlB,OAFAA,OAAO+V,GAAOg6D,EAAIhuE,QAEXlM,KAAKu5E,iBAAiBW,IAG/B,YAAAE,wBAAA,SAAwBL,EAAmBM,GACzC,IAAIpkD,EAAUj2B,KAAKi2B,QACf4jD,EAAoB5jD,EAAQ4jD,kBAC5BvqD,EAAiBnlB,OAAO8rB,EAAQ3G,gBAChCgrD,EAAgBnwE,OAAOnK,KAAK8oB,SAAS4H,aAAapB,EAAgB,CAAEyqD,KACpEQ,EAAoBD,EAAcl+C,oBAClCo+C,EAAeH,EAAcpxD,OAAO/c,OAAS2tE,EAC7CY,EAAcr3E,IAAIo3E,EAAeT,EAAYpnB,UAE7CunB,EAAM,IAAI9xE,WAAWyxE,EAAoBU,GAC7CtkD,EAAQjN,mBAAmBkxD,EAAK,EAAGI,EAAeC,GAElD,IAAIG,EAAkB/3B,QAAQ03B,EAAcnxD,QAAU2wD,EAOtD,OANA1vE,QAAQ8rB,EAAQ/L,QAAQY,UACxB3gB,OAAOmwE,EAAc78C,WAAW,OAAQi9C,EAAiBR,EAAKL,IAC9D1vE,OAAOmwE,EAAc78C,WAAW,YAAai9C,EAAiBR,EAAKL,IACnE1vE,OAAOmwE,EAAc78C,WAAW,aAAc+8C,EAAcN,EAAKL,IACjE1vE,OAAOmwE,EAAc78C,WAAW,UAAWg9C,EAAaP,EAAKL,IAEtD75E,KAAKu5E,iBAAiBW,IAM/B,YAAAS,yBAAA,SAAyBr3B,GAEvB,GADAn5C,OAAOm5C,EAAK5mC,GAAG,EAAAra,YAAY6yE,WACvB5xB,EAAKnqB,oBAAsB,EAC7B,OAAOmqB,EAAKnqB,mBAEd,IAAI84C,EAAgBjyE,KAAKiyE,cACrBh6C,EAAQg6C,EAAc/lE,OAO1B,OANKo3C,EAAK5mC,GAAG,EAAAra,YAAYu4E,aAAet3B,EAAK1pC,UAAU86C,mBAAqBpR,EAAK1pC,UAAUwgB,eAAeluB,SAExGo3C,EAAOtjD,KAAKg1E,iBAAiB1xB,IAE/B2uB,EAAcxlE,KAAK62C,EAAKz6B,cACxBy6B,EAAKnqB,mBAAqBlB,EACnBA,GAKT,YAAAw+C,yBAAA,SAAyB9/D,EAAsBkD,GAI7C,OAHIlD,EAAUnJ,MAAQ,EAAAD,SAAS8T,gBAC7B1K,EAAqCA,EAAWxE,aAE1CwE,EAAUnJ,MAChB,KAAK,EAAAD,SAASsT,iBAEZ,IADA,IACSxgB,EAAI,EAAGyiB,GADZ+3D,EAAsClkE,EAAWN,SAChBnK,OAAQ7L,EAAIyiB,IAAKziB,EACpDL,KAAKy2E,yBAAyBoE,EAAiBx6E,GAAIwZ,GAErD,MAEF,KAAK,EAAAtM,SAASyT,gBACZ,IAAIrO,EAAU3S,KAAKi2B,QAAQlM,wBAAyCpT,GACpExM,OAAOwI,EAAQnF,MAAQ,EAAAoa,YAAY2P,MAC9B5kB,EAAQkc,aAAa,EAAAhH,eAAezK,OAAOpd,KAAKi2E,YAAkBtjE,GACvE,MAEF,KAAK,EAAApF,SAAS2U,qBACZ,IAAI24D,EACJ,IAASx6E,EAAI,EAAGyiB,GADZ+3D,EAA0ClkE,EAAWN,SACpBnK,OAAQ7L,EAAIyiB,IAAKziB,EACpDL,KAAKy2E,yBAAyBoE,EAAiBx6E,GAAIwZ,GAErD,MAEF,KAAK,EAAAtM,SAASmV,SACZ,IAAI5J,EAAmCnC,EAAWmC,aAClD,IAASzY,EAAI,EAAGyiB,EAAIhK,EAAa5M,OAAQ7L,EAAIyiB,IAAKziB,EAAG,CAC/CsS,EAAU3S,KAAKi2B,QAAQlM,wBAAwBjR,EAAazY,IAChE8J,OAAOwI,EAAQnF,MAAQ,EAAAoa,YAAY1K,QAEhCvK,EAAQ+J,GAAG,EAAAra,YAAYozB,UACvB9iB,EAAQkc,aAAa,EAAAhH,eAAezK,OACrCpd,KAAKg2E,cAAsBrjE,GAE/B,MAEF,KAAK,EAAApF,SAASgU,kBACR5O,EAAU3S,KAAKi2B,QAAQlM,wBAA0CpT,IACzDnJ,MAAQ,EAAAoa,YAAY1K,SACzBvK,EAAQkc,aAAa,EAAAhH,eAAezK,OAAOpd,KAAKg2E,cAAsBrjE,IAE7E,MAEF,KAAK,EAAApF,SAAS6T,OACuC,MAA7BzK,EAAWhL,gBAC/B3L,KAAKo2E,kBACuBz/D,EAAWhL,eACMgL,EAAWS,MAG1D,MAEF,KAAK,EAAA7J,SAASwU,OACZ/hB,KAAKo2E,kBACez/D,EAAWhL,eACXgL,EAAWS,MAE/B,MAEF,KAAK,EAAA7J,SAASoU,oBACd,KAAK,EAAApU,SAAS0U,kBACd,KAAK,EAAA1U,SAASyU,qBACd,KAAK,EAAAzU,SAASkT,0BACd,KAAK,EAAAlT,SAASiV,gBAAiB,MAC/B,QACE,IAAItS,EAAOlQ,KAAK86E,iBAAiBnkE,GAC7B,EAAA+yC,gBAAgBx5C,IAAS,EAAAkvB,aAAakzB,KAAKz4C,EAAKpN,KAAKyD,KAM/D,YAAA4qE,iBAAA,SACEnkE,EACAokE,QAAA,IAAAA,OAAA,GAEA,IACI7qE,EADAvQ,EAASK,KAAKL,OAElB,OAAQgX,EAAUnJ,MAChB,KAAK,EAAAD,SAASoT,MACZzQ,EAAOlQ,KAAKg7E,sBAAsCrkE,GAClD,MAEF,KAAK,EAAApJ,SAASqT,MACZ1Q,EAAOlQ,KAAKi7E,sBAAsCtkE,GAClD,MAEF,KAAK,EAAApJ,SAASuT,SACZ5Q,EAAOlQ,KAAKk7E,yBAA4CvkE,GACxD,MAEF,KAAK,EAAApJ,SAASwT,GACZ7Q,EAAOlQ,KAAKm7E,mBAAgCxkE,GAC5C,MAEF,KAAK,EAAApJ,SAAStK,MACZiN,EAAOlQ,KAAKo7E,sBAAsCzkE,GAClD,MAEF,KAAK,EAAApJ,SAAS+T,WACZpR,EAAOlQ,KAAKq7E,2BAAgD1kE,GAC5D,MAEF,KAAK,EAAApJ,SAASkU,IACZvR,EAAOlQ,KAAKs7E,oBAAkC3kE,GAC9C,MAEF,KAAK,EAAApJ,SAASsU,GACZ3R,EAAOlQ,KAAKu7E,mBAAgC5kE,GAC5C,MAEF,KAAK,EAAApJ,SAAS4U,OACZjS,EAAOlQ,KAAKw7E,uBAAwC7kE,EAAWokE,GAC/D,MAEF,KAAK,EAAAxtE,SAAS8U,OACZnS,EAAOlQ,KAAKy7E,uBAAwC9kE,GACpD,MAEF,KAAK,EAAApJ,SAAS+U,MACZpS,EAAOlQ,KAAK07E,sBAAsC/kE,GAClD,MAEF,KAAK,EAAApJ,SAASgV,IACZrS,EAAOlQ,KAAK27E,oBAAkChlE,GAC9C,MAEF,KAAK,EAAApJ,SAASmV,UACZxS,EAAOlQ,KAAK47E,yBAA4CjlE,MAC7CzG,EAAOvQ,EAAO47C,OACzB,MAEF,KAAK,EAAAhuC,SAASoV,KACZzS,EAAOlQ,KAAK67E,qBAAoCllE,GAChD,MAEF,KAAK,EAAApJ,SAASqV,MACZ1S,EAAOlQ,KAAK87E,sBAAsCnlE,GAClD,MAEF,KAAK,EAAApJ,SAASiV,gBAEZxiB,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfrc,EAAU9L,OAEZqF,EAAOvQ,EAAO+8C,cACd,MAEF,QACEvyC,QAAO,GACP+F,EAAOvQ,EAAO+8C,cAIlB,OADI18C,KAAKkqB,QAAQ4Q,WAAW96B,KAAK+7E,iBAAiB7rE,EAAMyG,EAAU9L,OAC3DqF,GAGT,YAAAooE,kBAAA,SACEziE,EACAmmE,EACA5D,QADA,IAAA4D,OAAA,QACA,IAAA5D,MAAA,MAEA,IAAI6D,EAAgBpmE,EAAW3J,OAC1BksE,KACHA,EAAQ,IAAI5wE,MAAqBy0E,IAC3B/vE,OAAS,GAIjB,IAFA,IAAIvM,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACPlzE,EAAI,EAAGA,EAAI47E,IAAiB57E,EAAG,CACtC,IAAI6P,EAAOlQ,KAAK86E,iBAAiBjlE,EAAWxV,GAAI27E,GAAU37E,GAAK47E,EAAgB,GAC/E,OAAQ,EAAAvyB,gBAAgBx5C,IACtB,KAAK,EAAAkvB,aAAayuB,MAChB,IAAK,EAAAwiB,aAAangE,GAAO,CACvB,IAAK,IAAIyb,EAAI,EAAG7I,EAAI,EAAAwtD,mBAAmBpgE,GAAOyb,EAAI7I,IAAK6I,EAAGysD,EAAM3rE,KAAK,EAAA+jE,cAActgE,EAAMyb,IACzF,MAIJ,QAASysD,EAAM3rE,KAAKyD,GACpB,KAAK,EAAAkvB,aAAakzB,KAEpB,GAAI93B,EAAK5d,MAAM,KAA0C,CACnD,EAAA8wC,yBAAyBx9C,IAAOkoE,EAAM3rE,KAAK9M,EAAO+8C,eACtD,OAGJ,OAAO07B,GAGT,YAAA4C,sBAAA,SACErkE,GAEA,IAAId,EAAac,EAAUd,WACvBqmE,EAAYl8E,KAAKuzE,YACjB4I,EAAYD,EAAUjT,OAC1BjpE,KAAKuzE,YAAc4I,EAEnB,IAAI/D,EAAQp4E,KAAKs4E,kBAAkBziE,GAKnC,OAJKsmE,EAAUv/D,MAAM,MAA0C5c,KAAKy4E,oBAAoB0D,EAAW/D,GACnG+D,EAAUhS,mBACV+R,EAAUvR,QAAQwR,GAClBn8E,KAAKuzE,YAAc2I,EACZhD,EAAQl5E,KAAKL,OAAQy4E,EAAO,EAAAj5C,WAAWga,OAGhD,YAAA8hC,sBAAA,SACEtkE,GAEA,IAAIhX,EAASK,KAAKL,OAClB,GAAIgX,EAAUX,MAKZ,OAJAhW,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfrc,EAAUX,MAAMnL,OAEXlL,EAAO+8C,cAEhB,IAAIliB,EAAOx6B,KAAKuzE,YACZx5C,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJA/5B,KAAKkN,MACH,EAAA1C,eAAe4xE,qFACfzlE,EAAU9L,OAELlL,EAAO+8C,cAEhB,IAAI07B,EAAQ,IAAI5wE,MAChBxH,KAAKy4E,oBAAoBj+C,EAAM49C,GAE/B,IADA,IAAIv4D,EAAS2a,EAAK3a,OACA,OAAXA,GAAmBA,EAAOka,YAAcA,GAC7C/5B,KAAKy4E,oBAAoB54D,EAAQu4D,GAAwB,GACzDv4D,EAASA,EAAOA,OAKlB,OAHA2a,EAAK2vC,mBACLiO,EAAM3rE,KAAK9M,EAAOo7C,GAAGhhB,IACrBS,EAAK3d,IAAI,IACFq8D,EAAQv5E,EAAQy4E,EAAO,EAAAj5C,WAAWga,OAG3C,YAAA+hC,yBAAA,SACEvkE,GAEA,IAAIhX,EAASK,KAAKL,OACdqW,EAAQW,EAAUX,MACtB,GAAIA,EAKF,OAJAhW,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfhd,EAAMnL,OAEDlL,EAAO+8C,cAGhB,IAAIliB,EAAOx6B,KAAKuzE,YACZ3K,EAAgBpuC,EAAKouC,cACzB,GAAqB,MAAjBA,EAKF,OAJA5oE,KAAKkN,MACH,EAAA1C,eAAe6xE,8EACf1lE,EAAU9L,OAELlL,EAAO+8C,cAEhBliB,EAAK3d,IAAI,KACT,IAAIu7D,EAAQ,IAAI5wE,MAChBxH,KAAKy4E,oBAAoBj+C,EAAM49C,GAE/B,IADA,IAAIhiD,EAAuBoE,EAAK3a,OACzBuW,GAAWA,EAAQwyC,gBAAkBA,GAC1C5oE,KAAKy4E,oBAAoBriD,EAASgiD,GAAwB,GAC1DhiD,EAAUA,EAAQvW,OAIpB,OAFA2a,EAAK2vC,mBACLiO,EAAM3rE,KAAK9M,EAAOo7C,GAAG6tB,IACdsQ,EAAQv5E,EAAQy4E,EAAO,EAAAj5C,WAAWga,OAG3C,YAAAgiC,mBAAA,SACExkE,GAEA,IAAIhX,EAASK,KAAKL,OAEdu8E,EAAYl8E,KAAKuzE,YACjBv9D,EAAQkmE,EAAU1R,iBAClB2R,EAAYD,EAAUjT,OAC1BjpE,KAAKuzE,YAAc4I,EACnB,IAAIpiD,EAAa,SAAW/jB,EAC5BmmE,EAAUpiD,WAAaA,EACvB,IAAI6uC,EAAgB,YAAc5yD,EAClCmmE,EAAUvT,cAAgBA,EAE1B,IAAIwP,EAAQ,IAAI5wE,MACZmP,EAAUA,UAAUnJ,MAAQ,EAAAD,SAASoT,MACvC3gB,KAAKs4E,kBAAmC3hE,EAAUA,UAAWd,YAAY,EAAOuiE,GAEhFA,EAAM3rE,KACJzM,KAAK86E,iBAAiBnkE,EAAUA,YAGpC,IAAI2lE,EAAW38E,EAAOslD,qBACpBjlD,KAAKu8E,cACHv8E,KAAK+2E,kBAAkBpgE,EAAUhC,UAAW,EAAAyV,KAAKhnB,KACjDpD,KAAK8xE,cAGL0K,GAAc,EACd,EAAA9yB,gBAAgB4yB,IAAa,EAAAl9C,aAAaooB,QAC5Cr9C,OAAO,EAAA6hE,kBAAkBsQ,IAAa,EAAAn9C,WAAWz4B,KAC5C,EAAAulE,iBAAiBqQ,KAAWE,GAAc,IAEjD,IAAIC,EAAaN,EAAUz/D,GAAG,KAC1BggE,EAAYP,EAAUv/D,MAAM,MAC5B+/D,EAASR,EAAUv/D,MAAM,MAQzBggE,GAAgBH,IAAeN,EAAUz/D,GAAG,IAE5CkgE,IAAiBJ,GACnBpE,EAAM3rE,KAAK9M,EAAOo7C,GAAG6tB,EAAe0T,IAEtC,IAAIzrE,EAAOqoE,EAAQv5E,EAAQy4E,EAAO,EAAAj5C,WAAWga,MAoB7C,OAnBIyjC,IAAiBJ,GAAeE,KAClC7rE,EAAOlR,EAAOw7C,KAAKytB,EAAe/3D,IAEhC8rE,IACF9rE,EAAOlR,EAAOi7C,MAAM7gB,EAAY,CAAElpB,KAI/B4rE,GAAYz8E,KAAKy4E,oBAAoB0D,EAAW/D,GACrD+D,EAAUhS,mBACV+R,EAAUxR,gBACVyR,EAAU9lD,MACR,OAKF6lD,EAAUvR,QAAQwR,GAClBn8E,KAAKuzE,YAAc2I,EACZrrE,GAGT,YAAAuqE,sBAAA,SACEzkE,GAEA,OAAO3W,KAAKL,OAAO47C,OAGrB,YAAA8/B,2BAAA,SACE1kE,GAEA,OAAO3W,KAAK+2E,kBAAkBpgE,EAAUpF,WAAY,EAAA6Y,KAAKG,KAAM,IAGjE,YAAA+wD,oBAAA,SACE3kE,GAEA,IAAIhX,EAASK,KAAKL,OAGdu8E,EAAYl8E,KAAKuzE,YACjBv9D,EAAQkmE,EAAU1R,iBAClB2R,EAAYD,EAAUjT,OAC1BjpE,KAAKuzE,YAAc4I,EAGnB,IAAItsE,EAAc8G,EAAU9G,YACxB+mE,EAA0B,EAC1B/mE,IAAa+mE,EAAW52E,KAAK86E,iBAAiBjrE,IAGlD,IAAIysE,EAA0B,EAC1BO,GAAa,EACjB,GAAIlmE,EAAUhC,WAQZ,GAPA2nE,EAAW38E,EAAOslD,qBAChBjlD,KAAKu8E,cACHv8E,KAAK+2E,kBAA8BpgE,EAAUhC,UAAW,EAAAyV,KAAKxmB,MAC7D5D,KAAK8xE,cAIL,EAAApoB,gBAAgB4yB,IAAa,EAAAl9C,aAAaooB,MAAO,CAEnD,GADAr9C,OAAO,EAAA6hE,kBAAkBsQ,IAAa,EAAAn9C,WAAWz4B,KACH,GAA1C,EAAAulE,iBAAiBqQ,GAA4B,CAC/C,IAAI,EAAQ,IAAI90E,MAMhB,OALIovE,GAAU,EAAMnqE,KAAKmqE,GACzB52E,KAAKy4E,oBAAoB0D,EAAW,GACpCA,EAAUhS,mBACV+R,EAAUxR,gBACV1qE,KAAKuzE,YAAc2I,EACZhD,EAAQv5E,EAAQ,EAAO,EAAAw/B,WAAWga,MAE3C0jC,GAAa,QAGfP,EAAW38E,EAAOyD,IAAI,GACtBy5E,GAAa,EAEfV,EAAUtQ,qBAAqByQ,GAG/B,IAAI7iE,EAAc9C,EAAU8C,YACxBqjE,EAA0B,EAC1BrjE,IAAaqjE,EAAW98E,KAAK+2E,kBAAkBt9D,EAAa,EAAA2Q,KAAKG,KAAM,IAG3E,IAAIwP,EAAaoiD,EAAUpiD,WAAa,SAAW/jB,EAAOmmE,EAAUpiD,WAAaA,EACjFoiD,EAAUpiD,WAAaA,EACvB,IAAI6uC,EAAgB,YAAc5yD,EAClCmmE,EAAUvT,cAAgBA,EAC1B,IAAImU,EAAY,QAAU/mE,EACtBgnE,EAAgBrmE,EAAUA,UAC1ByhE,EAAQ,IAAI5wE,MACZw1E,EAAcxvE,MAAQ,EAAAD,SAASoT,MACjC3gB,KAAKs4E,kBAAmC0E,EAAennE,YAAY,EAAOuiE,GAE1EA,EAAM3rE,KAAKzM,KAAK86E,iBAAiBkC,IAEnC,IA6BInsE,EA7BA4rE,EAAaN,EAAUz/D,GAAG,KAC1BggE,EAAYP,EAAUv/D,MAAM,MAC5B+/D,EAASR,EAAUv/D,MAAM,MAazBggE,GAAgBH,IAAeN,EAAUz/D,GAAG,IAC5CugE,GAAcJ,GAAcF,EAE5BxhC,EAAO,IAAI3zC,MAIf,GAHKq1E,GACH1hC,EAAK1uC,KAAK9M,EAAOo7C,GAAGhhB,EAAYp6B,EAAOo4C,MAAM,EAAAzU,QAAQipC,OAAQ+P,KAE3DI,GACEtE,EAAMlsE,OAAS,GAAK,EAAAw9C,gBAAgB0uB,EAAM,KAAO,EAAAh5C,aAAawuB,QAChEzS,EAAK1uC,KAAK9M,EAAOi7C,MAAMguB,EAAewP,SAGxC,IAAK,IAAI/3E,EAAI,EAAGyiB,EAAIs1D,EAAMlsE,OAAQ7L,EAAIyiB,IAAKziB,EAAG86C,EAAK1uC,KAAK2rE,EAAM/3E,IAmChE,OAhCIu8E,GAAgBF,GACdI,GAAU3hC,EAAK1uC,KAAKqwE,GACxB98E,KAAKy4E,oBAAoB0D,EAAWhhC,GACpCA,EAAK1uC,KAAK9M,EAAOo7C,GAAGgiC,IAElBlsE,EADE+lE,EACKj3E,EAAOi7C,MAAMqiC,EAAaljD,EAAa,KAAM,CAClD68C,EACAj3E,EAAOw7C,KAAK4hC,EAAWp9E,EAAOi7C,MAAM,KAAMO,MAGrCx7C,EAAOi7C,MAAMqiC,EAAaljD,EAAa,KAAM,CAClDp6B,EAAOw7C,KAAK4hC,EAAW7D,EAAQv5E,EAAQw7C,EAAM,EAAAhc,WAAWga,WAIxDy9B,GAAUz7B,EAAK64B,QAAQ4C,GAC3B52E,KAAKy4E,oBAAoB0D,EAAWhhC,GACpCtqC,EAAOlR,EAAOi7C,MAAMqiC,EAAaljD,EAAa,KAAMohB,IAItDghC,EAAUhS,mBACV+R,EAAUxR,gBACVyR,EAAU9lD,MACR,OAKEwmD,EAAYX,EAAUvR,QAAQwR,GAC7BD,EAAUtR,mBAAmBuR,GAClCn8E,KAAKuzE,YAAc2I,EACZrrE,GAGT,YAAA0qE,mBAAA,SACE5kE,GAEA,IAAIhX,EAASK,KAAKL,OACd6Y,EAAS7B,EAAU6B,OACnBC,EAAU9B,EAAU8B,QACpByjE,EAAYl8E,KAAKuzE,YAGjB+I,EAAW38E,EAAOslD,qBACpBjlD,KAAKu8E,cACHv8E,KAAK+2E,kBAAkBpgE,EAAUhC,UAAW,EAAAyV,KAAKxmB,MACjD5D,KAAK8xE,cAKT,GACE,EAAApoB,gBAAgB4yB,IAAa,EAAAl9C,aAAaooB,OAC1C,EAAAwkB,kBAAkBsQ,IAAa,EAAAn9C,WAAWz4B,IAE1C,OAAO,EAAAulE,iBAAiBqQ,GACpBt8E,KAAK86E,iBAAiBtiE,GACtBC,EACEzY,KAAK86E,iBAAiBriE,GACtB9Y,EAAO47C,MAIf,IAAI2hC,EAAc,IAAI11E,MAClB21E,EAAajB,EAAUjT,OAY3B,GAXAjpE,KAAKuzE,YAAc4J,EACnBA,EAAWtR,qBAAqByQ,GAC5B9jE,EAAOhL,MAAQ,EAAAD,SAASoT,MAC1B3gB,KAAKs4E,kBAAmC9/D,EAAQ3C,YAAY,EAAOqnE,GAEnEA,EAAYzwE,KAAKzM,KAAK86E,iBAAiBtiE,IAEpC2kE,EAAWvgE,MAAM,MAA0C5c,KAAKy4E,oBAAoB0E,EAAYD,GACrGC,EAAWhT,mBACXnqE,KAAKuzE,YAAc2I,EAEfzjE,EAAS,CACX,IAAI2kE,EAAclB,EAAUjT,OAC5BjpE,KAAKuzE,YAAc6J,EACnBA,EAAY3Q,sBAAsB6P,GAClC,IAAIe,EAAe,IAAI71E,MAUvB,OATIiR,EAAQjL,MAAQ,EAAAD,SAASoT,MAC3B3gB,KAAKs4E,kBAAmC7/D,EAAS5C,YAAY,EAAOwnE,GAEpEA,EAAa5wE,KAAKzM,KAAK86E,iBAAiBriE,IAErC2kE,EAAYxgE,MAAM,MAA0C5c,KAAKy4E,oBAAoB2E,EAAaC,GACvGD,EAAYjT,mBACZnqE,KAAKuzE,YAAc2I,EACnBA,EAAUhR,cAAciS,EAAYC,GAC7Bz9E,EAAO07C,GAAGihC,EACfpD,EAAQv5E,EAAQu9E,EAAa,EAAA/9C,WAAWga,MACxC+/B,EAAQv5E,EAAQ09E,EAAc,EAAAl+C,WAAWga,OAK3C,OAFA+iC,EAAUtR,mBAAmBuS,GACzBA,EAAWzgE,GAAG,MAAuBw/D,EAAUzP,sBAAsB6P,GAClE38E,EAAO07C,GAAGihC,EACfpD,EAAQv5E,EAAQu9E,EAAa,EAAA/9C,WAAWga,QAU9C,YAAAqiC,uBAAA,SACE7kE,EACAokE,GAEA,IAAIp7E,EAASK,KAAKL,OACdkR,EAAsB,EACtB2pB,EAAOx6B,KAAKuzE,YACZpkE,EAAaqrB,EAAKrrB,WAGtBqrB,EAAK3d,IAAI,KAET,IAAIygE,EAAkB3mE,EAAUrV,MAChC,GAAIg8E,EAAiB,CACnB,GAAInuE,GAAc,EAAAib,KAAKG,KAMrB,OALAvqB,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfmV,EAAgBzyE,MAAO7K,KAAK8xE,YAAYrmE,WAAY0D,EAAW1D,YAEjEzL,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO+8C,cAEhB,IAAI6gC,EAAc,EACd/iD,EAAKynC,eAAevlD,GAAG,EAAAra,YAAYwuB,iBAAgB0sD,GAAe,GACtE1sE,EAAO7Q,KAAK+2E,kBAAkBuG,EAAiBnuE,EAA0B,GAAdouE,GAItDv9E,KAAKqyE,oBAAoBroD,IAAInZ,IAC5B1B,EAAWqmE,WACT,EAAA9rB,gBAAgB74C,IAAS,EAAAuuB,aAAa0oB,UACpCttB,EAAK+vC,eAAe,EAAAqB,iBAAiB/6D,GAAO,EAAAu3D,WAAWoV,gBACzDhjD,EAAK8uC,eAAe,EAAAsC,iBAAiB/6D,GAAO,EAAAu3D,WAAWoV,cACvDx9E,KAAKqyE,oBAAoB7nD,IAAI3Z,IAOhC2pB,EAAK4yC,YAAYv8D,EAAM1B,IAAaqrB,EAAK3d,IAAI,GAC9C2d,EAAKixC,UAAU56D,EAAM1B,IAAaqrB,EAAK3d,IAAI,QAEtC1N,GAAc,EAAAib,KAAKG,OAC5BvqB,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfxxD,EAAU9L,MAAO,OAAQsE,EAAW1D,YAEtCoF,EAAOlR,EAAO+8C,eAGhB,IAAI07B,EAAQ,IAAI5wE,MAOhB,GANAxH,KAAKy4E,oBAAoBj+C,EAAM49C,GAC/Bp4E,KAAK02E,mBAAmBl8C,EAAM49C,GAG1BjpE,EAAWqmE,YAAcx1E,KAAKqyE,oBAAoBroD,IAAInZ,KAAOA,EAAO7Q,KAAKy1E,WAAW5kE,IAEpF1B,GAAc,EAAAib,KAAKG,MAAQ6tD,EAAMlsE,OAAQ,CAC3C,IAAIysE,EAAOn+C,EAAKovC,oBAAoBz6D,GAChCqrB,EAAKixC,UAAU56D,EAAM1B,IAAaqrB,EAAKivC,aAAakP,EAAK1gD,MAAO,EAAAmwC,WAAWzD,SAC/EyT,EAAMpE,QACJr0E,EAAO66C,UAAUm+B,EAAK1gD,MAAOpnB,IAE/BA,EAAOlR,EAAO64C,UAAUmgC,EAAK1gD,MAAO9oB,EAAW+kD,gBAKjD,OAHA15B,EAAK2vC,mBAGD4Q,GAAgBlqE,GAAQ1B,GAAc,EAAAib,KAAKG,KACxC6tD,EAAMlsE,QACXksE,EAAM3rE,KAAKoE,GACJlR,EAAOi7C,MAAM,KAAMw9B,EAAOjpE,EAAW+kD,iBAFlBrjD,EAMxB2pB,EAAK9d,GAAG,OACL07D,EAAMlsE,QACXksE,EAAM3rE,KAAK9M,EAAOo7C,GAAG5wC,OAAOqwB,EAAKuuC,mBAAoB,EAAGl4D,IAEjDlR,EAAOi7C,MAAM,KAAMw9B,IAHAz4E,EAAOo7C,GAAG5wC,OAAOqwB,EAAKuuC,mBAAoB,EAAGl4D,GAOpEunE,EAAMlsE,QACXksE,EAAM3rE,KAAK9M,EAAO87C,OAAO5qC,IAClBlR,EAAOi7C,MAAM,KAAMw9B,IAFAz4E,EAAO87C,OAAO5qC,IAK1C,YAAA4qE,uBAAA,SACE9kE,GAEA,IAAIhX,EAASK,KAAKL,OAEdgb,EAAQhE,EAAUgE,MAClB8iE,EAAW9iE,EAAMzO,OACrB,IAAKuxE,EACH,OAAOz9E,KAAK+2E,kBAAkBpgE,EAAUhC,UAAW,EAAAyV,KAAKG,KAAI,GAM9D,IAAI2xD,EAAYl8E,KAAKuzE,YACjBmK,EAAUxB,EAAU1R,iBAGpBmT,EAAYzB,EAAU9S,aAAa,EAAAh/C,KAAK3mB,KACxCm6E,EAAiBD,EAAU1lD,MAG3B0kD,EAAS,IAAIn1E,MAAqB,EAAIi2E,GAC1Cd,EAAO,GAAKh9E,EAAO66C,UACjBojC,EACA59E,KAAK+2E,kBAAkBpgE,EAAUhC,UAAW,EAAAyV,KAAK3mB,IAAG,IAQtD,IAFA,IAAIo6E,EAAa,EACbC,GAAgB,EACXz9E,EAAI,EAAGA,EAAIo9E,IAAYp9E,EAAG,CACjC,IACI2V,EADQ2E,EAAMta,GACA2V,MACdA,EACF2mE,EAAOkB,KAAgBl+E,EAAOo7C,GAAG,OAAS16C,EAAEoL,SAAS,IAAM,IAAMiyE,EAC/D/9E,EAAOu4C,OAAO,EAAA9O,SAASwjC,MACrBjtE,EAAO64C,UAAUolC,EAAgB,EAAAz+C,WAAWz4B,KAC5C1G,KAAK+2E,kBAAkB/gE,EAAO,EAAAoU,KAAK3mB,IAAG,KAM1Cq6E,EAAez9E,EAInB67E,EAAUvS,cAAcgU,GAGxBhB,EAAOkB,GAAcl+E,EAAOo7C,IAAI+iC,GAAgB,EAC1C,OAASA,EAAaryE,SAAS,IAC/B,SACA,IAAMiyE,GAGZ,IAAIK,EAAep+E,EAAOi7C,MAAM,SAAW8iC,EAASf,EAAQ,EAAAx9C,WAAWga,MACnE6kC,EAAoB,IACpBC,EAAoB,EACxB,IAAS59E,EAAI,EAAGA,EAAIo9E,IAAYp9E,EAAG,CACjC,IACIwV,EADQ8E,EAAMta,GACKwV,WACnBomE,EAAgBpmE,EAAW3J,OAG3BiwE,EAAYD,EAAUjT,OAC1BjpE,KAAKuzE,YAAc4I,EACnB,IAAIpiD,EAAa,SAAW2jD,EAC5BvB,EAAUpiD,WAAaA,EAEvB,IAAImkD,EAAS79E,GAAKo9E,EAAW,EACzBU,EAAYD,EAASnkD,EAAa,QAAU15B,EAAI,GAAGoL,SAAS,IAAM,IAAMiyE,EACxEtF,EAAQ,IAAI5wE,MAAqB,EAAIy0E,GACzC7D,EAAM,GAAK2F,EAGX,IAFA,IAAIK,EAAQ,EACR3B,GAAa,EACR9wD,EAAI,EAAGA,EAAIswD,IAAiBtwD,EAAG,CACtC,IAAIzb,EAAOlQ,KAAK86E,iBAAiBjlE,EAAW8V,IAI5C,GAHI,EAAA+9B,gBAAgBx5C,IAAS,EAAAkvB,aAAakzB,MACxC8lB,EAAMgG,KAAWluE,GAEfisE,EAAUv/D,MAAM,KAA0C,CACxDu/D,EAAUz/D,GAAG,OAAuB+/D,GAAa,GACrD,OAGJrE,EAAMlsE,OAASkyE,GACX3B,GAAcyB,GAAU/B,EAAUv/D,MAAM,SAC1CohE,GAAqB7B,EAAU5nE,OAEjC0pE,GAAuC,MAAlB9B,EAAU5nE,MAG1BkoE,GAAYz8E,KAAKy4E,oBAAoB0D,EAAW/D,GACrD+D,EAAU9lD,MACR,MAGF8lD,EAAUhS,mBACVnqE,KAAKuzE,YAAc2I,EACnB6B,EAAep+E,EAAOi7C,MAAMujC,EAAW/F,EAAO,EAAAj5C,WAAWga,MAQ3D,OANA+iC,EAAUxR,gBAGNoT,GAAgB,IAAG5B,EAAU3nE,QAA6B,GAApBypE,GAC1C9B,EAAU3nE,QAA6B,KAApB0pE,EAEZF,GAGT,YAAArC,sBAAA,SACE/kE,GAEA,IAAI6jB,EAAOx6B,KAAKuzE,YAGhB/4C,EAAK3d,IAAI,KAET,IAAIu7D,EAAQ,IAAI5wE,MAChBxH,KAAK02E,mBAAmBl8C,EAAM49C,GAG9B,IAAI92E,EAAQqV,EAAUrV,MAClBsJ,EAA6B,KACjC,GAAItJ,EAAMkM,MAAQ,EAAAD,SAAS0R,IAAK,CAC9B,IAAIo/D,EAA0B/8E,EAAO8O,UACjCiuE,EAAQnyE,SAAQtB,EAAUyzE,EAAQ,IAIxC,OAFAjG,EAAM3rE,KAAK,EAAA6xE,aAAat+E,KAAM4K,EAAS+L,IAEhCuiE,EAAQl5E,KAAKL,OAAQy4E,EAAO,EAAAj5C,WAAWga,OAGhD,YAAAwiC,oBAAA,SACEhlE,GAQA,OAJA3W,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfrc,EAAU9L,OAEL7K,KAAKL,OAAO+8C,eAIrB,YAAAk/B,yBAAA,SACEjlE,GASA,IAPA,IAAIhX,EAASK,KAAKL,OACdmZ,EAAenC,EAAUmC,aACzBylE,EAAkBzlE,EAAa5M,OAC/BsuB,EAAOx6B,KAAKuzE,YACZiL,EAAe,IAAIh3E,MACnBshB,EAAW9oB,KAAK8oB,SAEXzoB,EAAI,EAAGA,EAAIk+E,IAAmBl+E,EAAG,CACxC,IAAI8R,EAAc2G,EAAazY,GAC3BO,EAAOuR,EAAYvR,KAAKoL,KACxB+C,EAAoB,KACpB6nE,EAA0B,EAC1BC,GAAyB,EAG7B,GAAI1kE,EAAYpD,KAAM,CAMpB,KALAA,EAAO+Z,EAAS81C,YACdzsD,EAAYpD,KACZyrB,EAAKynC,eACLznC,EAAK3B,0BAEI,SACP1mB,EAAYtC,cACd+mE,EAAW52E,KAAK+2E,kBAAkB5kE,EAAYtC,YAAad,EACzD,IAEF8nE,EAAyB72E,KAAKqyE,oBAAoBroD,IAAI4sD,QAInD,KAAIzkE,EAAYtC,YAehB,CACL7P,KAAKkN,MACH,EAAA1C,eAAe81D,cACfnuD,EAAYvR,KAAKiK,MAAM68D,OAEzB,SAfA,GAJAkP,EAAW52E,KAAK+2E,kBAAkB5kE,EAAYtC,YAAa,EAAAua,KAAK+oC,KAAI,IAGpE0jB,EAAyB72E,KAAKqyE,oBAAoBroD,IAAI4sD,GAClD52E,KAAK8xE,aAAe,EAAA1nD,KAAKG,KAAM,CACjCvqB,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfh2D,EAAYtH,MAAO7K,KAAK8xE,YAAYrmE,WAAY,UAElD,SAEFsD,EAAO/O,KAAK8xE,YAYd,IAAI2M,EAAUtsE,EAAYuK,GAAG,EAAAra,YAAYuvB,OACrCkC,GAAW,EACf,GAAI2qD,EACF,GAAI7H,GAEF,GADAA,EAAWj3E,EAAOslD,qBAAqB2xB,GACnC,EAAAltB,gBAAgBktB,IAAa,EAAAx3C,aAAaooB,MAAO,CACnD,IAAIttB,EAAQ,IAAI,EAAA/B,MAAMv3B,GAAO,EAAGmO,EAAMyrB,EAAKmuC,gBAC3C,OAAQ,EAAAqD,kBAAkB4K,IACxB,KAAK,EAAAz3C,WAAWz4B,IACdwzB,EAAMrI,wBACJhH,QACE,EAAAohD,iBAAiB2K,GACjB,GAEF7nE,GAEF,MAEF,KAAK,EAAAowB,WAAWx4B,IACduzB,EAAMrI,wBACJhH,QACE,EAAAqhD,oBAAoB0K,GACpB,EAAAzK,qBAAqByK,IAEvB7nE,GAEF,MAEF,KAAK,EAAAowB,WAAWh4B,IACd+yB,EAAMnI,sBAA2B,EAAAg+C,iBAAiB6G,GAAW7nE,GAC7D,MAEF,KAAK,EAAAowB,WAAW/3B,IACd8yB,EAAMnI,sBAAsB,EAAAi+C,iBAAiB4G,GAAW7nE,GACxD,MAEF,QAEE,OADA5E,QAAO,GACAxK,EAAO+8C,cAIlB,IAAI+rB,EAAejuC,EAAKiuC,aACxB,GAAKA,GACA,GAAIA,EAAaz+C,IAAIppB,GAKxB,OAJAZ,KAAKkN,MACH,EAAA1C,eAAe2nB,uBACfhgB,EAAYvR,KAAKiK,MAAOjK,GAEnBZ,KAAKL,OAAO+8C,mBANFliB,EAAKiuC,aAAeA,EAAe,IAAI9gE,IAQ1D8gE,EAAa5rD,IAAIjc,EAAMs5B,GACvBpG,GAAW,QAGb9zB,KAAKkN,MACH,EAAA1C,eAAek0E,wCACfvsE,EAAYtH,OAMlB,IAAKipB,EAAU,CACToG,OAAK,EACT,GACE/nB,EAAYyK,MAAM,EAAAva,YAAY20D,IAAM,EAAA30D,YAAYuvB,QAChD4I,EAAK9d,GAAG,OACR,CACA,IAAIutD,EAAgBzvC,EAAKqvC,eAAejpE,GACpCqpE,GACFjqE,KAAKkN,MACH,EAAA1C,eAAe2nB,uBACfhgB,EAAYvR,KAAKiK,MAAOsH,EAAYvR,KAAKoL,MAE3CkuB,EAAQ+vC,GAER/vC,EAAQM,EAAKsvC,eAAelpE,EAAMmO,GAEhC0vE,GAASjkD,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWuW,cAClD,CACL,GAAInkD,EAAK8qC,YAAY1kE,GAAO,CAC1BZ,KAAKkN,MACH,EAAA1C,eAAe2nB,uBACfhgB,EAAYvR,KAAKiK,MAAOjK,GAE1B,SAEFs5B,EAAQM,EAAKmuC,eAAehuC,SAAS5rB,EAAMnO,EAAMuR,GAC7CssE,GAASjkD,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWuW,UAEzD,IAAInJ,EAAYzmE,EAAKymE,UACjBoB,GACEp8C,EAAKixC,UAAUmL,EAAU7nE,IAAOyrB,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWzD,SAC1E6Q,GACFh7C,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWsB,UAC1C8U,EAAa/xE,KACX9M,EAAO66C,UAAUtgB,EAAMjC,MACrB4+C,EACID,EACA52E,KAAKy1E,WAAWmB,OAIxB4H,EAAa/xE,KACX9M,EAAO66C,UAAUtgB,EAAMjC,MAAO2+C,IAE5B18C,EAAMnrB,KAAK2N,GAAG,MACX8d,EAAK4yC,YAAYwJ,EAAU7nE,GAC3ByrB,EAAK8uC,eAAepvC,EAAMjC,MAAO,EAAAmwC,WAAWiF,SADV7yC,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWiF,YAKjFmI,GAMFgJ,EAAa/xE,KACX9M,EAAO66C,UAAUtgB,EAAMjC,MACrBlpB,EAAKolD,aAAax0D,KAGtB66B,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWyC,yBACjC3wC,EAAMnrB,KAAK2N,GAAG,KACvB8d,EAAKivC,aAAavvC,EAAMjC,MAAO,EAAAmwC,WAAWiF,UAKlD,OAA8B,GAAvBmR,EAAatyE,OAChB,EACAgtE,EAAQv5E,EAAQ6+E,EAAc,EAAAr/C,WAAWga,OAG/C,YAAA0iC,qBAAA,SACEllE,GAEA,OAAO3W,KAAK+2E,kBAAkBpgE,EAAUpF,WAAY,EAAA6Y,KAAKG,KACvD,KAIJ,YAAAuxD,sBAAA,SACEnlE,GAEA,IAAIhX,EAASK,KAAKL,OACdu8E,EAAYl8E,KAAKuzE,YAGjB+I,EAAW38E,EAAOslD,qBACpBjlD,KAAKu8E,cACHv8E,KAAK+2E,kBAAkBpgE,EAAUhC,UAAW,EAAAyV,KAAKxmB,MACjD5D,KAAK8xE,cAKL+K,GAAa,EACjB,GAAI,EAAAnzB,gBAAgB4yB,IAAa,EAAAl9C,aAAaooB,MAAO,CAEnD,GADAr9C,OAAO,EAAA6hE,kBAAkBsQ,IAAa,EAAAn9C,WAAWz4B,MAC5C,EAAAulE,iBAAiBqQ,GAAW,OAAO38E,EAAO47C,MAC/CshC,GAAa,EAIf,IAAI7mE,EAAQkmE,EAAU1R,iBAClB2R,EAAYD,EAAUjT,OAC1BjpE,KAAKuzE,YAAc4I,EACnB,IAAIpiD,EAAa,SAAW/jB,EAC5BmmE,EAAUpiD,WAAaA,EACvB,IAAI6uC,EAAgB,YAAc5yD,EAClCmmE,EAAUvT,cAAgBA,EAC1BuT,EAAUtQ,qBAAqByQ,GAC/B,IAAIlE,EAAQ,IAAI5wE,MACZmP,EAAUA,UAAUnJ,MAAQ,EAAAD,SAASoT,MACvC3gB,KAAKs4E,kBAAmC3hE,EAAUA,UAAWd,YAAY,EAAOuiE,GAEhFA,EAAM3rE,KAAKzM,KAAK86E,iBAAiBnkE,EAAUA,YAE7C,IASIimE,GATaT,EAAUz/D,GAAG,OASKy/D,EAAUz/D,GAAG,IAE5CkgE,IACF58E,KAAKy4E,oBAAoB0D,EAAW/D,GACpCA,EAAM3rE,KAAK9M,EAAOo7C,GAAG6tB,KAElBiU,GACHzE,EAAMpE,QAAQr0E,EAAOo7C,GAAGhhB,EAAYp6B,EAAOo4C,MAAM,EAAAzU,QAAQipC,OAAQ+P,KAEnE,IAAIzrE,EAAOqoE,EAAQv5E,EAAQy4E,EAAO,EAAAj5C,WAAWga,MAoB7C,OAnBIyjC,GAAgBT,EAAUv/D,MAAM,SAClC/L,EAAOlR,EAAOw7C,KAAKytB,EAAe/3D,IAE/BgsE,IAAcV,EAAUv/D,MAAM,QACjC/L,EAAOlR,EAAOi7C,MAAM7gB,EAAY,CAAElpB,KAIpCsrE,EAAUhS,mBACV+R,EAAUxR,gBACVyR,EAAU9lD,MACR,OAKEwmD,EAAYX,EAAUvR,QAAQwR,GAC7BD,EAAUtR,mBAAmBuR,GAClCn8E,KAAKuzE,YAAc2I,EACZrrE,GAMT,YAAA+tE,sBAAA,SACEjsE,EACAksE,EACAtB,GAEApzE,OAAOwI,EAAQ+J,GAAG,EAAAra,YAAYs1B,UAC9B,IAAI5oB,EAAO4D,EAAQ5D,KACnB,SACkB,EAAdwuE,IACFxuE,EAAK2N,GAAG,IACRmiE,EAAeniE,GAAG,IAClB3N,EAAK8tC,KAAOgiC,EAAehiC,MACtB78C,KAAK8xE,YAAc+M,GAAgBrxE,MACnCxN,KAAK8xE,YAAc/iE,GAAMvB,MAE9B,KAAK,EACL,KAAK,EACH,IAAIyxC,EAAQlwC,EAAKskD,yBAAyB,EAAAjpC,KAAKhnB,KAC/C,OAAOpD,KAAKL,OAAOyD,IACY,GAA7BuP,EAAQ8kB,kBACJkrB,QAAQhwC,EAAQ+kB,uBAAyBunB,GAASA,EAClD,GAGR,KAAK,EACL,KAAK,EACL,KAAK,GACH,IAAIP,EAAO/rC,EAAQ5D,KAAKwkD,wBAAwB,EAAAnpC,KAAKhnB,KACrD,OAAOpD,KAAKL,OAAOyD,IACY,GAA7BuP,EAAQ8kB,kBACJkrB,QAAQhwC,EAAQ+kB,sBAAwBgnB,EACxC,GAGR,KAAK,EACL,KAAK,EACH,OAAO1+C,KAAKL,OAAOyD,IACY,GAA7BuP,EAAQ8kB,kBACJkrB,QAAQhwC,EAAQ+kB,sBAChB,GAGR,KAAK,EACL,KAAK,EACH,IAAK/kB,EAAQsjB,QAAQ/L,QAAQY,SAC3B,OAAO9qB,KAAKL,OAAOyD,IACY,GAA7BuP,EAAQ8kB,kBACJkrB,QAAQhwC,EAAQ+kB,sBAChB,GAKV,KAAK,EACL,KAAK,EACH,OAAoC,GAA7B/kB,EAAQ8kB,kBACXz3B,KAAKL,OAAO0D,IACVs/C,QAAQhwC,EAAQ+kB,sBAChBkrB,SAASjwC,EAAQ+kB,uBAEnB13B,KAAKL,OAAO0D,IAAI,GAEtB,KAAK,GAEH,IAAMsP,EAAQkc,aAAa,EAAAhH,eAAe7K,UAAY6hE,GAAkB,EAAAz0D,KAAKvmB,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0B6O,EAASilB,oBAGxD53B,KAAK8xE,YAAc,EAAA1nD,KAAKvmB,IAE1B,KAAK,GACH,OAAO7D,KAAKL,OAAOkE,IAA0B8O,EAASilB,oBAExD,QAEE,OADAztB,QAAO,GACAnK,KAAKL,OAAO+8C,gBAKzB,YAAAq6B,kBAAA,SACExlE,EACAstE,EACAtB,GAEA,SAFA,IAAAA,MAAA,GAEOhsE,EAAW/D,MAAQ,EAAAD,SAASU,eACjCsD,EAAuCA,EAAYA,WAIrD,IAAIV,EACJ,OAHA7Q,KAAK8xE,YAAc+M,EACfA,GAAkB,EAAAz0D,KAAKG,OAAMgzD,GAAe,GAExChsE,EAAW/D,MACjB,KAAK,EAAAD,SAASO,UACZ+C,EAAO7Q,KAAK8+E,2BAAgDvtE,EAAYstE,EAAgBtB,GACxF,MAEF,KAAK,EAAAhwE,SAASgR,OACZ1N,EAAO7Q,KAAK++E,wBAA0CxtE,EAAYstE,EAAgBtB,GAClF,MAEF,KAAK,EAAAhwE,SAASQ,KACZ8C,EAAO7Q,KAAKg/E,sBAAsCztE,EAAYstE,EAAgBtB,GAC9E,MAEF,KAAK,EAAAhwE,SAASoR,MACZ9N,EAAO7Q,KAAKi/E,uBAAwC1tE,EAAYstE,EAAgBtB,GAChF,MAEF,KAAK,EAAAhwE,SAASS,cACZ6C,EAAO7Q,KAAKk/E,+BAAwD3tE,EAAYstE,EAAgBtB,GAChG,MAEF,KAAK,EAAAhwE,SAASuR,SACZjO,EAAO7Q,KAAKm/E,0BAA8C5tE,EAAYstE,EAAehsB,mBAAoB0qB,GACzG,MAEF,KAAK,EAAAhwE,SAASM,WACd,KAAK,EAAAN,SAASK,MACd,KAAK,EAAAL,SAASG,KACd,KAAK,EAAAH,SAAS+R,KACd,KAAK,EAAA/R,SAASY,MACd,KAAK,EAAAZ,SAASI,KACZkD,EAAO7Q,KAAKo/E,4BAAkD7tE,EAAYstE,EAAgBtB,GAC1F,MAEF,KAAK,EAAAhwE,SAASwR,WACZlO,EAAO7Q,KAAKq/E,4BAAkD9tE,EAAYstE,EAAgBtB,GAC1F,MAEF,KAAK,EAAAhwE,SAASE,QACZoD,EAAO7Q,KAAKs/E,yBAA4C/tE,EAAYstE,EAAgBtB,GACpF,MAEF,KAAK,EAAAhwE,SAAS0R,IACZpO,EAAO7Q,KAAKu/E,qBAAoChuE,EAAYstE,EAAgBtB,GAC5E,MAEF,KAAK,EAAAhwE,SAASW,eACZ2C,EAAO7Q,KAAKw/E,gCAA0DjuE,EAAYstE,EAAgBtB,GAClG,MAEF,KAAK,EAAAhwE,SAAS6R,QACZvO,EAAO7Q,KAAKy/E,yBAA4CluE,EAAYstE,EAAgBtB,GACpF,MAEF,KAAK,EAAAhwE,SAASiS,aACZ3O,EAAO7Q,KAAK0/E,8BAAsDnuE,EAAYstE,EAAgBtB,GAC9F,MAEF,KAAK,EAAAhwE,SAASkS,YACZ5O,EAAO7Q,KAAK2/E,6BAAoDpuE,EAAYstE,EAAgBtB,GAC5F,MAEF,QACEv9E,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEbgG,EAAO7Q,KAAKL,OAAO+8C,cAIvB,IAAIo1B,EAAc9xE,KAAK8xE,YACnB8N,EAAgD,IAA1B,EAAdrC,GAgBZ,OAfIzL,GAAe+M,IACC,EAAdtB,GACF1sE,EAAO7Q,KAAK6/E,kBAAkBhvE,EAAMihE,EAAa+M,GAAgB,EAAMe,EAAMruE,GAC7EquE,GAAO,EACP5/E,KAAK8xE,YAAc+M,GACI,EAAdtB,IACT1sE,EAAO7Q,KAAK6/E,kBAAkBhvE,EAAMihE,EAAa+M,GAAgB,EAAOe,EAAMruE,GAC9EquE,GAAO,EACP5/E,KAAK8xE,YAAc+M,IAGnBe,IAAM/uE,EAAO7Q,KAAK8/E,uBAAuBjvE,EAAMihE,IAG/C9xE,KAAKkqB,QAAQ4Q,WAAW96B,KAAK+7E,iBAAiBlrE,EAAMU,EAAW1G,OAC5DgG,GAIT,YAAAo0C,qBAAA,SACE1zC,EACAstE,EACAtB,GAEA,YAFA,IAAAA,MAAA,GAEOv9E,KAAKL,OAAOslD,qBACjBjlD,KAAK+2E,kBAAkBxlE,EAAYstE,EAAgBtB,KAIvD,YAAAsC,kBAAA,SACEhvE,EAEAq/D,EAEA1+D,EAEAuuE,EAEAH,EACA9Y,GAEA,IAAInnE,EAASK,KAAKL,OAGlB,OAAqB,IAAjBuwE,EAAS1iE,MACXrD,OAAsB,IAAfqH,EAAOhE,MACdxN,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfrB,EAAWj8D,MAAOqlE,EAASzkE,WAAY+F,EAAO/F,YAEzC9L,EAAO+8C,eAIG,IAAflrC,EAAOhE,KAA8B7N,EAAOs7C,KAAKpqC,IAEjD7Q,KAAKuzE,YAAY9H,UAAU56D,EAAMq/D,KAAWA,EAAWA,EAASpd,iBAE/Dod,EAASjzC,eAAezrB,IACtBuuE,IACC7P,EAASpd,iBAAmBthD,EAC9BxR,KAAKkN,MACH,EAAA1C,eAAew1E,wBACflZ,EAAWj8D,OAGb7K,KAAKkN,MACH,EAAA1C,eAAey1E,sDACfnZ,EAAWj8D,MAAOqlE,EAASzkE,WAAY+F,EAAO/F,aAMlDykE,EAASxzD,GAAG,GAGVlL,EAAOkL,GAAG,GACS,IAAjBwzD,EAAS1iE,KAGQ,IAAfgE,EAAOhE,OACTqD,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ48C,WAAYrvE,IAMlB,IAAfW,EAAOhE,OAChBqD,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ68C,UAAWtvE,IAMhCW,EAAOkL,GAAG,GAGE,IAAjBwzD,EAAS1iE,KACPgE,GAAU,EAAA4Y,KAAKxmB,MACjBiN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASskC,MAAO78D,EAAMlR,EAAOkE,IAAI,IACtD+7E,GAAO,GAGL/uE,EAFOW,EAAOkL,GAAG,GACflL,EAAOkL,GAAG,IACL/c,EAAOo4C,MAAM,EAAAzU,QAAQ88C,cAAevvE,GAEpClR,EAAOo4C,MAAM,EAAAzU,QAAQ+8C,cAAexvE,GAGzCW,EAAOkL,GAAG,IACL/c,EAAOo4C,MAAM,EAAAzU,QAAQg9C,cAAezvE,GAEpClR,EAAOo4C,MAAM,EAAAzU,QAAQi9C,cAAe1vE,GAM3CW,GAAU,EAAA4Y,KAAKxmB,MACjBiN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASukC,MAAO98D,EAAMlR,EAAOmE,IAAI,IACtD87E,GAAO,GAGL/uE,EAFOW,EAAOkL,GAAG,GACflL,EAAOkL,GAAG,IACL/c,EAAOo4C,MAAM,EAAAzU,QAAQk9C,cAAe3vE,GAEpClR,EAAOo4C,MAAM,EAAAzU,QAAQm9C,cAAe5vE,GAGzCW,EAAOkL,GAAG,IACL/c,EAAOo4C,MAAM,EAAAzU,QAAQo9C,cAAe7vE,GAEpClR,EAAOo4C,MAAM,EAAAzU,QAAQq9C,cAAe9vE,IAOjD1G,OAAuB,GAAhBqH,EAAO+C,MAAyB,sBACvC1D,EAAOlR,EAAOs7C,KAAKpqC,IAIZq/D,EAASxzD,GAAG,IAAsBlL,EAAOkL,GAAG,GAKjD7L,EAFe,IAAfW,EAAOhE,KACL0iE,EAASxzD,GAAG,IACP/c,EAAOo4C,MACZm4B,EAASxzD,GAAG,GACR,EAAA4mB,QAAQs9C,gBACR,EAAAt9C,QAAQu9C,gBACZhwE,GAGKlR,EAAOo4C,MACZm4B,EAASxzD,GAAG,GACR,EAAA4mB,QAAQw9C,gBACR,EAAAx9C,QAAQy9C,gBACZlwE,GAMAq/D,EAASxzD,GAAG,IACP/c,EAAOo4C,MACZm4B,EAASxzD,GAAG,GACR,EAAA4mB,QAAQ09C,gBACR,EAAA19C,QAAQ29C,gBACZpwE,GAGKlR,EAAOo4C,MACZm4B,EAASxzD,GAAG,GACR,EAAA4mB,QAAQ49C,gBACR,EAAA59C,QAAQ69C,gBACZtwE,GAQFq/D,EAASxzD,GAAG,IAGVlL,GAAU,EAAA4Y,KAAKxmB,MACjBiN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS6jC,MAAOp8D,EAAMlR,EAAO0D,IAAI,IACtDu8E,GAAO,GACGpuE,EAAOkL,GAAG,MACpB7L,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ89C,QAASvwE,IAI9BW,EAAOkL,GAAG,KACnB7L,EAAOlR,EAAOo4C,MACZm4B,EAASxzD,GAAG,GAAoB,EAAA4mB,QAAQ+9C,UAAY,EAAA/9C,QAAQg+C,UAC5DthF,KAAK8/E,uBAAuBjvE,EAAMq/D,IAEpC0P,GAAO,GAKH1P,EAASxzD,GAAG,KAEVwzD,EAASrzB,KAAOrrC,EAAOqrC,OACzBhsC,EAAO7Q,KAAK8/E,uBAAuBjvE,EAAMq/D,GACzC0P,GAAO,GAMf5/E,KAAK8xE,YAActgE,EACZouE,EACH5/E,KAAK8/E,uBAAuBjvE,EAAMW,GAClCX,IAGN,YAAAiuE,2BAAA,SACEvtE,EACAstE,EACAtB,GAEA,IAAIgE,GAAqC,EAAdhE,EAC3B,OAAQhsE,EAAWD,eACjB,KAAK,EAAAgN,cAAckjE,OACnB,KAAK,EAAAljE,cAAc03C,GACjB,IAAIx7B,EAAOx6B,KAAKuzE,YACZ/hE,EAASxR,KAAK8oB,SAAS81C,YACzBz0D,OAAOoH,EAAWC,QAClBgpB,EAAKynC,eACLznC,EAAK3B,yBAEP,OAAKrnB,EACExR,KAAK+2E,kBAAkBxlE,EAAWA,WAAYC,EAA+B,EAAvB+vE,GADzCvhF,KAAKL,OAAO+8C,cAGlC,KAAK,EAAAp+B,cAAcqmD,QACjBx6D,QAAQoH,EAAWC,QACnB,IAAIX,EAAO7Q,KAAK+2E,kBAAkBxlE,EAAWA,WAAYstE,EAAe4C,WAAYF,GAChFxyE,EAAO/O,KAAK8xE,YAChB,GAAI9xE,KAAKuzE,YAAY9H,UAAU56D,EAAM9B,GACnC/O,KAAK8M,KACH,EAAAtC,eAAek3E,yBACfnwE,EAAWA,WAAW1G,YAEnB,IAAK7K,KAAKkqB,QAAQe,SAAU,CACjC,IAAItrB,EAASK,KAAKL,OAEdgiF,GADAnnD,EAAOx6B,KAAKuzE,aACK3J,oBAAoB76D,GAAMkpB,MAC1CuC,EAAK4yC,YAAYv8D,EAAM9B,IAAOyrB,EAAKivC,aAAakY,EAAW,EAAAvZ,WAAWiF,SAC3E7yC,EAAKivC,aAAakY,EAAW,EAAAvZ,WAAWzD,SACxC9zD,EAAOlR,EAAO07C,GACZ17C,EAAO+4C,UAAUipC,EAAW9wE,GAC5BlR,EAAO64C,UAAUmpC,EAAW5yE,EAAKmlD,gBACjCv0D,EAAO+8C,eAIX,OADA18C,KAAK8xE,YAAc9xE,KAAK8xE,YAAYhf,gBAC7BjiD,EAET,QAAS1G,QAAO,GAElB,OAAOnK,KAAKL,OAAO+8C,eAQrB,YAAAqiC,wBAAA,SACExtE,EACAstE,EACAtB,GAEA,IAIIqE,EACA3c,EACA4c,EACA3c,EACAC,EAEAt0D,EAVAlR,EAASK,KAAKL,OACdiS,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnBiwE,GAAW,EAEXnwE,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAK,EAAAtE,MAAM+Z,SAKT,GAJAw6D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa4B,IAC5C,CACZ/T,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAKrB,GAFAmlC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAEhB,OAlBEklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAUIszD,EAAW33D,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASwkC,MAAOgU,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS0kC,MAAO8T,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS0kC,MACT,EAAA1kC,SAASwkC,MACbgU,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASykC,MAAO+T,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS2kC,MACT,EAAA3kC,SAASykC,MACb+T,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS2kC,MAAO6T,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS4kC,MAAO4T,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS6kC,MAAO2T,EAAUC,GAC/C,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB18C,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAEF,KAAK,EAAAyJ,MAAM6Z,YAKT,GAJA06D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAawB,IAC5C,CACZ3T,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAKrB,GAFAmlC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAEhB,OAlBEklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAUIszD,EAAW33D,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASolC,MAAOoT,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASslC,MACT,EAAAtlC,SAASolC,MACboT,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASslC,MAAOkT,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASqlC,MAAOmT,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASulC,MACT,EAAAvlC,SAASqlC,MACbmT,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASulC,MAAOiT,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASwlC,MAAOgT,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASylC,MAAO+S,EAAUC,GAC/C,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB18C,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAEF,KAAK,EAAAyJ,MAAMga,gBAKT,GAJAu6D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa6B,IAC5C,CACZhU,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAMo6D,EAASx5D,YAE5BzL,KAAKL,OAAO+8C,cAKrB,GAFAmlC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,KAAMo6D,EAASx5D,WAAYy5D,EAAUz5D,YAEzDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAEhB,OAlBEklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAUIszD,EAAW33D,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS8kC,MAAO0T,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASglC,MACT,EAAAhlC,SAAS8kC,MACb0T,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASglC,MAAOwT,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS+kC,MAAOyT,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASilC,MACT,EAAAjlC,SAAS+kC,MACbyT,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASilC,MAAOuT,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASklC,MAAOsT,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASmlC,MAAOqT,EAAUC,GAC/C,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB18C,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAEF,KAAK,EAAAyJ,MAAM8Z,mBAKT,GAJAy6D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAayB,IAC5C,CACZ5T,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAMo6D,EAASx5D,YAE5BzL,KAAKL,OAAO+8C,cAKrB,GAFAmlC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,KAAMo6D,EAASx5D,WAAYy5D,EAAUz5D,YAEzDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAEhB,OAlBEklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAUIszD,EAAW33D,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS0lC,MAAO8S,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS4lC,MACT,EAAA5lC,SAAS0lC,MACb8S,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS4lC,MAAO4S,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS2lC,MAAO6S,EAAUC,GAC/C,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS6lC,MACT,EAAA7lC,SAAS2lC,MACb6S,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS6lC,MAAO2S,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS8lC,MAAO0S,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS+lC,MAAOyS,EAAUC,GAC/C,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB18C,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAGF,KAAK,EAAAyJ,MAAMyqD,qBACX,KAAK,EAAAzqD,MAAM2Z,cAUT,GAJA46D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZngE,GAAY,EAAAtE,MAAM2Z,eAAiBhnB,KAAK8xE,YAAYp1D,GAAG,KAEzD,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAasB,IAC5C,CACZzT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAQN,GAFAswE,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,EAAAg6D,sBAAsBtzD,EAAWI,UAAWszD,EAASx5D,WAAYy5D,EAAUz5D,YAE/FzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAEhB,OAlBEklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAUIszD,EAAW33D,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASwjC,MAAOgV,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS2jC,MACT,EAAA3jC,SAASwjC,MACbgV,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS2jC,MAAO6U,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASokC,MAAOoU,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASqkC,MAAOmU,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ0+C,gBAC1BriF,EAAOu4C,OAAO,EAAA9O,SAAS64C,WAAYL,EAAUC,IAE/C,MAEF,KAAK,GAEH7hF,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEbgG,EAAOlR,EAAO+8C,cACd,MAEF,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB18C,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAEF,KAAK,EAAAyJ,MAAM0qD,0BACX,KAAK,EAAA1qD,MAAM4Z,mBAKT,GAJA26D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZngE,GAAY,EAAAtE,MAAM4Z,oBAAsBjnB,KAAK8xE,YAAYp1D,GAAG,KAE9D,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAauB,IAC5C,CACZ1T,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAQN,GAFAswE,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,EAAAg6D,sBAAsBtzD,EAAWI,UAAWszD,EAASx5D,WAAYy5D,EAAUz5D,YAE/FzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAEhB,OAlBEklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAUIszD,EAAW33D,MACjB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS4jC,MAAO4U,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS6jC,MACT,EAAA7jC,SAAS4jC,MACb4U,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS6jC,MAAO2U,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASskC,MAAOkU,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASukC,MAAOiU,EAAUC,GAC/C,MAEF,KAAK,GACHhxE,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ4+C,gBAC1BviF,EAAOu4C,OAAO,EAAA9O,SAAS+4C,WAAYP,EAAUC,IAE/C,MAEF,KAAK,GAEH7hF,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEbgG,EAAOlR,EAAO+8C,cACd,MAEF,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB18C,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAEF,KAAK,EAAAyJ,MAAM6qD,OACT,OAAOl4D,KAAKoiF,kBAAkBxwE,EAAMC,EAAOgtE,GAE7C,KAAK,EAAAxxE,MAAMqY,YAAao8D,GAAW,EACnC,KAAK,EAAAz0E,MAAM0X,KAKT,GAJA68D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaa,KAC5C,CACZhT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFD,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,OAC/C,CAGL,GAFA4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS2uC,OAAQ6J,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASi5C,OACT,EAAAj5C,SAAS2uC,OACb6J,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASi5C,OAAQT,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASk5C,OAAQV,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASm5C,OAAQX,EAAUC,GAChD,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMsY,aAAcm8D,GAAW,EACpC,KAAK,EAAAz0E,MAAM4X,MAKT,GAJA28D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAac,KAC5C,CACZjT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFD,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,gBACZ,CAGL,GAFA+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASo5C,OAAQZ,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASq5C,OACT,EAAAr5C,SAASo5C,OACbZ,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASq5C,OAAQb,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASs5C,OAAQd,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASu5C,OAAQf,EAAUC,GAChD,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMwY,gBAAiBi8D,GAAW,EACvC,KAAK,EAAAz0E,MAAMuY,SAKT,GAJAg8D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAae,KAC5C,CACZlT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFF,EAAW5hF,KAAK8/E,uBAAuB8B,EAAU3c,GACjD4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,OAC/C,CAGL,GAFA4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASgmC,OAAQwS,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASw5C,OACT,EAAAx5C,SAASgmC,OACbwS,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASw5C,OAAQhB,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASy5C,OAAQjB,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS05C,OAAQlB,EAAUC,GAChD,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAM8Y,yBAA0B27D,GAAW,EAChD,KAAK,EAAAz0E,MAAM6Y,kBAKT,GAJA07D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAagB,KAC5C,CACZnT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAMo6D,EAASx5D,YAE5BzL,KAAKL,OAAO+8C,cAGrB,IAAI,EAAauoB,EACbtsC,OAAQ,EAGZ,GAA6B,IAAzB34B,KAAK8xE,YAAYtkE,MAGnB,GAFAq0E,EAAY7hF,KAAK+2E,kBAAkBllE,EAAO,EAAAuY,KAAKvmB,IAAK,GACpDqhE,EAAYllE,KAAK8xE,cACXn5C,EAAW34B,KAAKwyE,gBAAiB,CAErC,KADIuQ,EAAY/iF,KAAKi2B,QAAQ5I,aAAa,EAAArqB,cAAc+E,QACxC,CACd/H,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,SAEpBgG,EAAOlR,EAAO+8C,cACd,MAGF,KADIz6C,EAAY8gF,EAAU1sE,QAAU0sE,EAAU1sE,QAAQnV,IAAI,EAAA8B,cAAc4F,KAAO,MAC/D,CACd5I,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,aAEpBgG,EAAOlR,EAAO+8C,cACd,MAEFvyC,OAAOlI,EAAUuL,MAAQ,EAAAoa,YAAY+I,oBACrC3wB,KAAKwyE,eAAiB75C,EAAW34B,KAAK8oB,SAAS8H,gBAAmC3uB,EAAW,YAc/F,GARA2/E,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC5hF,KAAK8xE,YAAa,EAAA1nD,KAAKtmB,KACvB,GAAO,EACP8N,GAEFqzD,EAAWjlE,KAAK8xE,YAChB+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAO,EAAAuY,KAAKtmB,IAAK,GACpDohE,EAAYllE,KAAK8xE,cACXn5C,EAAW34B,KAAKyyE,gBAAiB,CAErC,KADIsQ,EAAY/iF,KAAKi2B,QAAQ5I,aAAa,EAAArqB,cAAc8E,OACxC,CACd9H,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,QAEpBgG,EAAOlR,EAAO+8C,cACd,MAGF,KADIz6C,EAAY8gF,EAAU1sE,QAAU0sE,EAAU1sE,QAAQnV,IAAI,EAAA8B,cAAc4F,KAAO,MAC/D,CACd5I,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,YAEpBgG,EAAOlR,EAAO+8C,cACd,MAEFvyC,OAAOlI,EAAUuL,MAAQ,EAAAoa,YAAY+I,oBACrC3wB,KAAKyyE,eAAiB95C,EAAW34B,KAAK8oB,SAAS8H,gBAAmC3uB,EAAW,MAG3F02B,GAAY34B,KAAKi4E,gBAAgBt/C,IAGrC9nB,EAAO7Q,KAAKgjF,eAAerqD,EAAU,CAAEipD,EAAUC,GAAatwE,GAC1DuwE,GAAY,GAAc9hF,KAAK8xE,cAEjCjhE,EAAO7Q,KAAK6/E,kBAAkBhvE,EAAM7Q,KAAK8xE,YAAa,GAAY,GAAO,EAAOvgE,KALlFV,EAAOlR,EAAO+8C,cAQhB,MAEF,KAAK,EAAArvC,MAAM0Y,aAAc+7D,GAAW,EACpC,KAAK,EAAAz0E,MAAMyY,MAKT,GAJA87D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaiB,KAC5C,CACZpT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFF,EAAW5hF,KAAK8/E,uBAAuB8B,EAAU3c,GACjD4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,gBACZ,CAGL,GAFA+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS65C,OAAQrB,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS85C,OACT,EAAA95C,SAAS65C,OACbrB,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS85C,OAAQtB,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASqmC,OAAQmS,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS+5C,OACT,EAAA/5C,SAASqmC,OACbmS,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS+5C,OAAQvB,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASg6C,OAAQxB,EAAUC,GAChD,MAEF,KAAK,GACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASi6C,OAAQzB,EAAUC,GAChD,MAEF,QACE13E,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAM4Y,eAAgB67D,GAAW,EACtC,KAAK,EAAAz0E,MAAM2Y,QAKT,GAJA47D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,GACxC5Z,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAakB,KAC5C,CACZrT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFF,EAAW5hF,KAAK8/E,uBAAuB8B,EAAU3c,GACjD4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,gBACZ,CAGL,GAFA+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EAIL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASsmC,OAAQkS,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASk6C,OACT,EAAAl6C,SAASsmC,OACbkS,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASk6C,OAAQ1B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASumC,OAAQiS,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASm6C,OACT,EAAAn6C,SAASumC,OACbiS,EACAC,GAEF,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASm6C,OAAQ3B,EAAUC,GAChD,MAEF,KAAK,GAEH,KADIlpD,EAAW34B,KAAKsyE,gBACL,CAEb,KADIyQ,EAAY/iF,KAAKi2B,QAAQ5I,aAAa,EAAArqB,cAAc+E,QACxC,CACd/H,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,SAEpBgG,EAAOlR,EAAO+8C,cACd,MAGF,KADIz6C,EAAY8gF,EAAU1sE,QAAU0sE,EAAU1sE,QAAQnV,IAAI,EAAA8B,cAAc6F,KAAO,MAC/D,CACd7I,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,aAEpBgG,EAAOlR,EAAO+8C,cACd,MAEFvyC,OAAOlI,EAAUuL,MAAQ,EAAAoa,YAAY+I,oBACrC3wB,KAAKsyE,eAAiB35C,EAAW34B,KAAK8oB,SAAS8H,gBAAmC3uB,EAAW,MAK7F4O,EAHI8nB,GAAY34B,KAAKi4E,gBAAgBt/C,GAG9B34B,KAAKgjF,eAAerqD,EAAU,CAAEipD,EAAUC,GAAatwE,GAFvD5R,EAAO+8C,cAIhB,MAEF,KAAK,GAEH,KADI/jB,EAAW34B,KAAKuyE,gBACL,CACb,IAAIwQ,EASA9gF,EARJ,KADI8gF,EAAY/iF,KAAKi2B,QAAQ5I,aAAa,EAAArqB,cAAc8E,OACxC,CACd9H,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,QAEpBgG,EAAOlR,EAAO+8C,cACd,MAGF,KADIz6C,EAAY8gF,EAAU1sE,QAAU0sE,EAAU1sE,QAAQnV,IAAI,EAAA8B,cAAc6F,KAAO,MAC/D,CACd7I,KAAKkN,MACH,EAAA1C,eAAew1D,mBACfzuD,EAAW1G,MAAO,YAEpBgG,EAAOlR,EAAO+8C,cACd,MAEFvyC,OAAOlI,EAAUuL,MAAQ,EAAAoa,YAAY+I,oBACrC3wB,KAAKuyE,eAAiB55C,EAAW34B,KAAK8oB,SAAS8H,gBAAmC3uB,EAAW,MAK7F4O,EAHI8nB,GAAY34B,KAAKi4E,gBAAgBt/C,GAG9B34B,KAAKgjF,eAAerqD,EAAU,CAAEipD,EAAUC,GAAatwE,GAFvD5R,EAAO+8C,cAIhB,MAEF,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMsZ,yBAA0Bm7D,GAAW,EAChD,KAAK,EAAAz0E,MAAMqZ,kBAKT,GAJAk7D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe7Z,SACvDC,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa8B,aAC5C,CACZjU,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAMo6D,EAASx5D,YAE5BzL,KAAKL,OAAO+8C,cAKrB,OAFAmlC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,YACT9xE,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASkmC,OAAQsS,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASo6C,OAAQ5B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASo6C,OACT,EAAAp6C,SAASkmC,OACbsS,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJA7hF,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAEpC9L,EAAO+8C,cAEhB,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMwZ,+BAAgCi7D,GAAW,EACtD,KAAK,EAAAz0E,MAAMuZ,wBAKT,GAJAg7D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe7Z,SACvDC,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa0B,aAC5C,CACZ7T,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAMo6D,EAASx5D,YAE5BzL,KAAKL,OAAO+8C,cAMrB,OAHAklC,EAAW5hF,KAAK8/E,uBAAuB8B,EAAU3c,GACjD4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,YACT9xE,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EAIL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASmmC,OAAQqS,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASq6C,OAAQ7B,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASq6C,OACT,EAAAr6C,SAASmmC,OACbqS,EACAC,GAEF,MAEF,KAAK,EACL,KAAK,EACL,KAAK,GAIL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASomC,OAAQoS,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASs6C,OAAQ9B,EAAUC,GAChD,MAEF,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASs6C,OACT,EAAAt6C,SAASomC,OACboS,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJA7hF,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAEpC9L,EAAO+8C,cAEhB,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAM0Z,2CAA4C+6D,GAAW,EAClE,KAAK,EAAAz0E,MAAMyZ,oCAKT,GAJA86D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe7Z,SACvDC,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa2B,eAC5C,CACZ9T,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,MAAOo6D,EAASx5D,YAE7BzL,KAAKL,OAAO+8C,cAMrB,OAHAklC,EAAW5hF,KAAK8/E,uBAAuB8B,EAAU3c,GACjD4c,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,YACT9xE,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASomC,OAAQoS,EAAUC,GAElD,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASomC,OAAQoS,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASs6C,OAAQ9B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASs6C,OACT,EAAAt6C,SAASomC,OACboS,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJA7hF,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,MAAO7K,KAAK8xE,YAAYrmE,YAErC9L,EAAO+8C,cAEhB,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMgZ,iBAAkBy7D,GAAW,EACxC,KAAK,EAAAz0E,MAAM+Y,UAKT,GAJAw7D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe7Z,SACvDC,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAamB,aAC5C,CACZtT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFD,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,gBACZ,CAGL,GAFA+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,EACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASimC,OAAQuS,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASu6C,OAAQ/B,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASu6C,OACT,EAAAv6C,SAASimC,OACbuS,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJA7hF,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAEnC9L,EAAO+8C,cAEhB,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMkZ,WAAYu7D,GAAW,EAClC,KAAK,EAAAz0E,MAAMiZ,IAKT,GAJAs7D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe7Z,SACvDC,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaoB,YAC5C,CACZvT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFD,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,gBACZ,CAGL,GAFA+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASw6C,MAAOhC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASw6C,MAAOhC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASy6C,MAAOjC,EAAUC,GAC/C,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASy6C,MACT,EAAAz6C,SAASw6C,MACbhC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJA7hF,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAEnC9L,EAAO+8C,cAEhB,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMoZ,aAAcq7D,GAAW,EACpC,KAAK,EAAAz0E,MAAMmZ,MAKT,GAJAo7D,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe7Z,SACvDC,EAAWjlE,KAAK8xE,YAGZ9xE,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAC5C,IAAI6U,EAEE8L,EADN,GADI9L,EAAiB0zC,EAAS1zC,eAG5B,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaqB,aAC5C,CACZxT,EAAO7Q,KAAK+hF,sBAAsB1kD,EAAUzrB,EAAMgwE,EAAU/vE,EAAON,GACnE,MAOJ,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAKo6D,EAASx5D,YAE3BzL,KAAKL,OAAO+8C,cAGrB,GAAIolC,EACFD,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAU,GACpDC,EAAYllE,KAAK8xE,gBACZ,CAGL,GAFA+P,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,GAC1CC,EAAYllE,KAAK8xE,cACb3M,EAAa,EAAA/6C,KAAK4pC,kBAAkBiR,EAAUC,GAAW,IAiB3D,OALAllE,KAAKkN,MACH,EAAA1C,eAAe46D,8CACf7zD,EAAW1G,MAAO,IAAKo6D,EAASx5D,WAAYy5D,EAAUz5D,YAExDzL,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,cAhBdklC,EAAW5hF,KAAK6/E,kBAAkB+B,EAChC3c,EAAUA,EAAWE,GACrB,GAAO,EACPvzD,GAEFiwE,EAAY7hF,KAAK6/E,kBAAkBgC,EACjC3c,EAAWA,EAAYC,GACvB,GAAO,EACPtzD,GAWN,OAAQ7R,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS06C,OAAQlC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS06C,OAAQlC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS26C,OAAQnC,EAAUC,GAChD,MAEF,KAAK,EACL,KAAK,EACHhxE,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS26C,OACT,EAAA36C,SAAS06C,OACblC,EACAC,GAEF,MAEF,KAAK,GACL,KAAK,GAKH,OAJA7hF,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAEnC9L,EAAO+8C,cAEhB,QACEvyC,QAAO,GACP0G,EAAOlR,EAAO+8C,cAGlB,MAKF,KAAK,EAAArvC,MAAM2qD,oBACT,IAAIx9B,EAAOx6B,KAAKuzE,YACZgO,EAAqC,GAAdhE,EAC3BqE,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe4C,WAAYF,GACnEtc,EAAWjlE,KAAK8xE,YAEhB,IAAIkS,EAAYxpD,EAAKyuC,OAOrB,GANAjpE,KAAKuzE,YAAcyQ,EACnBA,EAAUnY,qBAAqB+V,GAC/BC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAiC,EAAvBsc,GACpDrc,EAAYD,EAGR4Z,GAAkB,EAAAz0D,KAAKxmB,MAAQi7E,GAAkB,EAAAz0D,KAAKG,KACxDs3D,EAAY7hF,KAAKikF,6BAA6BD,EAAWnC,EAAW3c,GACpE8e,EAAU7Z,mBACVnqE,KAAKuzE,YAAc/4C,EACnBx6B,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxBiN,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAcqF,EAAU3c,GAC7BjlE,KAAKu8E,cAAcsF,EAAW3c,GAC9BvlE,EAAOyD,IAAI,SAIR,GAAI6hE,EAASuQ,UAAW,CAC7B,IAAI0O,EAAyBlkF,KAAKqyE,oBAAoBroD,IAAI43D,GACtDuC,EAA0BnkF,KAAKqyE,oBAAoBroD,IAAI63D,GACvDlJ,EAAOn+C,EAAK4uC,aAAanE,GAC7B2c,EAAWjiF,EAAO+4C,UAAUigC,EAAK1gD,MAAO2pD,GAIxC,IAAIwC,GAAmB,EACnBF,GAA0BC,EACvBD,GAGHrC,EAAY7hF,KAAKy1E,WAAWoM,GAC5BsC,GAA0B,GAH1BC,GAAmB,EAKI,GAAd7G,IACXsE,EAAY7hF,KAAKqkF,gBAAgBxC,EAAWmC,EAAWxpD,IAGzD,IAAI8pD,EAAa,IAAI98E,MACjB08E,GACFI,EAAWtQ,QACTh0E,KAAKukF,YACH5kF,EAAO64C,UAAUmgC,EAAK1gD,MAAOgtC,EAAS/Q,kBAI5C2tB,EAAY7hF,KAAKikF,6BAA6BD,EAAWnC,EAAW3c,EAAWof,GAC/EN,EAAU7Z,mBACVnqE,KAAKuzE,YAAc/4C,EAEnB3pB,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAcqF,EAAU3c,GAC7B4c,EACAuC,EACIpkF,KAAKy1E,WACH91E,EAAO64C,UAAUmgC,EAAK1gD,MAAOgtC,EAAS/Q,iBAExCv0D,EAAO64C,UAAUmgC,EAAK1gD,MAAOgtC,EAAS/Q,kBAExCgwB,GAA0BC,IAAyBnkF,KAAKqyE,oBAAoB7nD,IAAI3Z,GAChF8nE,GAAMn+C,EAAKmvC,cAAcgP,QAS7B,GALAkJ,EAAY7hF,KAAKikF,6BAA6BD,EAAWnC,EAAW3c,GACpE8e,EAAU7Z,mBACVnqE,KAAKuzE,YAAc/4C,EAGf3pB,EAAOlR,EAAOunD,gBAAgB06B,GAAU,EAAM,GAChD/wE,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAcqF,EAAU5hF,KAAK8xE,aAClC+P,EACAhxE,OAIG,CACL,IAAI8sE,EAAYnjD,EAAK4uC,aAAanE,GAC7BzqC,EAAK4yC,YAAYwU,EAAU3c,IAAWzqC,EAAKivC,aAAakU,EAAU1lD,MAAO,EAAAmwC,WAAWiF,SACrF7yC,EAAKixC,UAAUmW,EAAU3c,IAAWzqC,EAAKivC,aAAakU,EAAU1lD,MAAO,EAAAmwC,WAAWzD,SACtF9zD,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAc58E,EAAO+4C,UAAUilC,EAAU1lD,MAAO2pD,GAAW3c,GAChE4c,EACAliF,EAAO64C,UAAUmlC,EAAU1lD,MAAOgtC,EAAS/Q,iBAIjDl0D,KAAK8xE,YAAc7M,EACnB,MAEF,KAAK,EAAA53D,MAAM4qD,QACLz9B,EAAOx6B,KAAKuzE,YACZgO,EAAqC,GAAdhE,EAC3BqE,EAAW5hF,KAAK+2E,kBAAkBnlE,EAAMitE,EAAe4C,WAAYF,GACnEtc,EAAWjlE,KAAK8xE,YAEZkS,EAAYxpD,EAAKyuC,OAOrB,GANAjpE,KAAKuzE,YAAcyQ,EACnBA,EAAUvX,sBAAsBmV,GAChCC,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOozD,EAAiC,EAAvBsc,GACpDrc,EAAYD,EAGR4Z,GAAkB,EAAAz0D,KAAKxmB,MAAQi7E,GAAkB,EAAAz0D,KAAKG,KACxDs3D,EAAY7hF,KAAKikF,6BAA6BD,EAAWnC,EAAW5c,GACpE+e,EAAU7Z,mBACVnqE,KAAKuzE,YAAc/4C,EACnBx6B,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxBiN,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAcqF,EAAU3c,GAC7BtlE,EAAOyD,IAAI,GACXpD,KAAKu8E,cAAcsF,EAAW3c,SAI3B,GAAID,EAASuQ,UAAW,CACzB0O,EAAyBlkF,KAAKqyE,oBAAoBroD,IAAI43D,GACtDuC,EAA0BnkF,KAAKqyE,oBAAoBroD,IAAI63D,GACvDlJ,EAAOn+C,EAAK4uC,aAAanE,GAC7B2c,EAAWjiF,EAAO+4C,UAAUigC,EAAK1gD,MAAO2pD,GAIxC,IAAI4C,GAAmB,EACnBN,GAA0BC,EACvBD,GAGHrC,EAAY7hF,KAAKy1E,WAAWoM,GAC5BsC,GAA0B,GAH1BK,GAAmB,EAKI,GAAdjH,IACXsE,EAAY7hF,KAAKqkF,gBAAgBxC,EAAWmC,EAAWxpD,IAGrD8pD,EAAa,IAAI98E,MACjB08E,GAGFI,EAAWtQ,QACTh0E,KAAKukF,YACH5kF,EAAO64C,UAAUmgC,EAAK1gD,MAAOgtC,EAAS/Q,kBAI5C2tB,EAAY7hF,KAAKikF,6BAA6BD,EAAWnC,EAAW3c,EAAWof,GAC/EN,EAAU7Z,mBACVnqE,KAAKuzE,YAAc/4C,EAEnB3pB,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAcqF,EAAU3c,GAC7Buf,EACIxkF,KAAKy1E,WACH91E,EAAO64C,UAAUmgC,EAAK1gD,MAAOgtC,EAAS/Q,iBAExCv0D,EAAO64C,UAAUmgC,EAAK1gD,MAAOgtC,EAAS/Q,gBAC1C2tB,IAEEqC,GAA0BC,IAAyBnkF,KAAKqyE,oBAAoB7nD,IAAI3Z,GAChF8nE,GAAMn+C,EAAKmvC,cAAcgP,QAS7B,GALAkJ,EAAY7hF,KAAKikF,6BAA6BD,EAAWnC,EAAW3c,GACpE8e,EAAU7Z,mBACVnqE,KAAKuzE,YAAc/4C,EAGf3pB,EAAOlR,EAAOunD,gBAAgB06B,GAAU,EAAM,GAChD/wE,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAcqF,EAAU3c,GAC7Bp0D,EACAgxE,OAIG,CACDlE,EAAYnjD,EAAKovC,oBAAoB3E,GACpCzqC,EAAK4yC,YAAYwU,EAAU3c,IAAWzqC,EAAKivC,aAAakU,EAAU1lD,MAAO,EAAAmwC,WAAWiF,SACrF7yC,EAAKixC,UAAUmW,EAAU3c,IAAWzqC,EAAKivC,aAAakU,EAAU1lD,MAAO,EAAAmwC,WAAWzD,SACtF9zD,EAAOlR,EAAO07C,GACZr7C,KAAKu8E,cAAc58E,EAAO+4C,UAAUilC,EAAU1lD,MAAO2pD,GAAW3c,GAChEtlE,EAAO64C,UAAUmlC,EAAU1lD,MAAOgtC,EAAS/Q,gBAC3C2tB,GAIN7hF,KAAK8xE,YAAc7M,EACnB,MAEF,QACE96D,QAAO,GACP0G,EAAO7Q,KAAKL,OAAO+8C,cAGvB,IAAKolC,EAAU,OAAOjxE,EACtB,IAAIiY,EAAW9oB,KAAK8oB,SAChBoU,EAASpU,EAASy4C,iBAAiB3vD,EAAM5R,KAAKuzE,aAClD,IAAKr2C,EAAQ,OAAOv9B,EAAO+8C,cAC3B,IAAI4W,EAAaxqC,EAASo4C,iBAAiBhkC,IAAW,EAAA9S,KAAKG,KAC3D,OAAKvqB,KAAK8xE,YAAY/d,uBAAuBT,GAOtCtzD,KAAKykF,eACVvnD,EACArsB,EACAe,EACAkX,EAAS41C,sBACT51C,EAAS61C,yBACTkgB,GAAkB,EAAAz0D,KAAKG,OAZvBvqB,KAAKkN,MACH,EAAA1C,eAAe29D,mCACf52D,EAAW1G,MAAO7K,KAAK8xE,YAAYrmE,WAAY6nD,EAAW7nD,YAErD9L,EAAO+8C,gBAYlB,YAAAgoC,qBAAA,SACExc,EACA5mE,EACAs0E,EACA9O,GAIA,OAAO9mE,KAAKgjF,eAAe9a,EAAkB,CAAE0N,GAAa9O,GAAY,IAG1E,YAAAib,sBAAA,SACE7Z,EACAt2D,EACAgwE,EACA/vE,EACAi1D,GAEA,IAAI5B,EACJ,GAAIgD,EAAiBxrD,GAAG,EAAAra,YAAYqzB,UAAW,CAC7C,IAAIvM,EAAgBhf,OAAO+9D,EAAiBroD,QAAS1V,OAAOgf,EAAc3b,MAAQ,EAAAoa,YAAYlJ,OAC9FwmD,EAAYgD,EAAiBtuD,UAAUwgB,eAAe,QAUtD8qC,EAAYgD,EAAiBtuD,UAAUwgB,eAAe,GAExD,IAAIynD,EAAY7hF,KAAK+2E,kBAAkBllE,EAAOqzD,EAAW,GACzD,OAAOllE,KAAKgjF,eAAe9a,EAAkB,CAAE0Z,EAAUC,GAAa/a,IAGxE,YAAAsb,kBAAA,SAAkB7wE,EAAwB+rE,EAA6BuB,GACrE,IACI/1D,EADU9oB,KAAKi2B,QACInN,SACnB0R,EAAOx6B,KAAKuzE,YACZr2C,EAASpU,EAASy4C,iBAAiBhwD,EAAYipB,GACnD,IAAK0C,EAAQ,OAAOl9B,KAAKL,OAAO+8C,cAChC,IAII4W,EAJAqxB,EAAiB77D,EAAS41C,sBAC1B7rD,EAAoBiW,EAAS61C,yBAIjC,OAAQzhC,EAAO1vB,MACb,KAAK,EAAAoa,YAAY1K,OAEf,IAAKld,KAAKg2E,cAAsB94C,GAAS,OAAOl9B,KAAKL,OAAO+8C,cAG9D,KAAK,EAAA90B,YAAYsQ,MACjB,KAAK,EAAAtQ,YAAYwJ,MACfkiC,EAAmCp2B,EAAQnuB,KACvCmuB,EAAOrO,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GACjE,MAEF,KAAK,EAAAqW,YAAYoJ,mBACf,IAAIE,EAAsCgM,EAAQhM,gBAClD,IAAKA,EAKH,OAJAlxB,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACftzE,EAAW1G,MAAkBqyB,EAAQrU,cAEhC7oB,KAAKL,OAAO+8C,cAGrB,KADI/gB,EAAiB37B,KAAK8oB,SAAS8H,gBAAgBM,EAAiB,KAAM,EAAAuuC,UAAW,EAAAhB,WAAWO,SAC3E,OAAOh/D,KAAKL,OAAO+8C,cACxCvyC,OAAyD,GAAlDwxB,EAAe/hB,UAAUwgB,eAAeluB,QAC/ConD,EAAa33B,EAAe/hB,UAAUwgB,eAAe,GACjDlJ,EAAgBrC,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GAC1E,MAEF,KAAK,EAAAqW,YAAYuJ,SACf,IAAIwK,EACJ,KADIA,EAA4BuB,EAAQvB,gBAMtC,OAJA37B,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACftzE,EAAW1G,MAAkBqyB,EAAQrU,cAEhC7oB,KAAKL,OAAO+8C,cAErBvyC,OAAyD,GAAlDwxB,EAAe/hB,UAAUwgB,eAAeluB,QAC/ConD,EAAa33B,EAAe/hB,UAAUwgB,eAAe,GACjDuB,EAAe9M,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GACzE,MAEF,KAAK,EAAAqW,YAAYlJ,MACf,GAAI7L,EAAmB,CACrB,IAAIiyE,EAActqD,EAAK9d,GAAG,OActBqoE,EAAqB7nD,EAAQF,eAAe,EAAAha,aAAaU,YAAaohE,GAC1E,IAAKC,EAaH,OAZyB7nD,EAAQF,eAAe,EAAAha,aAAaS,YAAaqhE,GAOxE9kF,KAAKkN,MACH,EAAA1C,eAAew6E,+CACfzzE,EAAW1G,MAAeqyB,EAAQrU,cAPpC7oB,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfnvD,EAAW1G,MAAeqyB,EAAQrU,cAQ/B7oB,KAAKL,OAAO+8C,cAErBvyC,OAAqD,GAA9C46E,EAAWnrE,UAAUwgB,eAAeluB,QAC3ConD,EAAayxB,EAAWnrE,UAAUwgB,eAAe,GAC7C2qD,EAAWl2D,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GACrE,MAIJ,QAKE,OAJAvR,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEN7K,KAAKL,OAAO+8C,cAMvB,OADAvyC,OAAOmpD,GAAc,EAAAlpC,KAAKG,MACnBvqB,KAAKykF,eACVvnD,EACAl9B,KAAK+2E,kBAAkBuG,EAAiBhqB,EAAY,IACpD/hD,EACAozE,EACA9xE,EACAgsE,GAAkB,EAAAz0D,KAAKG,OAK3B,YAAAk6D,eAAA,SAEEvnD,EAEA04C,EAEA0H,EAEAqH,EAEAM,EAEAC,GAEA,IAAIvlF,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YAKhB,OAAQr2C,EAAO1vB,MACb,KAAK,EAAAoa,YAAYsQ,MACf,OAAIsC,EAAK6vC,YAAoBntC,EAAQjF,MAAO,EAAAmwC,WAAWuW,UAAU,IAC/D3+E,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACfvH,EAAgBzyE,MAAOqyB,EAAOrU,cAEhC7oB,KAAK8xE,YAAcoT,EAAchoD,EAAQnuB,KAAO,EAAAqb,KAAKG,KAC9C5qB,EAAO+8C,eAET18C,KAAKmlF,oBAA2BjoD,EAAQ04C,EAAWsP,GAE5D,KAAK,EAAAt9D,YAAY1K,OACf,OAAKld,KAAKg2E,cAAsB94C,GAC5BA,EAAOtgB,MAAM,EAAAva,YAAYuvB,MAAQ,EAAAvvB,YAAYqxB,WAC/C1zB,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACfvH,EAAgBzyE,MAChBqyB,EAAOrU,cAET7oB,KAAK8xE,YAAcoT,EAAehoD,EAAQnuB,KAAO,EAAAqb,KAAKG,KAC/C5qB,EAAO+8C,eAET18C,KAAKg4E,qBAA6B96C,EAAQ04C,EAAWsP,GAVZvlF,EAAO+8C,cAYzD,KAAK,EAAA90B,YAAYwJ,MACf,IAAI0lD,EAA0B55C,EAAQ45C,gBACtC,OACU55C,EAAQxgB,GAAG,EAAAra,YAAYqxB,WAE7B8G,EAAKynC,eAAevlD,GAAG,EAAAra,YAAYuc,cACnCk4D,EASG92E,KAAKolF,oBAA2BloD,EACrC04C,EAEA51E,KAAK+2E,kBAAkB5sE,OAAOw6E,GAAiB3kF,KAAKkqB,QAAQI,WAC5D46D,IAVAllF,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACfvH,EAAgBzyE,MAAeqyB,EAAQrU,cAElClpB,EAAO+8C,eASlB,KAAK,EAAA90B,YAAYoJ,mBACXhxB,KAAKqyE,oBAAoBroD,IAAI4rD,KAAYA,EAAY51E,KAAKqlF,gBAAgBzP,EAAWp7C,IACzF,IAAItJ,EAAsCgM,EAAQhM,gBAClD,IAAKA,EAKH,OAJAlxB,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACfvH,EAAgBzyE,MAAOqyB,EAAOrU,cAEzBlpB,EAAO+8C,cAGhB,KADI/gB,EAAiB37B,KAAK8oB,SAAS8H,gBAAgBM,EAAiB,KAAM,EAAAuuC,UAAW,EAAAhB,WAAWO,SAC3E,OAAOr/D,EAAO+8C,cAEnC,IAAKwoC,EAAK,OAAOllF,KAAKgjF,eAAernD,EAAgB,CAAEi6C,GAAa0H,GAEpE,IAAIrsD,EAAkB9mB,OAA2B+yB,EAAQjM,iBAEzD,KADIyK,EAAiB17B,KAAK8oB,SAAS8H,gBAAgBK,EAAiB,KAAM,EAAAwuC,UAAW,EAAAhB,WAAWO,SAC3E,OAAOr/D,EAAO+8C,cACnC,IACI4oC,GADAn2E,EAAausB,EAAe9hB,UAAUzK,YACR+kD,eAClC,OAAOv0D,EAAOi7C,MAAM,KAAM,CACxB56C,KAAKgjF,eAAernD,EAAgB,CAAEi6C,GAAa0H,GACnDt9E,KAAKgjF,eAAetnD,EAAgB,KAAM4hD,IACzCgI,GAEL,KAAK,EAAA19D,YAAYuJ,SAEf,IAAIwK,EACJ,GAFI37B,KAAKqyE,oBAAoBroD,IAAI4rD,KAAYA,EAAY51E,KAAKqlF,gBAAgBzP,EAAWp7C,MACrFmB,EAA4BuB,EAAQvB,gBAMtC,OAJA37B,KAAKkN,MACH,EAAA1C,eAAeq6E,oEACfvH,EAAgBzyE,MAAOqyB,EAAOrU,cAEzBlpB,EAAO+8C,cAGhB,IAAKwoC,EAAK,CACR,IAAI,EAAWllF,KAAK+2E,kBAAkB5sE,OAAOw6E,GAAiB3kF,KAAKkqB,QAAQI,WAC3E,OAAOtqB,KAAKgjF,eAAernD,EAAgB,CAAE,EAAUi6C,GAAa0H,GAKlEgI,GADAn2E,GADAusB,EAAiBvxB,OAAkB+yB,EAAQxB,iBACf9hB,UAAUzK,YACR+kD,eAFlC,IAAIx4B,EAGA6pD,EAAWvlF,KAAK+2E,kBAAkB5sE,OAAOw6E,GAAiB3kF,KAAKkqB,QAAQI,WAEvEszD,EADYpjD,EAAKovC,oBAAoBz6D,GACV8oB,MAC/B,OAAOt4B,EAAOi7C,MAAM,KAAM,CACxB56C,KAAKgjF,eAAernD,EAAgB,CAClCh8B,EAAO+4C,UAAUklC,EAAgB2H,GACjC3P,GACC0H,GACHt9E,KAAKgjF,eAAetnD,EAAgB,CAClC/7B,EAAO64C,UAAUolC,EAAgB0H,IAChChI,IACFgI,GAEL,KAAK,EAAA19D,YAAYlJ,MAEf,GADI1e,KAAKqyE,oBAAoBroD,IAAI4rD,KAAYA,EAAY51E,KAAKqlF,gBAAgBzP,EAAWp7C,IACrFyqD,EAAiB,CACnB,IAAIH,EAActqD,EAAK9d,GAAG,OACtBonD,EAAqB5mC,EAAQF,eAAe,EAAAha,aAAaS,YAAaqhE,GAC1E,IAAKhhB,EAKH,OAJA9jE,KAAKkN,MACH,EAAA1C,eAAek2D,qCACf4c,EAAgBzyE,MAAOqyB,EAAOrU,cAEzBlpB,EAAO+8C,cAEhB,IAAIqoC,EAAqB7nD,EAAQF,eAAe,EAAAha,aAAaU,YAAaohE,GAC1E,IAAKC,EAMH,OALA/kF,KAAKkN,MACH,EAAA1C,eAAew6E,+CACf1H,EAAgBzyE,MAAOqyB,EAAOrU,cAEhC7oB,KAAK8xE,YAAcoT,EAAMphB,EAAWlqD,UAAUzK,WAAa,EAAAib,KAAKG,KACzD5qB,EAAO+8C,cAEhB,IAAI4W,EAAqBp2B,EAAQnuB,KAE7By2E,GADAD,EAAWvlF,KAAK+2E,kBAAkB5sE,OAAOw6E,GAAiB3kF,KAAKkqB,QAAQI,WACzDtqB,KAAK+2E,kBAAkBkO,EAAiB,EAAA76D,KAAKhnB,IAAK,IACpE,GAAI8hF,EAAK,CACP,IAAIO,EAAkBjrD,EAAK4uC,aAAa9V,GACpCoyB,EAAmBlrD,EAAKovC,oBAAoB5pE,KAAK8xE,aACjD3iE,EAAa20D,EAAWlqD,UAAUzK,WAEtC,OADAqrB,EAAKmvC,cAAc8b,GACZ9lF,EAAOi7C,MAAM,KAAM,CACxB56C,KAAKgjF,eAAe+B,EAAY,CAC9BplF,EAAO+4C,UAAU+sC,EAAgBxtD,MAAOstD,GACxC5lF,EAAO+4C,UAAUgtC,EAAiBztD,MAAOutD,GACzC5P,GACC0H,GACHt9E,KAAKgjF,eAAelf,EAAY,CAC9BnkE,EAAO64C,UAAUitC,EAAgBxtD,MAAOwtD,EAAgB12E,KAAKmlD,gBAC7Dv0D,EAAO64C,UAAUktC,EAAiBztD,MAAOytD,EAAiB32E,KAAKmlD,iBAC9DopB,IACFnuE,EAAW+kD,gBAEd,OAAOl0D,KAAKgjF,eAAe+B,EAAY,CACrCQ,EACAC,EACA5P,GACC0H,IAUX,OAJAt9E,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfsqD,EAAgBzyE,OAEXlL,EAAO+8C,eAIR,YAAAyoC,oBAAR,SAEEjrD,EAEA07C,EAEAsP,GAEA,IAAIn2E,EAAOmrB,EAAMnrB,KACjB5E,OAAO4E,GAAQ,EAAAqb,KAAKG,MACpB,IAAIiQ,EAAOx6B,KAAKuzE,YACZt5C,EAAaC,EAAMjC,MAQvB,GANIlpB,EAAK2N,GAAG,OACN8d,EAAKixC,UAAUmK,EAAW7mE,GAAOyrB,EAAKivC,aAAaxvC,EAAY,EAAAmuC,WAAWzD,SACzEnqC,EAAK8uC,eAAervC,EAAY,EAAAmuC,WAAWzD,UAElDnqC,EAAKivC,aAAaxvC,EAAY,EAAAmuC,WAAW4C,WAErCj8D,EAAKymE,UAAW,CAClB,IAAI71E,EAASK,KAAKL,OACd+1E,EAAa3mE,EAAKmlD,eAEtB,OAAI15B,EAAK+vC,eAAetwC,EAAY,EAAAmuC,WAAWoV,cACzCx9E,KAAKqyE,oBAAoBroD,IAAI4rD,IAC/BA,EAAY51E,KAAK2lF,mBACfhmF,EAAO64C,UAAUve,EAAYy7C,GAC7BE,GAEEsP,GACFllF,KAAK8xE,YAAc/iE,EACZpP,EAAO+4C,UAAUze,EAAY27C,KAEpC51E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO66C,UAAUvgB,EAAY27C,MAGtCA,EAAY51E,KAAK61E,kBACfl2E,EAAO64C,UAAUve,EAAYy7C,GAC7BE,GAEEsP,GACFllF,KAAK8xE,YAAc/iE,EACZpP,EAAO+4C,UAAUze,EAAY27C,KAEpC51E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO66C,UAAUvgB,EAAY27C,MAIxCp7C,EAAK8uC,eAAervC,EAAY,EAAAmuC,WAAWyC,wBAC3CrwC,EAAKivC,aAAaxvC,EAAY,EAAAmuC,WAAWsB,UACpC1pE,KAAKqyE,oBAAoBroD,IAAI4rD,KAAYA,EAAY51E,KAAKy1E,WAAWG,IACtEsP,GACFllF,KAAK8xE,YAAc/iE,EACZpP,EAAO+4C,UAAUze,EAAY27C,KAEpC51E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO66C,UAAUvgB,EAAY27C,KAQxC,OAJI7mE,EAAK2N,GAAG,MACL8d,EAAK4yC,YAAYwI,EAAW7mE,GAC5ByrB,EAAK8uC,eAAervC,EAAY,EAAAmuC,WAAWiF,SADR7yC,EAAKivC,aAAaxvC,EAAY,EAAAmuC,WAAWiF,UAG/E6X,GACFllF,KAAK8xE,YAAc/iE,EACZ/O,KAAKL,OAAO+4C,UAAUze,EAAY27C,KAEzC51E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjBvqB,KAAKL,OAAO66C,UAAUvgB,EAAY27C,KAMvC,YAAAoC,qBAAR,SAEEtmD,EAEAkkD,EAEAsP,GAEA,IAAIvlF,EAASK,KAAKL,OACdoP,EAAO2iB,EAAO3iB,KAClB5E,OAAO4E,GAAQ,EAAAqb,KAAKG,MACpB,IAAImrD,EAAa3mE,EAAKmlD,eAEtB,OAAInlD,EAAKymE,UACHx1E,KAAKqyE,oBAAoBroD,IAAI4rD,GAC3BsP,GACFllF,KAAK8xE,YAAc/iE,EACZpP,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO+6C,WAAWhpB,EAAO7I,aACvB7oB,KAAK2lF,mBACHhmF,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,GACvCE,IAGJj2E,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,IACtCA,KAEH11E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO+6C,WAAWhpB,EAAO7I,aAC9B7oB,KAAK2lF,mBACHhmF,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,GACvCE,KAKFsP,GACFllF,KAAK8xE,YAAc/iE,EACZpP,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO+6C,WAAWhpB,EAAO7I,aACvB7oB,KAAK61E,kBACHl2E,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,GACvCE,IAGJj2E,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,IACtCA,KAEH11E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO+6C,WAAWhpB,EAAO7I,aAC9B7oB,KAAK61E,kBACHl2E,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,GACvCE,MAMRA,EAAY51E,KAAK8/E,uBAAuBlK,EAAW7mE,GAC/Cm2E,GACFllF,KAAK8xE,YAAc/iE,EACZpP,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO+6C,WAAWhpB,EAAO7I,aAAc+sD,GACvCj2E,EAAOi5C,WAAWlnB,EAAO7I,aAAc6sD,IACtCA,KAEH11E,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAO+6C,WAAWhpB,EAAO7I,aAC9B+sD,MAOR,YAAAwP,oBAAA,SAEE5nD,EAEAo4C,EAEA2P,EAEAL,GAEA,IAAIvlF,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACZ/L,EAAYhqC,EAAMzuB,KAClB62E,EAAkBpe,EAAUtT,eAChC/pD,OAAOqzB,EAAM3d,OAAOrS,MAAQ,EAAAoa,YAAYlJ,OACxC,IAAIyb,EAAmBqD,EAAM3d,OAAQ9Q,KACjC82E,EAAiB1rD,EAAS+5B,eAE9B,GAAIsT,EAAUgO,WAAar7C,EAASq7C,UAAW,CAC7C,IAAIsQ,EAAWtrD,EAAK4uC,aAAajvC,GACjC,GAAIn6B,KAAKqyE,oBAAoBroD,IAAI4rD,GAAY,CAC3C,GAAIsP,EAAK,CACP,IAAIa,EAAYvrD,EAAKovC,oBAAoBpC,GAKzC,OAJKhtC,EAAK4yC,YAAYwI,EAAWpO,IAAYhtC,EAAKivC,aAAasc,EAAU9tD,MAAO,EAAAmwC,WAAWiF,SACvF7yC,EAAKixC,UAAUmK,EAAWpO,IAAYhtC,EAAKivC,aAAasc,EAAU9tD,MAAO,EAAAmwC,WAAWzD,SACxFnqC,EAAKmvC,cAAcmc,GACnB9lF,KAAK8xE,YAActK,EACZ7nE,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAOk4C,MAAM2vB,EAAU7U,SACrBhzD,EAAO+4C,UAAUotC,EAAS7tD,MAAOstD,GACjCvlF,KAAK2lF,mBACHhmF,EAAOm5C,KAAK0uB,EAAU7U,SAAU6U,EAAU9qD,GAAG,GAC3C/c,EAAO64C,UAAUstC,EAAS7tD,MAAO4tD,GACjCD,EAAiBpoD,EAAMjC,cAEzB57B,EAAO+4C,UAAUqtC,EAAU9tD,MAAO29C,IAEpCgQ,EAAiBpoD,EAAMjC,cAEzB57B,EAAO64C,UAAUutC,EAAU9tD,MAAO2tD,IACjCA,GAIH,OAFAprD,EAAKmvC,cAAcmc,GACnB9lF,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAOk4C,MAAM2vB,EAAU7U,SAC5BhzD,EAAO+4C,UAAUotC,EAAS7tD,MAAOstD,GACjCvlF,KAAK2lF,mBACHhmF,EAAOm5C,KAAK0uB,EAAU7U,SAAU6U,EAAU9qD,GAAG,GAC3C/c,EAAO64C,UAAUstC,EAAS7tD,MAAO4tD,GACjCD,EAAiBpoD,EAAMjC,cAEzBq6C,GAEFgQ,EAAiBpoD,EAAMjC,cAI3B,GAAI2pD,EAAK,CACHa,EAAYvrD,EAAKovC,oBAAoBpC,GAKzC,OAJKhtC,EAAK4yC,YAAYwI,EAAWpO,IAAYhtC,EAAKivC,aAAasc,EAAU9tD,MAAO,EAAAmwC,WAAWiF,SACvF7yC,EAAKixC,UAAUmK,EAAWpO,IAAYhtC,EAAKivC,aAAasc,EAAU9tD,MAAO,EAAAmwC,WAAWzD,SACxFnqC,EAAKmvC,cAAcmc,GACnB9lF,KAAK8xE,YAActK,EACZ7nE,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAOk4C,MAAM2vB,EAAU7U,SACrBhzD,EAAO+4C,UAAUotC,EAAS7tD,MAAOstD,GACjCvlF,KAAK61E,kBACHl2E,EAAOm5C,KAAK0uB,EAAU7U,SAAU6U,EAAU9qD,GAAG,GAC3C/c,EAAO64C,UAAUstC,EAAS7tD,MAAO4tD,GACjCD,EAAiBpoD,EAAMjC,cAEzB57B,EAAO+4C,UAAUqtC,EAAU9tD,MAAO29C,IAEpCgQ,EAAiBpoD,EAAMjC,cAEzB57B,EAAO64C,UAAUutC,EAAU9tD,MAAO2tD,IACjCA,GAIH,OAFAprD,EAAKmvC,cAAcmc,GACnB9lF,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAOk4C,MAAM2vB,EAAU7U,SAC5BhzD,EAAO+4C,UAAUotC,EAAS7tD,MAAOstD,GACjCvlF,KAAK61E,kBACHl2E,EAAOm5C,KAAK0uB,EAAU7U,SAAU6U,EAAU9qD,GAAG,GAC3C/c,EAAO64C,UAAUstC,EAAS7tD,MAAO4tD,GACjCD,EAAiBpoD,EAAMjC,cAEzBq6C,GAEFgQ,EAAiBpoD,EAAMjC,cAK7B,GAAI2pD,EAAK,CACHa,EAAYvrD,EAAKovC,oBAAoBpC,GAIzC,OAHKhtC,EAAK4yC,YAAYwI,EAAWpO,IAAYhtC,EAAKivC,aAAasc,EAAU9tD,MAAO,EAAAmwC,WAAWiF,SACvF7yC,EAAKixC,UAAUmK,EAAWpO,IAAYhtC,EAAKivC,aAAasc,EAAU9tD,MAAO,EAAAmwC,WAAWzD,SACxF3kE,KAAK8xE,YAActK,EACZ7nE,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAOk4C,MAAM2vB,EAAU7U,SACrB4yB,EACA5lF,EAAO+4C,UAAUqtC,EAAU9tD,MAAO29C,GAClCgQ,EAAiBpoD,EAAMjC,cAEzB57B,EAAO64C,UAAUutC,EAAU9tD,MAAO2tD,IACjCA,GAGH,OADA5lF,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAOk4C,MAAM2vB,EAAU7U,SAC5B4yB,EACA3P,EACAgQ,EAAiBpoD,EAAMjC,eAO/B,YAAAyjD,sBAAA,SAEEztE,EAEAstE,EAEAtB,GAGA,IAAI59E,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YAGhB,GAAIhiE,EAAWA,WAAW/D,MAAQ,EAAAD,SAASY,MAAO,CAChD,IAAI,EAAOnO,KAAKuzE,YACZtR,EAAiB,EAAKA,eAC1B,IAAKA,EAAevlD,GAAG,EAAAra,YAAYuc,aAKjC,OAJA5e,KAAKkN,MACH,EAAA1C,eAAew7E,8FACfz0E,EAAW1G,OAENlL,EAAO+8C,cAGhB,IAAIvzB,EAAgBhf,OAAO83D,EAAepiD,QAAS1V,OAAOgf,EAAc3b,MAAQ,EAAAoa,YAAYlJ,OAC5F,IAAIunE,EAAoB97E,OAAegf,EAAe+S,MAClDmpC,EAAYl7D,OAAO,EAAKm7D,YAAY,EAAAtiE,cAAcsC,QAClDqwE,EAAiB31E,KAAKkqB,QAAQyrD,eAO9BuQ,EAAUlmF,KAAKmmF,kBACjBnmF,KAAKomF,kBAAkBH,EAAmB10E,GAC1CA,EAAWnB,UACXmB,EACA5R,EAAO07C,GACL17C,EAAO64C,UAAU6sB,EAAUptC,MAAO09C,GAClCh2E,EAAO64C,UAAU6sB,EAAUptC,MAAO09C,GAClC31E,KAAKy1E,WACHz1E,KAAK44E,eAAsBzvD,KAE9B,IAGHhf,OAAOnK,KAAKqyE,oBAAoBroD,IAAIk8D,IACpC,IAAI9N,EAAyB,CAC3Bz4E,EAAO66C,UAAU6qB,EAAUptC,MAAOiuD,IAKpC,OAHAlmF,KAAK64E,wBAA+B1vD,EAAeivD,GAG/C,EAAKx7D,MACP,QAGA5c,KAAKkN,MACH,EAAA1C,eAAe67E,kFACf90E,EAAW1G,OAENlL,EAAO+8C,gBAEhB,EAAK7/B,IAAI,KACT7c,KAAK8xE,YAAc,EAAA1nD,KAAKG,KACjB5qB,EAAOi7C,MAAM,KAAMw9B,IAI5B,IAGIx+D,EACA0sE,EAJAppD,EAASl9B,KAAK8oB,SAASy4C,iBAAiBhwD,EAAWA,WAAYipB,GACnE,IAAK0C,EAAQ,OAAOv9B,EAAO+8C,cAI3B,OAAQxf,EAAO1vB,MAGb,KAAK,EAAAoa,YAAY+I,mBACf,IAAI1uB,EAA+Bi7B,EAC/BruB,EAAgB0C,EAAW1C,cAG/B,GAAI5M,EAAU4sB,aAAa,EAAAhH,eAAe7K,SACxC,OAAOhd,KAAKumF,6BAA6BtkF,EAAWsP,EAAYstE,GAGlE,IAAIlmD,EAA4B,KAGhC,GAAI9pB,EAAe,CACjB,IAAK5M,EAAUya,GAAG,EAAAra,YAAYqoB,SAK5B,OAJA1qB,KAAKkN,MACH,EAAA1C,eAAe80D,sBACf/tD,EAAWA,WAAW1G,MAAO5I,EAAU4mB,cAElClpB,EAAO+8C,cAEhB/jB,EAAW34B,KAAK8oB,SAAS88C,iCACvB3jE,EACA4M,EACA2rB,EAAKynC,eAAepiD,OACpB,EAAA4/C,QAAqBjlC,EAAK3B,yBAC1BtnB,OAIG,IAAItP,EAAUya,GAAG,EAAAra,YAAYqoB,SAAU,CAI5C,IAHA,IAAI87D,EAAgB,IAAI7+E,IACpBk1B,EAAqB1yB,OAAOlI,EAAU46B,oBACtCmqC,EAAoBnqC,EAAmB3wB,OAClC7L,EAAI,EAAGA,EAAI2mE,IAAqB3mE,EACvCmmF,EAAc3pE,IAAIggB,EAAmBx8B,GAAGO,KAAKoL,KAAM,MAGrD,IAAIi0D,EAAiBh+D,EAAUykE,iBAAiBx3D,WAC5CmmD,EAAgB4K,EAAe/zD,OAC/Bu6E,EAAgBl1E,EAAWnB,UAC3BqO,EAAegoE,EAAcv6E,OAC7Bw6E,EAAgB,IAAIl/E,MAAqBiX,GAC7C,IAASpe,EAAI,EAAGA,EAAIg1D,IAAiBh1D,EAAG,CACtC,IAAI0/D,EAAWE,EAAe5/D,GAAG0O,KAC7B43E,EAAe5mB,EAASvyD,MAAQ,EAAAD,SAAS4O,WAA8B4jD,EAAUn/D,KAAK4N,KAEtF,KADgBuxD,EAAUn/D,KAAK2N,WAAWvC,KAE1C46E,EAAqBvmF,EAAIoe,EACzBgoE,EAAcpmF,GACd4/D,EAAe5/D,GAAGwP,YACtB,IAAK+2E,EAKH,OAJA5mF,KAAKkN,MACH,EAAA1C,eAAegqB,+BACfjjB,EAAW1G,MAAOwqD,EAAc5pD,SAAS,IAAKgT,EAAahT,SAAS,KAE/D9L,EAAO+8C,cAEhB,GAAqB,OAAjBiqC,GAAyBH,EAAcx8D,IAAI28D,GAAe,CAE5D,GADIE,EAAeL,EAActlF,IAAIylF,GACnB,CAChBD,EAAcrmF,GAAKL,KAAK+2E,kBAAkB6P,EAAoBC,GAC9D,IAAI1hB,OAAU,EACd,KAAMA,EAAa,EAAA/6C,KAAK4pC,kBAAkB6yB,EAAc7mF,KAAK8xE,aAAa,OAClE3M,EAAa,EAAA/6C,KAAK4pC,kBAAkB6yB,EAAc7mF,KAAK8xE,aAAa,IAKxE,OAJA9xE,KAAKkN,MACH,EAAA1C,eAAe29D,mCACflI,EAAe5/D,GAAG0O,KAAKlE,MAAO7K,KAAK8xE,YAAYrmE,WAAYo7E,EAAap7E,YAEnE9L,EAAO+8C,cAGlBmqC,EAAe1hB,OAEfuhB,EAAcrmF,GAAKL,KAAK+2E,kBAAkB6P,EAAoB,EAAAx8D,KAAK+oC,MACnE0zB,EAAe7mF,KAAK8xE,YAGtB0U,EAAc3pE,IAAI8pE,EAAcE,OAC3B,CACL,IAAIC,EAAe9mF,KAAK8oB,SAAS81C,YAC/BqB,EAAe5/D,GAAG0O,KAClByrB,EAAKynC,eACLznC,EAAK3B,yBAEP,IAAKiuD,EAAc,OAAOnnF,EAAO+8C,cACjCgqC,EAAcrmF,GAAKL,KAAK+2E,kBAAkB6P,EAAoBE,EAAc,IAGhF,IAAI/f,EAAwB,IAAIv/D,MAAYw/D,GAC5C,IAAS3mE,EAAI,EAAGA,EAAI2mE,IAAqB3mE,EAAG,CAC1C,IAEMwmF,EAFFjmF,EAAOi8B,EAAmBx8B,GAAGO,KAAKoL,KACtC,GAAIw6E,EAAcx8D,IAAIppB,GAEpB,GADIimF,EAAeL,EAActlF,IAAIN,GACnB,CAChBmmE,EAAsB1mE,GAAKwmF,EAC3B,SASJ,OAJA7mF,KAAKkN,MACH,EAAA1C,eAAeu8E,uBACfx1E,EAAWA,WAAW1G,MAAM68D,OAEvB1nE,KAAKL,OAAO+8C,cAOrB,OALA/jB,EAAW34B,KAAK8oB,SAAS8H,gBACvB3uB,EACA8kE,EACA,EAAAtH,QAAqBjlC,EAAK3B,4BAGxB52B,EAAU4sB,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GAC7DvR,KAAKgjF,eAAerqD,EAAU+tD,EAAen1E,EAAYstE,GAAkB,EAAAz0D,KAAKG,OAFjEvqB,KAAKL,OAAO+8C,cASlC/jB,EAAW34B,KAAK8oB,SAAS8H,gBAAgB3uB,EAAW,MAEtD,IAAK02B,EAAU,OAAO34B,KAAKL,OAAO+8C,cAGlC,IAAI6oC,EAA0B,EAK9B,OAJI5sD,EAASjc,GAAG,EAAAra,YAAYqzB,YAC1B6vD,EAAWvlF,KAAK+2E,kBAAkB5sE,OAAOnK,KAAK8oB,SAAS41C,uBAAwB1+D,KAAKkqB,QAAQI,YAGvFtqB,KAAKmmF,kBACVxtD,EACApnB,EAAWnB,UACXmB,EACAg0E,EACAhI,GAKJ,KAAK,EAAA31D,YAAYsQ,MACf,GAAIte,EAAoBsjB,EAAQnuB,KAAK8jD,mBAAoB,CAErDyzB,EADUppD,EAAQxgB,GAAG,EAAAra,YAAYs1B,SACtBh4B,EAAOyD,IAAIu/C,QAAgBzlB,EAAQxF,uBAEnC/3B,EAAO64C,UAAkBtb,EAAQjF,MAAO,EAAAkH,WAAWz4B,KAEhE,MAMA,OAJA1G,KAAKkN,MACH,EAAA1C,eAAeq7D,uGACft0D,EAAW1G,MAAeqyB,EAAQnuB,KAAKtD,YAElC9L,EAAO+8C,cAGlB,KAAK,EAAA90B,YAAY1K,OACf,GAAItD,EAAqBsjB,EAAQnuB,KAAK8jD,mBAAoB,CACxDyzB,EAAW3mF,EAAOi5C,WAAoB1b,EAAQrU,aAAuBqU,EAAQnuB,KAAKmlD,gBAClF,MAMA,OAJAl0D,KAAKkN,MACH,EAAA1C,eAAeq7D,uGACft0D,EAAW1G,MAAgBqyB,EAAQnuB,KAAKtD,YAEnC9L,EAAO+8C,cAGlB,KAAK,EAAA90B,YAAYwJ,MACf,IAAIriB,EAAemuB,EAAQnuB,KAC3B,GAAI6K,EAAY7K,EAAK8jD,mBAAoB,CACvC,IAAI8xB,EAAiBx6E,OAAOnK,KAAK8oB,SAAS41C,uBACtC6mB,EAAWvlF,KAAK+2E,kBAAkB4N,EAAgB3kF,KAAKkqB,QAAQI,WACnEg8D,EAAW3mF,EAAOm5C,KAChB,GACA,EACAysC,EACA,EAAApmD,WAAWz4B,IACHw2B,EAAQ3B,cAElB,MAMA,OAJAv7B,KAAKkN,MACH,EAAA1C,eAAeq7D,uGACft0D,EAAW1G,MAAOkE,EAAKtD,YAElB9L,EAAO+8C,cAGlB,KAAK,EAAA90B,YAAYuT,gBACfvhB,EAA6BsjB,EAAQtjB,UACrC0sE,EAAWtmF,KAAK+2E,kBAAkBxlE,EAAWA,WAA6B2rB,EAAQnuB,KAAM,GACxF,MAGF,KAAK,EAAA6Y,YAAYoJ,mBACf,IAAIC,EAAkB9mB,OAA2B+yB,EAAQjM,iBAEzD,KADIyK,EAAiB17B,KAAK8oB,SAAS8H,gBAAgBK,EAAiB,OAC/C,OAAOtxB,EAAO+8C,cAGnC,GAFA4pC,EAAWtmF,KAAKmmF,kBAAkBzqD,EAAgB,GAAInqB,EAAWA,cACjEqI,EAAY5Z,KAAK8xE,YAAYjf,oBAM3B,OAJA7yD,KAAKkN,MACH,EAAA1C,eAAeq7D,uGACft0D,EAAW1G,MAAO7K,KAAK8xE,YAAYrmE,YAE9B9L,EAAO+8C,cAEhB,MAEF,KAAK,EAAA90B,YAAYuJ,SACf,IAAIuK,EAAiBvxB,OAAkB+yB,EAAQxB,gBAK/C,GAJA4qD,EAAWtmF,KAAKmmF,kBAAkBzqD,EAAgB,GAAInqB,EAAWA,WAC/DvR,KAAK+2E,kBAAkB5sE,OAAOnK,KAAK8oB,SAAS41C,uBAAwB1+D,KAAKkqB,QAAQI,cAEnF1Q,EAAY5Z,KAAK8xE,YAAYjf,oBAM3B,OAJA7yD,KAAKkN,MACH,EAAA1C,eAAeq7D,uGACft0D,EAAW1G,MAAO7K,KAAK8xE,YAAYrmE,YAE9B9L,EAAO+8C,cAEhB,MAIF,QAKE,OAJA18C,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAENlL,EAAO+8C,cAGlB,OAAO18C,KAAKgnF,oBACVptE,EACA0sE,EACA/0E,EAAWnB,UACXmB,EACA,EACAstE,GAAkB,EAAAz0D,KAAKG,OAInB,YAAAg8D,6BAAR,SACEtkF,EACAsP,EACAstE,GAEI58E,EAAU4sB,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GAEpE,IAAI1C,EAA+B,KAI/BguB,EAAqB56B,EAAU46B,mBAC/BsiC,EAAoB5tD,EAAW1C,cAC/B0C,EAAW1C,gBACR5M,EAAUya,GAAG,EAAAra,YAAYqoB,UAC5B1qB,KAAKkN,MACH,EAAA1C,eAAe80D,sBACf/tD,EAAW1G,MAAO5I,EAAU4mB,cAGhCha,EAAgB7O,KAAK8oB,SAASg3C,qBAC5B31D,OAAO0yB,GACPsiC,EACAn/D,KAAKuzE,YAAYtR,eAAepiD,OAChC,EAAA4/C,QAAqBz/D,KAAKuzE,YAAY16C,yBACtCtnB,IAKJ,IAAIV,EAAO,cACT7Q,KACAiC,EACA4M,EACA0C,EAAWnB,UACXyuE,EACAttE,GAEF,OAAKV,IACH7Q,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEN7K,KAAKL,OAAO+8C,gBASvB,YAAAuqC,mBAAA,SACErtE,EACA6E,EACAyoE,EACApgB,GAKA,GAAIogB,IAAwB,MADbttE,EAAUugB,UAMvB,OAJAn6B,KAAKkN,MACH,EAAA1C,eAAewoB,wBACf8zC,EAAWj8D,QAEN,EAIT,IAAI8pD,EAAU/6C,EAAU+6C,QACxB,GAAIA,EAKF,OAJA30D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACf8zC,EAAWj8D,QAEN,EAGT,IAAIs8E,EAAUvtE,EAAU86C,mBACpBrS,EAAUzoC,EAAUwgB,eAAeluB,OAGvC,OAAIuS,EAAe0oE,GACjBnnF,KAAKkN,MACHi6E,EAAU9kC,EACN,EAAA73C,eAAe48E,wCACf,EAAA58E,eAAegqB,+BACnBsyC,EAAWj8D,MAAOs8E,EAAQ17E,WAAYgT,EAAahT,aAE9C,KAILgT,EAAe4jC,IAAYsS,KAC7B30D,KAAKkN,MACH,EAAA1C,eAAegqB,+BACfsyC,EAAWj8D,MAAOw3C,EAAQ52C,WAAYgT,EAAahT,aAE9C,IAOH,YAAAm5E,YAAR,SAAoB9d,GAEd9mE,KAAKkqB,QAAQmnD,WAAavK,EAAWj8D,MAAMa,OAAOgnB,WACpD1yB,KAAKkN,MACH,EAAA1C,eAAe68E,qBACfvgB,EAAWj8D,QAMjB,YAAAs7E,kBAAA,SACExtD,EACA2uD,EACAxgB,EACAygB,EACAhK,QADA,IAAAgK,MAAA,QACA,IAAAhK,MAAA,GAEA,IAAI9+D,EAAe6oE,EAAoBp7E,OACnC0N,EAAY+e,EAAS/e,UACzB,IAAK5Z,KAAKinF,mBACRrtE,EACA6E,EACW,GAAX8oE,EACAzgB,GAGA,OADA9mE,KAAK8xE,YAAcl4D,EAAUzK,WACtBnP,KAAKL,OAAO+8C,cAKrB,GAHI/jB,EAAS9J,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAY9d,GAG/DnuC,EAAS9J,aAAa,EAAAhH,eAAe1K,QAAS,CAEhD,GADAhT,QAAQwuB,EAASjc,GAAG,EAAAra,YAAYu4E,cAC5B56E,KAAK4xE,uBAAuB16C,SAASyB,GAKlC,CACL34B,KAAK4xE,uBAAuBnlE,KAAKksB,GACjC,IAAI,EAAiB/e,EAAUwgB,eAC/BjwB,OAAOsU,GAAgB,EAAevS,QAGtC,IADA,IAAI+D,EAAO,IAAIzI,MAAqBiX,GAC3Bpe,EAAI,EAAGA,EAAIoe,IAAgBpe,EAClC4P,EAAK5P,GAAKL,KAAK+2E,kBAAkBuQ,EAAoBjnF,GAAI,EAAeA,GACtE,IAIJ,IAAIwQ,EAAO7Q,KAAKwnF,eAAe7uD,EAAU1oB,EAAMs3E,EAAkD,IAA1B,EAAdhK,IASzD,OARIv9E,KAAK8xE,YAAY0D,YACC,GAAd+H,EAGJv9E,KAAKqyE,oBAAoB7nD,IAAI3Z,GAF7BA,EAAO7Q,KAAKqlF,gBAAgBx0E,EAAM7Q,KAAKuzE,cAK3CvzE,KAAK4xE,uBAAuB7zB,MACrBltC,EAzBP7Q,KAAKgN,QACH,EAAAxC,eAAei9E,yCACf3gB,EAAWj8D,MAAO8tB,EAAS9P,cA4BjC,IAAI6+D,EAAuBH,EAAU9oE,EAAe,EAAIA,EACpD45B,EAAW,IAAI7wC,MAAqBkgF,GACpCzvD,EAAQ,EACRsvD,IACFlvC,EAAS,GAAKkvC,EACdtvD,EAAQ,GAEV,IAAImC,EAAiBxgB,EAAUwgB,eAC/B,IAAS/5B,EAAI,EAAGA,EAAIoe,IAAgBpe,IAAK43B,EACvCogB,EAASpgB,GAASj4B,KAAK+2E,kBAAkBuQ,EAAoBjnF,GAAI+5B,EAAe/5B,GAAE,GAKpF,GADA8J,OAAO8tB,GAASyvD,GACZ9tE,EAAUzK,WAAWqmE,UAAW,CAClC,GAAkB,EAAd+H,EAEF,OAAOv9E,KAAKgjF,eAAerqD,EAAU0f,EAAUyuB,GAAY,GACtD,GAAkB,GAAdyW,EAAuC,CAE5C1sE,EAAO7Q,KAAKgjF,eAAerqD,EAAU0f,EAAUyuB,GAAY,GAAO,GAEtE,OADA9mE,KAAKqyE,oBAAoB7nD,IAAI3Z,GACtBA,EAEP,OAAO7Q,KAAKgjF,eAAerqD,EAAU0f,EAAUyuB,GAAY,GAAO,GAGtE,OAAO9mE,KAAKgjF,eAAerqD,EAAU0f,EAAUyuB,EACJ,IAA1B,EAAdyW,KAIL,YAAAiK,eAAA,SACE7uD,EACA0f,EACAkvC,EACAI,QADA,IAAAJ,MAAA,QACA,IAAAI,OAAA,GAeA,IAbA,IAAIhoF,EAASK,KAAKL,OACd8e,EAAe45B,EAAWA,EAASnsC,OAAS,EAC5C0N,EAAY+e,EAAS/e,UACrBwgB,EAAiBxgB,EAAUwgB,eAC3Bi7B,EAAgBj7B,EAAeluB,OAG/BsqE,EAAex2E,KAAKuzE,YACpB/4C,EAAO,EAAAC,KAAKuuC,aAAawN,EAAa7N,eAAgBhwC,GACtD9e,EAAO,GACP+tE,EAAa,IAAIlgF,IAGZrH,EAAIoe,EAAe,EAAGpe,GAAK,IAAKA,EAAG,CAM1C,IAAIwnF,EAAYxvC,EAAUh4C,GACtBynF,EAAY1tD,EAAe/5B,GAC3B0nF,EAAgBvtD,EAAKsvC,eAAelwD,EAAU2gB,iBAAiBl6B,GAAIynF,EAAWF,GAClF,EAAAI,eAAeH,EAAWD,GAErBpR,EAAapJ,YAAYya,EAAWC,IAAYttD,EAAKivC,aAAase,EAAc9vD,MAAO,EAAAmwC,WAAWiF,SACnG7yC,EAAKixC,UAAUoc,EAAWC,IAAYttD,EAAKivC,aAAase,EAAc9vD,MAAO,EAAAmwC,WAAWzD,SAExFmjB,EAAUtS,YACPx1E,KAAKqyE,oBAAoBroD,IAAI69D,KAAYA,EAAY7nF,KAAKy1E,WAAWoS,IAC1ErtD,EAAKivC,aAAase,EAAc9vD,MAAO,EAAAmwC,WAAWsB,WAEpD7vD,EAAKm6D,QACHr0E,EAAO66C,UAAUutC,EAAc9vD,MAAO4vD,IAG1C,GAAIN,EAAS,CACX,IAAIp+D,EAAgBhf,OAAOwuB,EAAS9Y,QAAS1V,OAAOgf,EAAc3b,MAAQ,EAAAoa,YAAYlJ,OACtF,IAAIyb,EAAWhwB,OAAOwuB,EAAS/e,UAAUugB,UACrCkrC,EAAY7qC,EAAKsvC,eAAe,EAAA9mE,cAAcsC,MAAO60B,EAAUytD,GAEnE/tE,EAAKm6D,QACHr0E,EAAO66C,UAAU6qB,EAAUptC,MAAOsvD,IAEpC,IAAIU,EAAuB9+D,EAAe+S,KACtC+rD,GAAcztD,EAAKwvC,eAAe,EAAAhnE,cAAcuC,OAAQ0iF,EAAal5E,KAAMs2D,EAAUptC,YAEzF9tB,QAAQwuB,EAAS/e,UAAUugB,UAK7Bn6B,KAAKuzE,YAAc/4C,EACnB,IAASn6B,EAAIoe,EAAcpe,EAAIg1D,IAAiBh1D,EAAG,CACjD,IAAI6nF,EAAW9tD,EAAe/5B,GAC1Bu2E,EAAW52E,KAAK+2E,kBAClB5sE,OAAOwuB,EAAS12B,UAAUykE,iBAAiBx3D,WAAW7O,GAAGwP,aACzDq4E,EAAQ,GAGNH,EAAgBvtD,EAAKsvC,eAAelwD,EAAU2gB,iBAAiBl6B,GAAI6nF,GAClE1tD,EAAK4yC,YAAYwJ,EAAUsR,IAAW1tD,EAAKivC,aAAase,EAAc9vD,MAAO,EAAAmwC,WAAWiF,SACzF7yC,EAAKixC,UAAUmL,EAAUsR,IAAW1tD,EAAKivC,aAAase,EAAc9vD,MAAO,EAAAmwC,WAAWzD,SACtFujB,EAAS1S,WACXh7C,EAAKivC,aAAase,EAAc9vD,MAAO,EAAAmwC,WAAWsB,UAClD7vD,EAAKpN,KACH9M,EAAO66C,UAAUutC,EAAc9vD,MAC7Bj4B,KAAKy1E,WAAWmB,MAIpB/8D,EAAKpN,KACH9M,EAAO66C,UAAUutC,EAAc9vD,MAAO2+C,IAM5C52E,KAAKm4E,oBAAoBx/C,EAAU9e,GAG9B2gB,EAAK9d,GAAG,OACX1c,KAAKy4E,oBAAoBj+C,EAAM3gB,GAC/B7Z,KAAK02E,mBAAmBl8C,EAAM3gB,IAEhC2gB,EAAK2vC,mBACL,IAAIh7D,EAAaqrB,EAAKrrB,WACtBnP,KAAKuzE,YAAciD,EAGnB,IAAI3lE,EAAOlR,EAAOi7C,MAAMpgB,EAAKuuC,kBAAmBlvD,EAAM1K,EAAW+kD,gBAQjE,OAPAl0D,KAAK8xE,YAAc3iE,EACfA,EAAWqmE,WACTmS,IACF92E,EAAO7Q,KAAKukF,YAAY1zE,GACxB7Q,KAAK8xE,YAAc,EAAA1nD,KAAKG,MAGrB1Z,GAIT,YAAAmkE,iBAAA,SAAiBp/C,GAQf,IAAIwD,EAAaxD,EAASwD,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAI+uD,EAAoBvyD,EAAShc,UAC7BwuE,EAAexyD,EAAS/M,aACxBw/D,EAAyBF,EAAkB/tD,eAC3CkuD,EAAgC1yD,EAAS3zB,UAAUykE,iBAAiBx3D,WACpEC,EAAag5E,EAAkBh5E,WAC/BgrB,EAAWguD,EAAkBhuD,SAC7B6E,EAAapJ,EAASlZ,GAAG,EAAAra,YAAYqzB,UAGrC6yD,EAAeJ,EAAkBzzB,mBACjC8zB,EAAcD,EACdE,EAAeJ,EAAuBn8E,OACtCw8E,EAAcD,EACdzpD,MACAwpD,IACAE,GAEJ,IAAIC,EAAcx+E,OAAOu+E,EAAcF,GAEnCI,EAAoB,IAAIphF,MAAqBghF,GAC7CK,EAAe,EAGflpF,EAASK,KAAKL,OACdq/B,IACF4pD,EAAkB,GAAKjpF,EAAO64C,UAAU,EAAGx4C,KAAKkqB,QAAQyrD,gBACxDkT,EAAe,GAIjB,IAAK,IAAIxoF,EAAI,EAAGA,EAAIkoF,IAAgBloF,IAAKwoF,EACvCD,EAAkBC,GAAgBlpF,EAAO64C,UAAUqwC,EAAcR,EAAuBhoF,GAAG6zD,gBAE7F/pD,OAAO0+E,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI,EAAA/xD,UAAU/2B,KAAKi2B,QAASoyD,EAAwBl5E,EAAYgrB,GAC1F2uD,EAAoBp0B,mBAAqB+zB,EACzCK,EAAoBr0B,eAAiB0zB,EAAkB1zB,gBACvDr7B,EAAa,IAAI,EAAAvP,SACf+L,EAASh1B,KAAO,cAChBg1B,EAAS3zB,UACT6mF,EACAlzD,EAASiD,0BAEAhc,IAAI+Y,EAASrhB,MAAQ,EAAAlS,YAAYu4E,WAAa,EAAAv4E,YAAY6yE,UACrEt/C,EAASwD,WAAaA,EAItB,IAAIo9C,EAAex2E,KAAKuzE,YACpB/4C,EAAOpB,EAAWoB,KACtBx6B,KAAKuzE,YAAc/4C,EAGnB,IAAIuhB,EAAW4sC,EAAc,EACzB70E,EAAQ,IAAItM,MAAcu0C,GAC1BgtC,EAAM,KAAOJ,EAAYl9E,SAAS,IACtC,IAASpL,EAAI,EAAGA,EAAI07C,IAAY17C,EAAG,CACjC,IAAI2V,EAAQ3V,EAAEoL,SAAS,IAAMs9E,EAC7Bj1E,EAAMzT,GAAK2V,EAEb,IAAI6D,EAAOla,EAAOi7C,MAAM9mC,EAAM,GAAI,CAChCnU,EAAOi7C,MAAM,aAAc,CACzBj7C,EAAOk8C,OAAO/nC,EAAO,aAEnBy0E,EACI5oF,EAAOu4C,OACL,EAAA9O,SAASo5C,OACT7iF,EAAOi5C,WAAW,EAAA+sB,eAAeqjB,KAAM,EAAA7pD,WAAWz4B,KAClD/G,EAAOyD,IAAImlF,IAEb5oF,EAAOi5C,WAAW,EAAA+sB,eAAeqjB,KAAM,EAAA7pD,WAAWz4B,QAG1D/G,EAAO+8C,gBAET,IAASr8C,EAAI,EAAGA,EAAIsoF,IAAetoF,IAAKwoF,EAAc,CACpD,IAAI95E,EAAOs5E,EAAuBE,EAAeloF,GAC7C8R,EAAcm2E,EAA8BC,EAAeloF,GAC3DwP,EAAcsC,EAAYtC,YAC1B+mE,OAAQ,EACR/mE,EACF+mE,EAAWj3E,EAAO66C,UAAUquC,EAC1B7oF,KAAK+2E,kBACHlnE,EACAd,EAAI,KAKR/O,KAAKkN,MACH,EAAA1C,eAAey+E,4CACf92E,EAAYtH,OAEd+rE,EAAWj3E,EAAO+8C,eAEpB7iC,EAAOla,EAAOi7C,MAAM9mC,EAAMzT,EAAI,GAAI,CAChCwZ,EACA+8D,IAEFgS,EAAkBC,GAAgBlpF,EAAO64C,UAAUqwC,EAAc95E,EAAKmlD,gBAExE/pD,OAAO0+E,GAAgBH,GAEvB,IAAItQ,EAAyB,CAAEv+D,GAC3BqsE,EAAUvmF,EAAOa,KAAK4nF,EAAcQ,EAAmBz5E,EAAW+kD,gBAClE/kD,GAAc,EAAAib,KAAKG,KACrBvqB,KAAKikF,6BAA6BzpD,EAAM0rD,EAAS/2E,EAAYipE,IAE7DA,EAAM3rE,KAAKy5E,GACXlmF,KAAKy4E,oBAAoBj+C,EAAM49C,IAEjC59C,EAAK2vC,mBACLnqE,KAAKuzE,YAAciD,EAEnB,IAAIvC,EAAUt0E,EAAOggD,YACnBvmB,EAAWvQ,aACX7oB,KAAKk0E,mBACH4U,EAAoB1uD,eACpBjrB,EACAgrB,GAEF,EAAAg6C,mBAAmB/6C,EAAWJ,kBAC9Br5B,EAAOi7C,MAAM,KAAMw9B,EAAOjpE,EAAW+kD,iBAGvC,OADA96B,EAAWyB,SAASl7B,EAAQs0E,GACrB76C,GAID,YAAA8vD,cAAR,WACE,IAAKlpF,KAAKkyE,QAAS,CACjB,IAAIvyE,EAASK,KAAKL,OAClBK,KAAKkyE,QAAUvyE,EAAOw/C,UACpB,EAAAwmB,eAAeqjB,KACf,EAAA7pD,WAAWz4B,KACX,EACA/G,EAAOyD,IAAI,IAGf,OAAO,EAAAuiE,eAAeqjB,MAIhB,YAAA/T,cAAR,WACE,IAAKj1E,KAAKmyE,QAAS,CACjB,IAAIxyE,EAASK,KAAKL,OAClBK,KAAKmyE,QAAUxyE,EAAOggD,YAAY,EAAAgmB,eAAewjB,QAC/CnpF,KAAKk0E,mBAAmB,CAAE,EAAA9pD,KAAK3mB,KAAO,EAAA2mB,KAAKG,MAC3C,KACA5qB,EAAO+6C,WAAW16C,KAAKkpF,gBACrBvpF,EAAO64C,UAAU,EAAG,EAAArZ,WAAWz4B,OAGnC/G,EAAO2gD,kBAAkB,EAAAqlB,eAAewjB,QAAS,aAEnD,OAAO,EAAAxjB,eAAewjB,SAMxB,YAAA1T,WAAA,SAAW5kE,GACT,IAAImf,EAAiBhwB,KAAKi2B,QAAQjG,eAElC,OADAhwB,KAAKi4E,gBAAgBjoD,GACdhwB,KAAKL,OAAOa,KAAKwvB,EAAenH,aAAc,CAAEhY,GAAQ7Q,KAAKkqB,QAAQyrD,iBAI9E,YAAAE,kBAAA,SAAkBuT,EAAwBC,GAKxC,IAAI1pF,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACZjpD,EAAYtqB,KAAKkqB,QAAQI,UACzBqrD,EAAiB31E,KAAKkqB,QAAQyrD,eAC9B2T,EAAQ9uD,EAAK4uC,aAAa9+C,EAAW,EAAA09D,eAAeoB,IACpDG,EAAQ/uD,EAAKovC,oBAAoBt/C,GAErC,OADAkQ,EAAKmvC,cAAc2f,GACZ3pF,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO07C,GACL17C,EAAOu4C,OAAOy9B,GAAkB,EAAAx2C,WAAWx4B,IAAM,EAAAyiC,SAAS6jC,MAAQ,EAAA7jC,SAAS4jC,MACzErtE,EAAO+4C,UAAU4wC,EAAMrxD,MAAOoxD,GAC9B1pF,EAAO+4C,UAAU6wC,EAAMtxD,MAAOmxD,IAEhCzpF,EAAOi7C,MAAM,KAAM,CACjBj7C,EAAOs7C,KACLj7C,KAAKy1E,WAAW91E,EAAO64C,UAAU8wC,EAAMrxD,MAAO09C,KAEhD31E,KAAKukF,YAAY5kF,EAAO64C,UAAU+wC,EAAMtxD,MAAO09C,OAGnDh2E,EAAO64C,UAAU8wC,EAAMrxD,MAAO09C,IAC7BA,IAIL,YAAAgQ,mBAAA,SAAmByD,EAAwBC,GAGzC,IAAI1pF,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACZjpD,EAAYtqB,KAAKkqB,QAAQI,UACzBqrD,EAAiB31E,KAAKkqB,QAAQyrD,eAC9BgD,EAAOn+C,EAAKovC,oBAAoBt/C,EAAW,EAAA09D,eAAeoB,IAC9D,OAAOzpF,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO66C,UAAUm+B,EAAK1gD,MAAOoxD,GAC7BrpF,KAAKukF,YAAY6E,GACjBzpF,EAAO64C,UAAUmgC,EAAK1gD,MAAO09C,IAC5BA,IAIL,YAAA4O,YAAA,SAAY1zE,GACV,IAAIof,EAAkBjwB,KAAKi2B,QAAQhG,gBAEnC,OADAjwB,KAAKi4E,gBAAgBhoD,GACdjwB,KAAKL,OAAOa,KAAKyvB,EAAgBpH,aAAc,CAAEhY,GAAQ,EAAAsuB,WAAWga,OAI7E,YAAAksC,gBAAA,SAAgBx0E,EAAqB2pB,GAEnC,YAFmC,IAAAA,MAAax6B,KAAKuzE,aAE9CvzE,KAAKL,OAAO+4C,UAAUle,EAAK+uC,oBAAoBvpE,KAAKkqB,QAAQI,WAAW2N,MAAOpnB,IAIvF,YAAA24E,gBAAA,SAAgB34E,EAAqB2pB,GAInC,OAAQ,EAAAkvB,gBAAgB74C,IACtB,KAAK,EAAAuuB,aAAaovB,SAChB,GAAI,EAAAkd,WAAW76D,GAAO,CACpB,IAAIonB,EAAQ,EAAA0zC,iBAAiB96D,GAC7B,GAAI2pB,EAAK+vC,eAAetyC,EAAO,EAAAmwC,WAAWoV,cAKxC,OADAhjD,EAAK8uC,eAAerxC,EAAO,EAAAmwC,WAAWoV,cAC/BvlD,EAGX,MAEF,KAAK,EAAAmH,aAAayuB,MAChB,GAA2B,OAAvB,EAAAwiB,aAAax/D,GAAgB,CAC/B,IAAIutE,EAAQ,EAAA9N,mBAAmBz/D,GAC/B,GAAIutE,EACF,OAAOp+E,KAAKwpF,gBAAgB,EAAAhZ,cAAc3/D,EAAMutE,EAAQ,GAAI5jD,IAMpE,OAAQ,GAQV,YAAA6pD,gBAAA,SAAgBxzE,EAAqB44E,EAAqBC,GAKxD,OADY1pF,KAAKwpF,gBAAgB34E,EAAM44E,GAEnCzpF,KAAKqlF,gBAAgBx0E,EAAM64E,GAC3B1pF,KAAKqlF,gBAAgBrlF,KAAKy1E,WAAW5kE,GAAO64E,IAIlD,YAAAjR,oBAAA,SAAoBj+C,EAAY49C,EAAwBuR,G,aAAA,IAAAA,OAAA,GACtD,IAAIlhB,EAAejuC,EAAKiuC,aACxB,GAAIA,EAAc,CAChB,IAAI9oE,EAASK,KAAKL,O,IAClB,IAAkB,QAAA8oE,EAAa10D,UAAQ,8BAAE,CAApC,IAAImmB,EAAK,QACZ,GAAIA,EAAMxd,GAAG,EAAAra,YAAYmnE,QAAS,CAChC,IAAIvvC,EAAaC,EAAMjC,MACnBuC,EAAK+vC,eAAetwC,EAAY,EAAAmuC,WAAWoV,gBACzCmM,GAAYnvD,EAAK8uC,eAAervC,EAAY,EAAAmuC,WAAWoV,cAC3DpF,EAAM3rE,KACJzM,KAAKukF,YACH5kF,EAAO64C,UAAUve,EAAYC,EAAMnrB,KAAKmlD,qB,oGAUtD,YAAA+vB,6BAAA,SACEzpD,EACAo7C,EACA17D,EACAk+D,EACAuR,QADA,IAAAvR,MAAA,WACA,IAAAuR,OAAA,GAEKvR,IAAOA,EAAQ,IAAI5wE,OACxB4wE,EAAM3rE,KACJzM,KAAKL,OAAO47C,OAEd,IAAIquC,EAAexR,EAAMlsE,OAEzB,GADAlM,KAAKy4E,oBAAoBj+C,EAAM49C,EAAOuR,GAClCvR,EAAMlsE,OAAS09E,EAAc,CAC/B,IAAIlU,EAAax7D,EAAUg6C,eACvBykB,EAAOn+C,EAAKovC,oBAAoB1vD,GAC/BsgB,EAAK4yC,YAAYwI,EAAW17D,IAAYsgB,EAAKivC,aAAakP,EAAK1gD,MAAO,EAAAmwC,WAAWiF,SAClF7yC,EAAKixC,UAAUmK,EAAW17D,IAAYsgB,EAAKivC,aAAakP,EAAK1gD,MAAO,EAAAmwC,WAAWzD,SACnF,IAAIhlE,EAASK,KAAKL,OAKlB,OAJAy4E,EAAMwR,EAAe,GAAKjqF,EAAO66C,UAAUm+B,EAAK1gD,MAAO29C,GACvDwC,EAAM3rE,KACJ9M,EAAO64C,UAAUmgC,EAAK1gD,MAAOy9C,IAExB/1E,EAAOi7C,MAAM,KAAMw9B,EAAO1C,GAC5B,OAAI0C,EAAMlsE,OAAS,GACxBksE,EAAMwR,EAAe,GAAKhU,EACnB51E,KAAKL,OAAOi7C,MAAM,KAAMw9B,EAAOl+D,EAAUg6C,iBAE3C0hB,GAIT,YAAAc,mBAAA,SAAmBl8C,EAAY49C,G,QACzBz4E,EAASK,KAAKL,OAClB,GAAI66B,EAAK9d,GAAG,OAA2B,CAIrC,IADA,IAAImD,OAAM,EACHA,EAAS2a,EAAK3a,QAAQ2a,EAAO3a,EACpC7f,KAAKy4E,oBAAoBj+C,EAAM49C,GAAO,Q,IAEtC,IAAkB,QAAA59C,EAAKmuC,eAAe5vC,eAAa,8BAAE,CAAhD,IAAImB,EAAK,QACRD,EAAaC,EAAMjC,MACnBuC,EAAK+vC,eAAetwC,EAAY,EAAAmuC,WAAWoV,gBAC7ChjD,EAAK8uC,eAAervC,EAAY,EAAAmuC,WAAWoV,cAC3CpF,EAAM3rE,KACJzM,KAAKukF,YACH5kF,EAAO64C,UAAUve,EAAYC,EAAMnrB,KAAKmlD,oB,mGAWpD,YAAA8uB,eAAA,SACErqD,EACA0f,EACAyuB,EACA6gB,EAEAkC,GAEA,QAJA,IAAAlC,OAAA,QAEA,IAAAkC,OAAA,GAEIlxD,EAAS9J,aAAa,EAAAhH,eAAe1K,QAAS,CAEhD,GADAhT,QAAQwuB,EAASjc,GAAG,EAAAra,YAAYu4E,cAC5B56E,KAAK4xE,uBAAuB16C,SAASyB,GAKlC,CAEL,IAAI,EACJ,GAFA34B,KAAK4xE,uBAAuBnlE,KAAKksB,GAE7BA,EAASjc,GAAG,EAAAra,YAAYqzB,UAAW,CACrC,IAAIo0D,EAAc3/E,OAAOkuC,GACzBluC,OAAO2/E,EAAY59E,QACnB,EAAOlM,KAAKwnF,eAAe7uD,EAAUmxD,EAAY3gB,MAAM,GAAI2gB,EAAY,GAAInC,QAE3E,EAAO3nF,KAAKwnF,eAAe7uD,EAAU0f,EAAU,EAAGsvC,GAUpD,OARI3nF,KAAK8xE,YAAY0D,YACdqU,EAGH7pF,KAAKqyE,oBAAoB7nD,IAAI,GAF7B,EAAOxqB,KAAKqlF,gBAAgB,EAAMrlF,KAAKuzE,cAK3CvzE,KAAK4xE,uBAAuB7zB,MACrB,EAtBP/9C,KAAKgN,QACH,EAAAxC,eAAei9E,yCACf3gB,EAAWj8D,MAAO8tB,EAAS9P,cAuBjC,IAAIkhE,EAAc1xC,EAAWA,EAASnsC,OAAS,EAC3CuS,EAAesrE,EAEfvB,EADe7vD,EAAS/e,UAAU86C,mBAElC+zB,EAAe9vD,EAAS/e,UAAUwgB,eAAeluB,OACjDw8E,EAAcD,EACd9vD,EAASjc,GAAG,EAAAra,YAAYqzB,cACxB8yD,IACAE,IACAjqE,GAEJtU,OAAO4/E,GAAevB,GAEtB,IAAI7oF,EAASK,KAAKL,OAClB,IAAKK,KAAKi4E,gBAAgBt/C,GAAW,OAAOh5B,EAAO+8C,cACnD,IAAIvtC,EAAawpB,EAAS/e,UAAUzK,WAChC66E,EAAerxD,EAASjc,GAAG,EAAAra,YAAY60E,eAG3C,GAAI6S,EAAcrB,EAAa,CACxBrwC,KACHA,EAAW,IAAI7wC,MAAMkhF,IACZx8E,OAAS,GAEpB,IAAIkuB,EAAiBzB,EAAS/e,UAAUwgB,eACpC6lC,EAAiBtnC,EAAS12B,UAAUykE,iBAAiBx3D,WACzD/E,OAAO81D,EAAe/zD,QAAUkuB,EAAeluB,QAE/C,IADA,IAAI+9E,GAA0B,EACrB5pF,EAAIoe,EAAcpe,EAAIooF,IAAgBpoF,EAAG,CAChD,IAAIwP,EAAcowD,EAAe5/D,GAAGwP,YACpC,GAAIA,EAAa,CACf,GAAI,EAAAq6E,oBAAoBr6E,EAAYrC,MAAO,CACzC6qC,EAAS5rC,KAAKzM,KAAK+2E,kBACL9W,EAAe5/D,GAAGwP,YAC9BuqB,EAAe/5B,GAAE,IAGnB,SAEF,IAAIowB,EAAWzwB,KAAK8oB,SAASy4C,iBAAiB1xD,EAAa8oB,EAAS6B,KAAMJ,EAAe/5B,IACzF,GAAIowB,GACEA,EAASjjB,MAAQ,EAAAoa,YAAY1K,OAAQ,CACvC,IAAI,EAAiBuT,EACrB,GAAIzwB,KAAKg2E,cAAc,GAAS,CAC1B,EAAOt5D,GAAG,EAAAra,YAAYs1B,SACxB0gB,EAAS5rC,KACPzM,KAAK4+E,sBAAsB,EAAQxkD,EAAe/5B,GAAI,IAGxDg4C,EAAS5rC,KACPzM,KAAK6/E,kBACHlgF,EAAOi5C,WAAW,EAAO/vB,aAAc,EAAO9Z,KAAKmlD,gBACnD,EAAOnlD,KAAMqrB,EAAe/5B,IAAI,GAAO,EAAOwP,IAIpD,WAKRwoC,EAAS5rC,KAAK2tB,EAAe/5B,GAAG8zD,aAAax0D,IAC7CsqF,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAIp0D,EAAW+C,EAEf,GADAA,EAAW34B,KAAKg1E,iBAAiBr8C,IAC5B34B,KAAKi4E,gBAAgBt/C,GAAW,OAAOh5B,EAAO+8C,cACnD/jB,EAAS6B,KAAKjmB,MAAQqhB,EAAS4E,KAAKjmB,MACpC,IAAI+wE,EAAmBn2E,EAAW+kD,eAC9B,EAAOv0D,EAAOa,KAAKm4B,EAAS9P,aAAcwvB,EAAUitC,GAYxD,OAXAtlF,KAAK8xE,YAAc3iE,EACfA,EAAWqmE,YACTmS,GACF,EAAO3nF,KAAKukF,YAAY,GACxBvkF,KAAK8xE,YAAc,EAAA1nD,KAAKG,MACds/D,EAGV7pF,KAAKqyE,oBAAoB7nD,IAAI,GAF7B,EAAOxqB,KAAKqlF,gBAAgB,IAKzB1lF,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO+6C,WAAW16C,KAAKkpF,gBAAiBvpF,EAAOyD,IAAIqb,IACnD,GACCze,KAAK8xE,YAAY5d,iBAQ1B,IAAIrjD,EAAOlR,EAAOa,KAAKm4B,EAAS9P,aAAcwvB,EAAUlpC,EAAW+kD,gBAUnE,OATAl0D,KAAK8xE,YAAc3iE,EACfA,EAAWqmE,YACTmS,GACF92E,EAAO7Q,KAAKukF,YAAY1zE,GACxB7Q,KAAK8xE,YAAc,EAAA1nD,KAAKG,MACds/D,IACVh5E,EAAO7Q,KAAKqlF,gBAAgBx0E,KAGzBA,GAIT,YAAAm2E,oBAAA,SACEptE,EACA0sE,EACAgB,EACAxgB,EACAygB,EACAI,QADA,IAAAJ,MAAA,QACA,IAAAI,OAAA,GAEA,IAAIlpE,EAAe6oE,EAAoBp7E,OAEvC,IAAKlM,KAAKinF,mBACRrtE,EACA6E,EACW,GAAX8oE,EACAzgB,GAEA,OAAO9mE,KAAKL,OAAO+8C,cAGrB,IAAIgrC,EAAuBH,EAAU9oE,EAAe,EAAIA,EACpD45B,EAAW,IAAI7wC,MAAqBkgF,GACpCzvD,EAAQ,EACRsvD,IACFlvC,EAAS,GAAKkvC,EACdtvD,EAAQ,GAGV,IADA,IAAImC,EAAiBxgB,EAAUwgB,eACtB/5B,EAAI,EAAGA,EAAIoe,IAAgBpe,IAAK43B,EACvCogB,EAASpgB,GAASj4B,KAAK+2E,kBAAkBuQ,EAAoBjnF,GAAI+5B,EAAe/5B,GAAE,GAKpF,OADA8J,OAAO8tB,GAASyvD,GACT1nF,KAAKmqF,iBAAiBvwE,EAAW0sE,EAAUjuC,EAAUsvC,IAI9D,YAAAwC,iBAAA,SACEvwE,EACA0sE,EACAjuC,EACAsvC,QADA,IAAAtvC,MAAA,WACA,IAAAsvC,OAAA,GAEA,IAAIoC,EAAc1xC,EAAWA,EAASnsC,OAAS,EAC3CuS,EAAesrE,EAEfvB,EADe5uE,EAAU86C,mBAEzB+zB,EAAe7uE,EAAUwgB,eAAeluB,OACxCw8E,EAAcD,EACd7uE,EAAUugB,aACVquD,IACAE,IACAjqE,GAEJtU,OAAO4/E,GAAevB,GAEtBxoF,KAAKk0E,mBAAmBt6D,EAAUwgB,eAAgBxgB,EAAUzK,WAAYyK,EAAUugB,UAClF,IAAIx6B,EAASK,KAAKL,OAGlB,GAAIoqF,EAAcrB,EAAa,CACxBrwC,KACHA,EAAW,IAAI7wC,MAAMkhF,IACZx8E,OAAS,GAGpB,IADA,IAAIkuB,EAAiBxgB,EAAUwgB,eACtB/5B,EAAIoe,EAAcpe,EAAIooF,IAAgBpoF,EAC7Cg4C,EAAS5rC,KAAK2tB,EAAe/5B,GAAG8zD,aAAax0D,IAIjD,IAAIwP,EAAayK,EAAUzK,WACvB0B,EAAOlR,EAAO28C,cAAcgqC,EAAUjuC,EAAUz+B,EAAUwhB,qBAU9D,OATAp7B,KAAK8xE,YAAc3iE,EACfA,EAAWqmE,YACTmS,GACF92E,EAAO7Q,KAAKukF,YAAY1zE,GACxB7Q,KAAK8xE,YAAc,EAAA1nD,KAAKG,MAExB1Z,EAAO7Q,KAAKqlF,gBAAgBx0E,IAGzBlR,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAO+6C,WAAW16C,KAAKkpF,gBACrBvpF,EAAOyD,IAAIqb,IAEb5N,GACC7Q,KAAK8xE,YAAY5d,iBAGtB,YAAA+qB,uBAAA,SACE1tE,EACAstE,EACAtB,GAKA,IAHA,IAAIjrE,EAAcf,EAAWe,YACzB83E,EAAiB93E,EAAYpG,OAC7Bm+E,EAAQ,IAAI7iF,MAAqB4iF,KAC5B/pF,EAAI,EAAGA,EAAI+pF,IAAkB/pF,EACpCgqF,EAAMhqF,GAAKL,KAAK+2E,kBAAkBzkE,EAAYjS,GAAI,EAAA+pB,KAAKG,KACrD,GAIJ,OADA8/D,EAAMD,GAAkBpqF,KAAK+2E,kBAAkBzkE,EAAY83E,GAAiBvL,EAAgBtB,GACrFv9E,KAAKL,OAAOi7C,MAAM,KAAMyvC,EAAOrqF,KAAK8xE,YAAY5d,iBAGzD,YAAAgrB,+BAAA,SACE3tE,EACAstE,EACAtB,GAEA,IAAI59E,EAASK,KAAKL,OACdskE,EAAmB1yD,EAAWA,WAC9B+hD,EAAatzD,KAAK8oB,SAAS65C,kBAAkBsB,EAAkBjkE,KAAKuzE,aACxE,GAAIjgB,EAAY,CACd,GAAIA,EAAW52C,GAAG,KAAsB,CACtC,IAAI6U,EAAiB+hC,EAAW/hC,eAChC,GAAIA,EAAgB,CAClB,IAAIuyC,EAAavyC,EAAeyL,eAAe,EAAAha,aAAaS,YAAazjB,KAAKuzE,YAAY72D,GAAG,QAC7F,GAAIonD,EAAY,CACd,IAAIyjB,EAAUvnF,KAAK+2E,kBAAkB9S,EAAkB1yC,EAAexiB,KAAI,GAG1E,OAAO/O,KAAKmmF,kBAAkBriB,EAAY,CACxCvyD,EAAWsB,mBACVtB,EAAYg2E,EAAShK,KAI9Bv9E,KAAKkN,MACH,EAAA1C,eAAek2D,qCACfnvD,EAAWA,WAAW1G,MAAOyoD,EAAW7nD,YAG5C,OAAO9L,EAAO+8C,eAGhB,YAAAyiC,0BAAA,SACE5tE,EACA+4E,EACA/M,GAEA,IAAIprE,EAAcZ,EAAWY,YAAYyP,QACzCzX,QAAQgI,EAAYgE,gBACpB,IAUIwiB,EAVA6B,EAAOx6B,KAAKuzE,YACZtR,EAAiBznC,EAAKynC,eACtBhgE,EAAY,IAAI,EAAA6nB,kBAClB3X,EAAYvR,KAAKoL,KAAKE,OAClBiG,EAAYvR,KAAKoL,KACjB,cAAgBi2D,EAAe3oC,mBAAmB7tB,SAAS,IAC/Dw2D,EACA9vD,EACA,EAAA0V,eAAepL,MAGboc,EAA0B,EAAA4mC,QAAQjlC,EAAK3B,yBAI3C,GAAIyxD,EAAqB,CACvB,IAAI7jB,EAAgBxkE,EAAUykE,iBAC1BzG,EAAiBwG,EAAcv3D,WAC/Bq7E,EAAuBtqB,EAAe/zD,OAGtCkuB,EAAiBkwD,EAAoBlwD,eACrCi7B,EAAgBj7B,EAAeluB,OACnC,GAAIq+E,EAAuBl1B,EAKzB,OAJAr1D,KAAKkN,MACH,EAAA1C,eAAegqB,+BACfjjB,EAAW1G,MAAOwqD,EAAc5pD,WAAY8+E,EAAqB9+E,YAE5DzL,KAAKL,OAAO+8C,cAKrB,IADA,IAAI+X,EAAiB,IAAIjtD,MAAc+iF,GAC9BlqF,EAAI,EAAGA,EAAIkqF,IAAwBlqF,EAAG,CAC7C,IAAI6/D,EAAgBD,EAAe5/D,GAEnC,GADAo0D,EAAep0D,GAAK6/D,EAAct/D,KAAKoL,MAClC,EAAAq0D,cAAcH,EAAcnxD,MAAO,CAMtC,KALIi1D,EAAehkE,KAAK8oB,SAAS81C,YAC/BsB,EAAcnxD,KACdkzD,EAAepiD,OACfgZ,IAEiB,OAAO74B,KAAKL,OAAO+8C,cACtC,IAAKtiB,EAAe/5B,GAAG0zD,uBAAuBiQ,GAK5C,OAJAhkE,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfjI,EAAcr1D,MAAOuvB,EAAe/5B,GAAGoL,WAAYu4D,EAAav4D,YAE3DzL,KAAKL,OAAO+8C,eAOzB,IAAIvtC,EAAam7E,EAAoBn7E,WACrC,IAAK,EAAAkxD,cAAcoG,EAAct3D,YAAa,CAM5C,KALI60D,EAAehkE,KAAK8oB,SAAS81C,YAC/B6H,EAAct3D,WACd8yD,EAAepiD,OACfgZ,IAEiB,OAAO74B,KAAKL,OAAO+8C,cACtC,GACEvtC,GAAc,EAAAib,KAAKG,KACfy5C,GAAgB,EAAA55C,KAAKG,MACpBy5C,EAAajQ,uBAAuB5kD,GAMzC,OAJAnP,KAAKkN,MACH,EAAA1C,eAAe29D,mCACf1B,EAAct3D,WAAWtE,MAAOm5D,EAAav4D,WAAY0D,EAAW1D,YAE/DzL,KAAKL,OAAO+8C,cAKvB,IAAIviB,EAAWmwD,EAAoBnwD,SAC/BqwD,EAAe/jB,EAAcr3D,iBACjC,GAAIo7E,EAAc,CAChB,IAAKrwD,EAKH,OAJAn6B,KAAKkN,MACH,EAAA1C,eAAe+6D,+CACfilB,EAAa3/E,OAER7K,KAAKL,OAAO+8C,cAErB,IAAIsnB,EAKJ,KALIA,EAAehkE,KAAK8oB,SAAS81C,YAC/B4rB,EACAvoB,EAAepiD,OACfgZ,IAEiB,OAAO74B,KAAKL,OAAO+8C,cACtC,IAAKviB,EAAS45B,uBAAuBiQ,GAKnC,OAJAhkE,KAAKkN,MACH,EAAA1C,eAAe29D,mCACfqiB,EAAa3/E,MAAOsvB,EAAS1uB,WAAYu4D,EAAav4D,YAEjDzL,KAAKL,OAAO+8C,cAIvB,IAAI9iC,EAAY,IAAI,EAAAmd,UAAU/2B,KAAKi2B,QAASmE,EAAgBjrB,EAAYgrB,GASxE,GARAvgB,EAAU86C,mBAAqBW,EAC/Bz7C,EAAU66C,eAAiBA,EAC3B97B,EAAW,IAAI,EAAA9O,SACb5nB,EAAUrB,KACVqB,EACA2X,EACAif,IAEG74B,KAAKi4E,gBAAgBt/C,GAAW,OAAO34B,KAAKL,OAAO+8C,cACxD18C,KAAK8xE,YAAcwY,EAAoBv7E,SAGlC,CAML,KALA4pB,EAAW34B,KAAKk2E,kCACdj0E,EACA,GACA42B,IAEa,OAAO74B,KAAKL,OAAO+8C,cAClC18C,KAAK8xE,YAAcn5C,EAAS/e,UAAU7K,KAGxC,IAAIkpB,EAAQj4B,KAAK26E,yBAAyBhiD,GAC1C,OAAOV,EAAQ,EACXj4B,KAAKL,OAAO+8C,cACZ18C,KAAKL,OAAOyD,IAAI60B,IAId,YAAAwyD,4BAAR,SAAoCl5E,GAClC,IAAImG,EAAenG,EAAW1G,MAAMa,OAAOgM,aACvCsQ,EAAchoB,KAAKi2B,QAAQjO,YAC/B7d,OAAO6d,EAAYgC,IAAItS,IACHsQ,EAAY9mB,IAAIwW,GACjBgF,GAAG,EAAAra,YAAY6yE,WAChCl1E,KAAKo2E,kBAAkB1+D,EAAcnG,IASzC,YAAA6tE,4BAAA,SACE7tE,EACAstE,EACAtB,GAEA,IAAI59E,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACZtR,EAAiBznC,EAAKynC,eAG1B,OAAQ1wD,EAAW/D,MACjB,KAAK,EAAAD,SAASG,KACZ,IAAIwc,EAAUlqB,KAAKkqB,QACfqH,EAAiBstD,EAAettD,eAMpC,OALIstD,EAAeniE,GAAG,MAA2C,OAAnB6U,EAC5CvxB,KAAK8xE,YAAcvgD,EAAexiB,KAAK0kD,aAEvCzzD,KAAK8xE,YAAc5nD,EAAQI,UAEtBJ,EAAQY,SACXnrB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAK,EAAAmK,SAASI,KAEZ,OADA3N,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK,EAAAmK,SAASK,MAEZ,OADA5N,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACjBjE,EAAOyD,IAAI,GAEpB,KAAK,EAAAmK,SAAS+R,KACZ,GAAI2iD,EAAevlD,GAAG,EAAAra,YAAYqzB,UAAW,CAC3C,IAAI2vC,EAAYl7D,OAAOqwB,EAAK8qC,YAAY,EAAAtiE,cAAcsC,QAClD6jB,EAAgBhf,OAAO83D,EAAepiD,QAAS1V,OAAOgf,EAAc3b,MAAQ,EAAAoa,YAAYlJ,OAC5F,IAAIi3D,EAAiB31E,KAAKkqB,QAAQyrD,eAClC,GAAI1T,EAAevlD,GAAG,EAAAra,YAAYuc,eAC3B4b,EAAK9d,GAAG,IAAsB,CACjC8d,EAAK3d,IAAI,IAOT,IAAIu7D,EAAyB,CAC3Bz4E,EAAO07C,GACL17C,EAAOo4C,MAAM49B,GAAkB,EAAAx2C,WAAWx4B,IAAM,EAAA28B,QAAQkpC,OAAS,EAAAlpC,QAAQipC,OACvE5sE,EAAO64C,UAAU6sB,EAAUptC,MAAO09C,IAEpCh2E,EAAO66C,UAAU6qB,EAAUptC,MACzBj4B,KAAKy1E,WACHz1E,KAAK44E,eAAsBzvD,OAUnC,OALAnpB,KAAK64E,wBAA+B1vD,EAAeivD,GACnDA,EAAM3rE,KACJ9M,EAAO64C,UAAU6sB,EAAUptC,MAAO09C,IAEpC31E,KAAK8xE,YAAczM,EAAUt2D,KACtBpP,EAAOi7C,MAAM,KAAMw9B,EAAOzC,GAIrC,IAAIx7C,EAAWhwB,OAAO83D,EAAeroD,UAAUugB,UAE/C,OADAn6B,KAAK8xE,YAAc33C,EACZx6B,EAAO64C,UAAU6sB,EAAUptC,MAAOkC,EAAS+5B,gBAOpD,OALAl0D,KAAKkN,MACH,EAAA1C,eAAe+6D,+CACfh0D,EAAW1G,OAEb7K,KAAK8xE,YAAc9xE,KAAKkqB,QAAQI,UACzB3qB,EAAO+8C,cAEhB,KAAK,EAAAnvC,SAASY,MACZ,IAAI,EAAOnO,KAAKuzE,YACZ,EAAiB,EAAKtR,eAU1B,GATI,EAAevlD,GAAG,EAAAra,YAAYuc,eAC3B,EAAKlC,GAAG,MAEX1c,KAAKkN,MACH,EAAA1C,eAAekgF,iGACfn5E,EAAW1G,QAIb,EAAK6R,GAAG,OAA2B,CACrC,IAAIiuE,EAAa,EAAKrlB,YAAY,EAAAtiE,cAAcsC,OAChD,GAAIqlF,EAAY,CACd,IACIzuD,EADkB/xB,OAAOwgF,EAAW57E,KAAKwiB,gBAClB2K,KAC3B,GAAIA,EAEF,OADAl8B,KAAK8xE,YAAc51C,EAAKntB,KACjBpP,EAAO64C,UAAUmyC,EAAW1yD,MAAOiE,EAAKntB,KAAKmlD,iBAI1D,GAAI,EAAex3C,GAAG,EAAAra,YAAYqzB,UAAW,CACvCvM,EAAgBhf,OAAO,EAAe0V,QAAS1V,OAAOgf,EAAc3b,MAAQ,EAAAoa,YAAYlJ,OAC5F,IAAIunE,EAA4B98D,EAAe+S,KAC/C,GAAI+pD,EAAmB,CACrB,IAAI2E,EAAY3E,EAAkBl3E,KAElC,OADA/O,KAAK8xE,YAAc8Y,EACZjrF,EAAO64C,UAAU,EAAGoyC,EAAU12B,iBAQzC,OALAl0D,KAAKkN,MACH,EAAA1C,eAAei7D,iDACfl0D,EAAW1G,OAEb7K,KAAK8xE,YAAc9xE,KAAKkqB,QAAQI,UACzB3qB,EAAO+8C,cAIlB18C,KAAKyqF,4BAA4Bl5E,GAGjC,IAAI2rB,EAASl9B,KAAK8oB,SAASk5C,2BACzBzwD,EACAipB,EACAx6B,KAAK6xE,aAAe5P,GAEtB,IAAK/kC,EAAQ,OAAOv9B,EAAO+8C,cAE3B,OAAQxf,EAAO1vB,MACb,KAAK,EAAAoa,YAAYsQ,MACf,IAAInpB,EAAemuB,EAAQnuB,KAE3B,GADA5E,OAAO4E,GAAQ,EAAAqb,KAAKG,MACR2S,EAAQxgB,GAAG,EAAAra,YAAYs1B,SACjC,OAAO33B,KAAK4+E,sBAA6B1hD,EAAQ2hD,EAAgBtB,GAEnE,IAAItjD,EAAqBiD,EAAQjF,MAMjC,OALA9tB,OAAO8vB,GAAc,GACjBlrB,EAAK2N,GAAG,MAAuB8d,EAAK6vC,YAAYpwC,EAAY,EAAAmuC,WAAWzD,SAAS,KAClF51D,EAAOA,EAAK+jD,iBAEd9yD,KAAK8xE,YAAc/iE,EACZ/O,KAAKL,OAAO64C,UAAUve,EAAYlrB,EAAKmlD,gBAEhD,KAAK,EAAAtsC,YAAY1K,OACf,IAAKld,KAAKg2E,cAAsB94C,GAC9B,OAAOl9B,KAAKL,OAAO+8C,cAEjB3tC,EAAgBmuB,EAAQnuB,KAE5B,OADA5E,OAAO4E,GAAQ,EAAAqb,KAAKG,MACP2S,EAAQxgB,GAAG,EAAAra,YAAYs1B,SAC3B33B,KAAK4+E,sBAA8B1hD,EAAQ2hD,EAAgBtB,IAEpEv9E,KAAK8xE,YAAc/iE,EACZ/O,KAAKL,OAAOi5C,WAAoB1b,EAAQrU,aAAc9Z,EAAKmlD,iBAEpE,KAAK,EAAAtsC,YAAYkQ,UACf,OAAKoF,EAAOxgB,GAAG,EAAAra,YAAY6yE,WAQ3Bl1E,KAAK8xE,YAAc,EAAA1nD,KAAKhnB,IACR85B,EAAQxgB,GAAG,EAAAra,YAAYs1B,UACrCxtB,OAAgD,GAA7B+yB,EAAQzF,mBACpBz3B,KAAKL,OAAOyD,IAAIu/C,QAAoBzlB,EAAQxF,wBAE9C13B,KAAKL,OAAOi5C,WAAuB1b,EAAQrU,aAAc,EAAAsW,WAAWz4B,OAZzE1G,KAAKkN,MACH,EAAA1C,eAAeqgF,+HACft5E,EAAW1G,OAEb7K,KAAK8xE,YAAc,EAAA1nD,KAAKhnB,IACjBpD,KAAKL,OAAO+8C,eASvB,KAAK,EAAA90B,YAAY+I,mBACf,IAAIgI,EAAW34B,KAAK8oB,SAAS8H,gBACRsM,EACnB,KACA,EAAAuiC,QAAqBjlC,EAAK3B,0BAE5B,IAAMF,IAAY34B,KAAKi4E,gBAAgBt/C,GAAY,OAAOh5B,EAAO+8C,cACjE,IAAIzkB,EAAQj4B,KAAK26E,yBAAyBhiD,GAE1C,OADA34B,KAAK8xE,YAAcn5C,EAAS/e,UAAU7K,KAC/B/O,KAAKL,OAAOyD,IAAI60B,GAO3B,OAJAj4B,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEN7K,KAAKL,OAAO+8C,eAGrB,YAAA2iC,4BAAA,SACE9tE,EACAstE,EACAtB,GAEA,IAAI59E,EAASK,KAAKL,OAKdkR,EAAO7Q,KAAK+2E,kBAAkBxlE,EAAWA,WAAYvR,KAAKkqB,QAAQI,WAClEwgE,EAAa9qF,KAAK8xE,YAClB73B,EAAej6C,KAAK8oB,SAAS81C,YAAYrtD,EAAW8B,OAAQrT,KAAKuzE,YAAYtR,gBAEjF,GADAjiE,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,MACnBq2C,EAAc,OAAOt6C,EAAO+8C,cAGjC,IAAKzC,EAAav9B,GAAG,KACnB,OAAO/c,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAOs7C,KAAKpqC,GACZlR,EAAOyD,IAAI0nF,GAAc7wC,EAAe,EAAI,IAC3C,EAAA9a,WAAWz4B,KAIhB,IAAKokF,EAAWpuE,GAAG,KACjB,OAAO/c,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAOs7C,KAAKpqC,GACZlR,EAAOyD,IAAI,IACV,EAAA+7B,WAAWz4B,KAIhB,IAAIivE,EAAiBmV,EAAW52B,eAGhC,GAAI42B,EAAWpuE,GAAG,OAAwBu9B,EAAav9B,GAAG,KAAqB,CAG7E,GAAIouE,EAAWh4B,gBAAgB71B,eAAegd,GAC5C,OAAOt6C,EAAOu4C,OACZy9B,GAAkB,EAAAx2C,WAAWx4B,IACzB,EAAAyiC,SAAS6jC,MACT,EAAA7jC,SAAS4jC,MACbn8D,EACAi6E,EAAW32B,aAAax0D,IAK5B,GAAIs6C,EAAahd,eAAe6tD,GAAa,CAC3C,IAAI70D,EAAUj2B,KAAKi2B,QACnB,IAAM60D,EAAWzV,cAAep7B,EAAao7B,YAAc,CACzD,IACIsI,EADO39E,KAAKuzE,YACK3J,oBAAoBkhB,GACrC16D,EAAqBjmB,OAAO8rB,EAAQ7F,oBAExC,OADApwB,KAAKi4E,gBAAgB7nD,GACdzwB,EAAO07C,GACZ17C,EAAOo4C,MACL49B,GAAkB,EAAAx2C,WAAWx4B,IACzB,EAAA28B,QAAQkpC,OACR,EAAAlpC,QAAQipC,OACZ5sE,EAAO+4C,UAAUilC,EAAU1lD,MAAOpnB,IAEpClR,EAAOyD,IAAI,GACXpD,KAAKgjF,eAAe5yD,EAAoB,CACtCzwB,EAAO64C,UAAUmlC,EAAU1lD,MAAO09C,GAClCh2E,EAAOyD,IAAI62C,EAAa1oB,eAAgBjI,KACvC/X,IAGLvR,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,YAMZ,CAGL,GAAIigF,EAAW7tD,eAAegd,GAC5B,OAAOt6C,EAAOi7C,MAAM,KAAM,CACxB56C,KAAK6/E,kBAAkBhvE,EAAMi6E,EAAY,EAAA1gE,KAAKG,MAAM,GAAO,EAAOhZ,EAAWA,YAC7E5R,EAAOyD,IAAI,IACV,EAAA+7B,WAAWz4B,KAGT,GAAIuzC,EAAahd,eAAe6tD,GAAa,CAC9C70D,EAAUj2B,KAAKi2B,QACnB,IAAM60D,EAAWzV,cAAep7B,EAAao7B,YAAc,CAKrDsI,EADO39E,KAAKuzE,YACK3J,oBAAoBkhB,GACrC16D,EAAqBjmB,OAAO8rB,EAAQ7F,oBAExC,OADApwB,KAAKi4E,gBAAgB7nD,GACdzwB,EAAO07C,GACZ17C,EAAOo4C,MACL49B,GAAkB,EAAAx2C,WAAWx4B,IACzB,EAAA28B,QAAQkpC,OACR,EAAAlpC,QAAQipC,OACZ5sE,EAAO+4C,UAAUilC,EAAU1lD,MAAOpnB,IAEpClR,EAAOyD,IAAI,GACXpD,KAAKgjF,eAAe5yD,EAAoB,CACtCzwB,EAAO64C,UAAUmlC,EAAU1lD,MAAO09C,GAClCh2E,EAAOyD,IAAI62C,EAAa1oB,eAAgBjI,KACvC/X,IAGLvR,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,QAOnB,OAAOlL,EAAOi7C,MAAM,KAAM,CACxBj7C,EAAOs7C,KAAKpqC,GACZlR,EAAOyD,IAAI,IACV,EAAA+7B,WAAWz4B,MAGhB,YAAA44E,yBAAA,SACE/tE,EACAstE,EACAtB,EACAwN,QAAA,IAAAA,OAAA,GAEA,IAAIprF,EAASK,KAAKL,OAClB,OAAQ4R,EAAW6M,aACjB,KAAK,EAAAF,YAAYG,MACflU,QAAQ4gF,GACR,IAAIv3B,EAAYqrB,EAAettD,eAC/B,OAAIiiC,GACEA,EAAUvxD,WAAajC,KAAKi2B,QAAQ3G,eAC/BtvB,KAAKgrF,oBACV7gF,OAAOqpD,EAAU3kD,eAAe,GACP0C,EAAYH,mBACrCmsE,EACAhsE,IAINvR,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAENlL,EAAO+8C,eAEhB,KAAK,EAAAx+B,YAAYW,MACf,IAAIosE,EAAsC15E,EAAYjQ,MAItD,OAHIypF,IACFE,GAAcA,GAEZpM,GAAkB,EAAAz0D,KAAKvmB,IAClBlE,EAAOkE,IAASonF,IAEzBjrF,KAAK8xE,YAAc,EAAA1nD,KAAKtmB,IACjBnE,EAAOmE,IAAImnF,IAEpB,KAAK,EAAA/sE,YAAYc,QACf,IAAImlD,EAAsC5yD,EAAYjQ,MAClDypF,IACF5mB,EAAWW,QACTj6C,QAAQ,GACRs5C,IAGJ,IAAIp1D,EAAO/O,KAAK8oB,SAASo7C,4BAA4BC,EAAU0a,GAE/D,OADA7+E,KAAK8xE,YAAc/iE,EACXA,EAAKvB,MACX,KAAK,EAAgB,IAAKxN,KAAKkqB,QAAQY,SAAU,OAAOnrB,EAAOyD,IAAIu/C,QAAQwhB,IAC3E,KAAK,EAAc,OAAOxkE,EAAO0D,IAAIs/C,QAAQwhB,GAAWvhB,SAASuhB,IACjE,KAAK,EAAgB,IAAKnkE,KAAKkqB,QAAQY,SAAU,OAAOnrB,EAAOyD,IAAIu/C,QAAQwhB,IAC3E,KAAK,EAAc,OAAOxkE,EAAO0D,IAAIs/C,QAAQwhB,GAAWvhB,SAASuhB,IACjE,KAAK,GAAc,OAAOxkE,EAAOkE,IAAIqnF,WAAW/mB,IAChD,KAAK,GAAc,OAAOxkE,EAAOmE,IAAIqnF,WAAWhnB,IAChD,QAAS,OAAOxkE,EAAOyD,IAAIu/C,QAAQwhB,IAGvC,KAAK,EAAAjmD,YAAYmB,OAEf,OADAlV,QAAQ4gF,GACD/qF,KAAKorF,qBAA8C75E,GAE5D,KAAK,EAAA2M,YAAYgB,OAEf,OADA/U,QAAQ4gF,GACD/qF,KAAKqrF,qBAA8C95E,EAAYstE,GAS1E,OALA7+E,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAEb7K,KAAK8xE,YAAc+M,EACZl/E,EAAO+8C,eAGhB,YAAA0uC,qBAAA,SAAqB75E,GACnB,OAAOvR,KAAKy5E,mBAAmBloE,EAAWjQ,QAG5C,YAAA0pF,oBAAA,SACEjR,EACAznE,EACAirE,EACAzW,GAmBA,IAjBA,IAAInnE,EAASK,KAAKL,OACds2B,EAAUj2B,KAAKi2B,QACf3G,EAAiBnlB,OAAO8rB,EAAQ3G,gBAChCgrD,EAAgBnwE,OAAOnK,KAAK8oB,SAAS4H,aAAapB,EAAgB,CAAEyqD,KACpExsD,EAAsBpjB,OAAO8rB,EAAQ1I,qBACrCw2C,EAAYuW,EAAcvrE,KAC1ByrB,EAAOx6B,KAAKuzE,YAGZuS,EAAWtrD,EAAK4uC,aAAarF,GAC7BunB,EAAgB9wD,EAAK4uC,aAAa77C,EAAoBxe,MAGtD7C,EAASoG,EAAYpG,OACrB6H,EAAS,IAAIvM,MAAqB0E,GAClC4nB,GAAW,EACXy3D,EAAoBxR,EAAY7lB,eAC3B7zD,EAAI,EAAGA,EAAI6L,IAAU7L,EAAG,CAC/B,IAAIkR,EAAae,EAAYjS,GACzBwQ,EAAOU,EACP5R,EAAOslD,qBACLjlD,KAAK+2E,kBAA8BxlE,EAAYwoE,EAAW,IAI5DA,EAAY5lB,aAAax0D,GACzB,EAAA+pD,gBAAgB74C,IAAS,EAAAuuB,aAAaooB,MACxCr9C,OAAO,EAAA6hE,kBAAkBn7D,IAAS06E,GAElCz3D,GAAW,EAEb/f,EAAO1T,GAAKwQ,EAId,GAAIijB,EAAU,CACZ0G,EAAKmvC,cAAcmc,GACnBtrD,EAAKmvC,cAAc2hB,GAEnB,IAAIzR,EAAoB5jD,EAAQ4jD,kBAC5BQ,EAAgBr6E,KAAK85E,wBAAwBC,EAAahmE,GAC1Dy3E,EAAgBzuB,QAAQsd,EAAcnxD,OAAQ2B,QAAQgvD,IAI1D,GAAkB,GAAd0D,EAAyC,CAC3C,IAAIkO,EAAezrF,KAAKo6E,wBAAwBL,EAAaM,GACzDqR,EAAe3uB,QAAQ0uB,EAAaviE,OAAQ2B,QAAQgvD,IAExD,OADA75E,KAAK8xE,YAAc/N,EACZ9tC,EAAQ/L,QAAQY,SACnB9qB,KAAKL,OAAO0D,IAAIs/C,QAAQ+oC,GAAe9oC,SAAS8oC,IAChD1rF,KAAKL,OAAOyD,IAAIu/C,QAAQ+oC,IAKxB76E,EAAO7Q,KAAKgjF,eAAe/sD,EAAQ3F,mBAAoB,CACzD3wB,EAAOyD,IAAI8I,GACX+pB,EAAQ/L,QAAQY,SACZnrB,EAAO0D,IAAI02E,EAAY4R,WACvBhsF,EAAOyD,IAAI22E,EAAY4R,WAC3BhsF,EAAOyD,IAAIk3E,EAAchxD,IACzB2M,EAAQ/L,QAAQY,SACZnrB,EAAO0D,IAAIs/C,QAAQ6oC,GAAgB5oC,SAAS4oC,IAC5C7rF,EAAOyD,IAAIu/C,QAAQ6oC,KACtB1kB,GAEH,OADA9mE,KAAK8xE,YAAc/N,EACZ/jE,KAAKqlF,gBAAgBrlF,KAAKy1E,WAAW5kE,IAMhD,IADaypE,EAAct9C,eAAe,EAAAha,aAAaU,aAAa,GASlE,OAPA8W,EAAKmvC,cAAcmc,GACnBtrD,EAAKmvC,cAAc2hB,GACnBtrF,KAAKkN,MACH,EAAA1C,eAAew6E,+CACfle,EAAWj8D,MAAOyvE,EAAczxD,cAElC7oB,KAAK8xE,YAAc/N,EACZpkE,EAAO+8C,cAEhB,IAAIkvC,EAAkB7nB,EAAU7P,eAE5BkkB,EAAQ,IAAI5wE,MAEhB4wE,EAAM3rE,KACJ9M,EAAO66C,UAAUsrC,EAAS7tD,MACxBj4B,KAAKgjF,eAAe/sD,EAAQ3F,mBAAoB,CAC9C3wB,EAAOyD,IAAI8I,GACX+pB,EAAQ/L,QAAQY,SACZnrB,EAAO0D,IAAI02E,EAAY4R,WACvBhsF,EAAOyD,IAAI22E,EAAY4R,WAC3BhsF,EAAOyD,IAAIk3E,EAAchxD,IACzB2M,EAAQ/L,QAAQY,SACZnrB,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACd0jE,KAIP,IAAI+kB,EAAY1hF,OAAOmwE,EAAcntD,aAAa,cAClDhjB,OAAO0hF,EAAUr+E,MAAQ,EAAAoa,YAAYwJ,OACrCgnD,EAAM3rE,KACJ9M,EAAO66C,UAAU8wC,EAAcrzD,MAC7Bt4B,EAAOm5C,KAAKirB,EAAUpR,UAAU,EAC9BhzD,EAAO64C,UAAUstC,EAAS7tD,MAAO2zD,GACjCA,EACQC,EAAWtwD,gBAKzB,IADA,IAAIi6C,EAAYuE,EAAYvE,UACZmW,GAAPtrF,EAAI,EAAe05E,EAAY4R,WAAWtrF,EAAI6L,IAAU7L,EAAG,CAClE,IAAIu1E,EAAY7hE,EAAO1T,GACnBm1E,IAEFI,EAAY51E,KAAKy1E,WAAWG,IAG9BwC,EAAM3rE,KACJ9M,EAAOk4C,MAAMkiC,EAAYpnB,SACvBhzD,EAAO64C,UAAU8yC,EAAcrzD,MAAO2zD,GACtChW,EACA2V,EACAlrF,GAAKsrF,IAWX,OANAvT,EAAM3rE,KACJ9M,EAAO64C,UAAUstC,EAAS7tD,MAAO2zD,IAEnCpxD,EAAKmvC,cAAcmc,GACnBtrD,EAAKmvC,cAAc2hB,GACnBtrF,KAAK8xE,YAAc/N,EACZpkE,EAAOi7C,MAAM,KAAMw9B,EAAOwT,IAGnC,YAAAP,qBAAA,SAAqB95E,EAAqCstE,GACxD,IAAIl/E,EAASK,KAAKL,OAGd4xB,EAAiBstD,EAAettD,eACpC,IAAKA,GAAkBA,EAAe7U,GAAG,EAAAra,YAAYsxB,UAKnD,OAJA3zB,KAAKkN,MACH,EAAA1C,eAAe29D,mCACf52D,EAAW1G,MAAO,WAAYg0E,EAAepzE,YAExC9L,EAAO+8C,cAIhB,IAAIovC,EAAOv6D,EAAe8K,oBAC1B,GAAIyvD,EAAM,CAGR,GAAIA,EAAKlyE,UAAU86C,mBAKjB,OAJA10D,KAAKkN,MACH,EAAA1C,eAAeuhF,sDACfx6E,EAAW1G,MAAO0mB,EAAe9lB,YAE5B9L,EAAO+8C,cAEhB,GAAIovC,EAAKpvE,GAAG,EAAAra,YAAY+0D,SAKtB,OAJAp3D,KAAKkN,MACH,EAAA1C,eAAewhF,mFACfz6E,EAAW1G,MAAO0mB,EAAe9lB,YAE5B9L,EAAO+8C,cAEhB,GAAIovC,EAAKpvE,GAAG,EAAAra,YAAYg1D,WAKtB,OAJAr3D,KAAKkN,MACH,EAAA1C,eAAeyhF,qFACf16E,EAAW1G,MAAO0mB,EAAe9lB,YAE5B9L,EAAO+8C,cAEZovC,EAAKj9D,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GAIjE,IAAIuC,EAAQvC,EAAWuC,MACnBioC,EAAWjoC,EAAM5H,OACjB6H,EAASxC,EAAWwC,OACpBsC,EAAUkb,EAAelb,QACzB61E,GAAY,EACZ7B,EAAQ,IAAI7iF,MAAqBu0C,EAAW,GAE5C4hC,EADO39E,KAAKuzE,YACKhK,oBAAoBvpE,KAAKkqB,QAAQI,WACtDngB,OAAO4xC,GAAYhoC,EAAO7H,QAC1B,IAAK,IAAI7L,EAAI,EAAGyiB,EAAIi5B,EAAU17C,EAAIyiB,IAAKziB,EAAG,CACxC,IAAI0wB,EAAS1a,EAAUA,EAAQnV,IAAI4S,EAAMzT,GAAG2L,MAAQ,KACpD,GAAK+kB,GAAUA,EAAOvjB,MAAQ,EAAAoa,YAAYwJ,MAA1C,CAQA,IAAIriB,EAAegiB,EAAQhiB,KAC3Bs7E,EAAMhqF,EAAI,GAAKL,KAAKL,OAAOk4C,MACzB9oC,EAAK4jD,SACL3yD,KAAKL,OAAO64C,UAAUmlC,EAAU1lD,MAAOj4B,KAAKkqB,QAAQyrD,gBACpD31E,KAAK+2E,kBAAkBhjE,EAAO1T,GAAY0wB,EAAQhiB,KAAM,GACxDA,EAAKmlD,eACGnjC,EAAQwK,mBAbhBv7B,KAAKkN,MACH,EAAA1C,eAAeq2D,oCACf/sD,EAAMzT,GAAGwK,MAAOiJ,EAAMzT,GAAG2L,KAAMulB,EAAe9lB,YAEhDygF,GAAY,EAahB,OADAlsF,KAAK8xE,YAAcvgD,EAAexiB,KAAK+jD,gBACnCo5B,EAAkBvsF,EAAO+8C,eAG7B2tC,EAAM,GAAK1qF,EAAO66C,UAChBmjC,EAAU1lD,MACVj4B,KAAKy1E,WACHz1E,KAAK44E,eAAernD,KAKxB84D,EAAMA,EAAMn+E,OAAS,GAAKvM,EAAO64C,UAAUmlC,EAAU1lD,MAAOj4B,KAAKkqB,QAAQyrD,gBAEzE31E,KAAK8xE,YAAcvgD,EAAexiB,KAC3BpP,EAAOi7C,MAAM,KAAMyvC,EAAOrqF,KAAKkqB,QAAQyrD,kBAGhD,YAAA4J,qBAAA,SACEhuE,EACAstE,EACAtB,GAEA,IAAI59E,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YAGZr2C,EAASl9B,KAAK8oB,SAASy4C,iBACzBhwD,EAAWA,WACXipB,GAEF,IAAK0C,EAAQ,OAAOv9B,EAAO+8C,cAC3B,GAAIxf,EAAO1vB,MAAQ,EAAAoa,YAAYiG,gBAK7B,OAJA7tB,KAAKkN,MACH,EAAA1C,eAAew7D,yEACfz0D,EAAWA,WAAW1G,OAEjB7K,KAAKL,OAAO+8C,cAErB,IAGInrB,EAHAyC,EAAiCkJ,EACjC/T,EAA8B,KAC9Bta,EAAgB0C,EAAW1C,cAqB/B,OAdEsa,GAJCta,GACoD,QAApD0iB,EAAiBstD,EAAettD,iBACjCA,EAAe7U,GAAG,EAAAra,YAAYqoB,SAEd1qB,KAAK8oB,SAAS4H,aAC5BsD,EACAzC,EAAe1iB,cACf,EAAA4wD,QAAqBjlC,EAAK3B,0BAGZ74B,KAAK8oB,SAAS02C,8BAC5BxrC,EACAnlB,EACA2rB,EAAKynC,eAAepiD,OACpB,EAAA4/C,QAAqBjlC,EAAK3B,yBAC1BtnB,KAIAstE,GAAkB,EAAAz0D,KAAKG,OAAMgzD,GAAe,GACzCv9E,KAAKmsF,mBAAmBhjE,EAAe5X,EAAWnB,UAAWmtE,EAAahsE,IAFtD5R,EAAO+8C,eAMpC,YAAA0pC,kBAAA,SAAkBj9D,EAAsB29C,GACtC,IAAInuC,EAAWxP,EAAckT,oBAC7B,GAAI1D,EAGF,OADKA,EAAS9J,aAAa,EAAAhH,eAAe1K,SAASnd,KAAKi4E,gBAAgBt/C,GACjEA,EAIT,IAAIsuC,EAAY99C,EAAc+S,KAC9B,GAAI+qC,EAAW,CACb,IAAImlB,EAAWpsF,KAAKomF,kBAAkBnf,EAAWH,GACjDnuC,EAAW,IAAI,EAAA9O,SACb,EAAA7mB,cAAcwC,YACd,IAAI,EAAAskB,kBACF,EAAA9mB,cAAcwC,YACd2jB,EAEsBijE,EAASj6E,YAAayP,SAE9CwqE,EAASxyE,UACT,WAKF+e,EAAW,IAAI,EAAA9O,SACb,EAAA7mB,cAAcwC,YACd,IAAI,EAAAskB,kBACF,EAAA9mB,cAAcwC,YACd2jB,EACAnpB,KAAKi2B,QAAQxM,8BAA8B,EAAAzmB,cAAcwC,YACvD,EAAAnD,YAAYqzB,SAAW,EAAArzB,YAAYuc,cAGvC,IAAI,EAAAmY,UAAU/2B,KAAKi2B,QAAS,KAAM9M,EAAcpa,KAAMoa,EAAcpa,MACpE,MAIJ4pB,EAAS9P,aAAeM,EAAcN,aAAe,EAAAnmB,mBAAqB,cAC1Ei2B,EAAS9b,IAAI,EAAAxa,YAAY6yE,UACzBv8C,EAAS12B,UAAUy2B,oBAAoB,GAAIC,GAC3CxP,EAAckT,oBAAsB1D,EACpC,IAAI69C,EAAex2E,KAAKuzE,YACpB/4C,EAAO7B,EAAS6B,KACpBx6B,KAAKuzE,YAAc/4C,EAGnB,IAAI5gB,EAAY+e,EAAS/e,UACrBja,EAASK,KAAKL,OACdg2E,EAAiB31E,KAAKkqB,QAAQyrD,eAC9ByC,EAAQ,IAAI5wE,MASZ6kF,EAAYrsF,KAAK44E,eAAezvD,GAUpC,GATIA,EAAcpa,KAAKymE,YAAW6W,EAAYrsF,KAAKy1E,WAAW4W,IAC9DjU,EAAM3rE,KACJ9M,EAAO07C,GACL17C,EAAOo4C,MAAM49B,GAAkB,EAAAx2C,WAAWx4B,IAAM,EAAA28B,QAAQkpC,OAAS,EAAAlpC,QAAQipC,OACvE5sE,EAAO64C,UAAU,EAAGm9B,IAEtBh2E,EAAO66C,UAAU,EAAG6xC,KAGpBplB,EAAW,CACb,IAAI7sC,EAAiBxgB,EAAUwgB,eAC3Bi7B,EAAgBj7B,EAAeluB,OAC/BmsC,EAAW,IAAI7wC,MAAqB,EAAI6tD,GAC5Chd,EAAS,GAAK14C,EAAO64C,UAAU,EAAGm9B,GAClC,IAAK,IAAIt1E,EAAI,EAAGA,EAAIg1D,IAAiBh1D,EACnCg4C,EAASh4C,EAAI,GAAKV,EAAO64C,UAAUn4C,EAAI,EAAG+5B,EAAe/5B,GAAG6zD,gBAG9DkkB,EAAM3rE,KACJ9M,EAAO66C,UAAU,EACfx6C,KAAKgjF,eAAe74E,OAAO88D,EAAU5qC,qBAAsBgc,EAAUyuB,GAAY,GAAO,KAI9F9mE,KAAK64E,wBAAwB1vD,EAAeivD,GAC5C,IAAIv+D,EAAO7Z,KAAKikF,6BAA6BzpD,EAAM76B,EAAO64C,UAAU,EAAGm9B,GAAiBxsD,EAAcpa,KAAMqpE,GAC5G59C,EAAK2vC,mBACLnqE,KAAKuzE,YAAciD,EAGnB,IAAIp2B,EAAUpgD,KAAKk0E,mBAAmBt6D,EAAUwgB,eAAgBxgB,EAAUzK,WAAYyK,EAAUugB,UAC5FS,EAASjC,EAASI,cAClB6mB,EAAW,IAAIp4C,MACfuiF,EAAc,EAAInwE,EAAUwgB,eAAeluB,OAC3CyqE,EAAY/7C,EAAO1uB,OACvB,GAAIyqE,EAAYoT,EACd,IAAS1pF,EAAI0pF,EAAa1pF,EAAIs2E,IAAat2E,EAAGu/C,EAASnzC,KAAKmuB,EAAOv6B,GAAG0O,KAAKmlD,gBAE7E,IAAI+f,EAAUt0E,EAAOggD,YAAYhnB,EAAS9P,aAAcu3B,EAASR,EAAU/lC,GAE3E,OADA8e,EAASkC,SAASl7B,EAAQs0E,GACnBt7C,GAGT,YAAAwzD,mBAAA,SAEEhjE,EAEAm+D,EAEA/J,EAEAzW,GAEA,IAAIglB,EAAO9rF,KAAKomF,kBAAkBj9D,EAAe29C,GAC7CglB,EAAKj9D,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAY9d,GAC/D,IAAIj2D,EAAO7Q,KAAKmmF,kBACd2F,EACAxE,EACAxgB,EACA9mE,KAAKkqB,QAAQI,UAAU6pC,aAAan0D,KAAKL,QACzC49E,GAKF,OAHI,EAAAvR,kBAAkBn7D,IAAS,EAAAsuB,WAAWga,OACxCn5C,KAAK8xE,YAAc3oD,EAAcpa,MAE5B8B,GAQT,YAAA2uE,gCAAA,SACEjuE,EACAkwD,EACA8b,GAEA,IAAI59E,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YAEhBvzE,KAAKyqF,4BAA4Bl5E,GAEjC,IACI2rB,EADWl9B,KAAK8oB,SACEy4C,iBAAiBhwD,EAAYipB,EAAMinC,GACzD,IAAKvkC,EAAQ,OAAOv9B,EAAO+8C,cAG3B,OAFIxf,EAAOrO,aAAa,EAAAhH,eAAerK,SAASxd,KAAK4kF,YAAYrzE,GAEzD2rB,EAAO1vB,MACb,KAAK,EAAAoa,YAAY1K,OACf,IAAKld,KAAKg2E,cAAsB94C,GAAS,OAAOv9B,EAAO+8C,cACvD,IAAIoF,EAAsB5kB,EAAQnuB,KAElC,OADA5E,OAAO23C,GAAc,EAAA13B,KAAKG,MACb2S,EAAQxgB,GAAG,EAAAra,YAAYs1B,SAC3B33B,KAAK4+E,sBAA8B1hD,EAAQukC,EAAS8b,IAE7Dv9E,KAAK8xE,YAAchwB,EACZniD,EAAOi5C,WAAoB1b,EAAQrU,aAAci5B,EAAWoS,iBAErE,KAAK,EAAAtsC,YAAYkQ,UACf,IAAIw0D,EAAUniF,OAAmB+yB,EAAQrd,QACzC,OADkD1V,OAAOmiF,EAAQ9+E,MAAQ,EAAAoa,YAAY2P,MAChFv3B,KAAKi2E,YAAkBqW,IAI5BtsF,KAAK8xE,YAAc,EAAA1nD,KAAKhnB,IACR85B,EAAQxgB,GAAG,EAAAra,YAAYs1B,UACrCxtB,OAAgD,GAA7B+yB,EAAQzF,mBACpBz3B,KAAK4+E,sBAAiC1hD,EAAQukC,EAAS8b,KAEhEpzE,OAAmB+yB,EAAQnuB,MAAQ,EAAAqb,KAAKhnB,KACjCzD,EAAOi5C,WAAuB1b,EAAQrU,aAAc,EAAAsW,WAAWz4B,QATpE1G,KAAK8xE,YAAc,EAAA1nD,KAAKhnB,IACjBpD,KAAKL,OAAO+8C,eAUvB,KAAK,EAAA90B,YAAYwJ,MACfjnB,OAAe+yB,EAAQ3B,cAAgB,GACvC,IAAIgqD,EAAWvlF,KAAK+2E,kBAAkB5sE,OAAOnK,KAAK8oB,SAAS41C,uBAAwB1+D,KAAKkqB,QAAQI,WAEhG,OADAtqB,KAAK8xE,YAAsB50C,EAAQnuB,KAC5BpP,EAAOm5C,KACJ5b,EAAQnuB,KAAK4jD,SACbz1B,EAAQnuB,KAAK2N,GAAG,GACxB6oE,EACQroD,EAAQnuB,KAAKmlD,eACbh3B,EAAQ3B,cAGpB,KAAK,EAAA3T,YAAYoJ,mBACf,IAAIC,EAAsCiM,EAAQjM,gBAClD,GAAIA,EAAiB,CACnB,IAAIpwB,EAASb,KAAK8oB,SAAS8H,gBAAgBK,EAAiB,MAC5D,GAAIpwB,EAAQ,OAAOb,KAAKmmF,kBAAkBtlF,EAAQ,GAAI0Q,EAAY,GAEpE,OAAO5R,EAAO+8C,cAEhB,KAAK,EAAA90B,YAAYuJ,SACf,IAAIuK,EAAiBvxB,OAAkB+yB,EAAQxB,gBAC/C,OAAO17B,KAAKmmF,kBAAkBzqD,EAAgB,GAAInqB,EAChDvR,KAAK+2E,kBAAkB5sE,OAAOnK,KAAK8oB,SAAS41C,uBAAwB1+D,KAAKkqB,QAAQI,YAGrF,KAAK,EAAA1C,YAAY+I,mBACf,IAAI1uB,EAA+Bi7B,EAEnC,GAAIj7B,EAAUya,GAAG,EAAAra,YAAYmxB,QAAS,CACpC,IAAImF,EAAW34B,KAAKk2E,kCAClBj0E,EACA,GACA,EAAAw9D,UACAluD,GAEF,OAAgB,MAAZonB,EACKh5B,EAAO+8C,eAEd18C,KAAK8xE,YAAcn5C,EAAS5pB,KACrBpP,EAAOyD,IAAIpD,KAAK26E,yBAAyBhiD,KAQpD,OAJA34B,KAAKkN,MACH,EAAA1C,eAAe+hF,wEACfh7E,EAAW1G,MAAO5I,EAAUrB,MAEvBjB,EAAO+8C,cAOlB,OAJA18C,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAENlL,EAAO+8C,eAGhB,YAAA+iC,yBAAA,SACEluE,EACAkwD,EACA8b,GAEA,IAAI3oE,EAASrD,EAAWqD,OACpBC,EAAStD,EAAWsD,OACpBqnE,EAAYl8E,KAAKuzE,YAEjB+I,EAAWt8E,KAAKL,OAAOslD,qBACzBjlD,KAAKu8E,cACHv8E,KAAK+2E,kBAAkBxlE,EAAWoD,UAAW,EAAAyV,KAAKxmB,MAClD5D,KAAK8xE,cAKT,GACE,EAAApoB,gBAAgB4yB,IAAa,EAAAl9C,aAAaooB,OAC1C,EAAAwkB,kBAAkBsQ,IAAa,EAAAn9C,WAAWz4B,IAE1C,OAAO,EAAAulE,iBAAiBqQ,GACpBt8E,KAAK+2E,kBAAkBniE,EAAQ6sD,GAC/BzhE,KAAK+2E,kBAAkBliE,EAAQ4sD,GAGrC,IAAI8f,EAAqC,GAAdhE,EAEvBiP,EAAatQ,EAAUjT,OAC3BjpE,KAAKuzE,YAAciZ,EACnB,IAAIC,EAAazsF,KAAK+2E,kBAAkBniE,EAAQ6sD,EAAS8f,GACrDmL,EAAa1sF,KAAK8xE,YAClB6a,EAA2B3sF,KAAKqyE,oBAAoBroD,IAAIyiE,GAExDG,EAAa1Q,EAAUjT,OAC3BjpE,KAAKuzE,YAAcqZ,EACnB,IAAIC,EAAa7sF,KAAK+2E,kBAAkBliE,EAAQ4sD,EAAS8f,GACrDuL,EAAa9sF,KAAK8xE,YAClBib,EAA2B/sF,KAAKqyE,oBAAoBroD,IAAI6iE,GAExD1nB,EAAa,EAAA/6C,KAAK4pC,kBAAkB04B,EAAYI,GAAY,GAChE,IAAK3nB,EAMH,OALAnlE,KAAKkN,MACH,EAAA1C,eAAe29D,mCACftzD,EAAOhK,MAAOiiF,EAAWrhF,WAAYihF,EAAWjhF,YAElDzL,KAAK8xE,YAAcrQ,EACZzhE,KAAKL,OAAO+8C,cAErB+vC,EAAazsF,KAAK6/E,kBAChB4M,EACAC,EAAYvnB,GACZ,GAAO,EACPvwD,GAEFi4E,EAAa7sF,KAAK6/E,kBAChBgN,EACAC,EAAY3nB,GACZ,GAAO,EACPtwD,GAEF7U,KAAK8xE,YAAc3M,EAEfwnB,GAA4BI,EACzBJ,GAIHE,EAAa7sF,KAAKy1E,WAAWoX,GAC7BE,GAA2B,IAJ3BN,EAAazsF,KAAKy1E,WAAWgX,GAC7BE,GAA2B,IAKnBA,GAA4BxnB,EAAWqQ,YAE/CiX,EAAazsF,KAAKqkF,gBAAgBoI,EAAYD,EAAYtQ,GAC1D2Q,EAAa7sF,KAAKqkF,gBAAgBwI,EAAYD,EAAY1Q,IAI9DuQ,EAAazsF,KAAKikF,6BAA6BuI,EAAYC,EAAYtnB,GACvEqnB,EAAWriB,mBAEX0iB,EAAa7sF,KAAKikF,6BAA6B2I,EAAYC,EAAY1nB,GACvEynB,EAAWziB,mBAEXnqE,KAAKuzE,YAAc2I,EACnBA,EAAUhR,cAAcshB,EAAYI,GAEpC,IAAI/7E,EAAO7Q,KAAKL,OAAO07C,GAAGihC,EAAUmQ,EAAYI,GAGhD,OAFA1iF,OAAOwiF,GAA4BI,GAC/BJ,GAA0B3sF,KAAKqyE,oBAAoB7nD,IAAI3Z,GACpDA,GAGT,YAAA6uE,8BAAA,SACEnuE,EACAstE,EACAtB,GAEA,IAAI59E,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YAGZyZ,EAAWhtF,KAAK+2E,kBAClBxlE,EAAWiE,QACXqpE,EAAe4C,WAAU,GAK3B,GAAI,EAAA/3B,gBAAgBsjC,IAAa,EAAA5tD,aAAauuB,YAAa,OAAOq/B,EAIlE,IASIn8E,EATA8sE,EAA0B,KAW9B,OAVIkB,GAAkB,EAAAz0D,KAAKG,OACzBozD,EAAYnjD,EAAK4uC,aAAappE,KAAK8xE,aACnCkb,EAAWrtF,EAAO+4C,UAChBilC,EAAU1lD,MACV+0D,IAMIz7E,EAAWI,UACjB,KAAK,EAAAtE,MAAMoa,UAGT,GAAIznB,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaqC,aAC5C,CACZ,IAAI2Z,EAAa3B,EAAS3gB,GAAG,EAAAra,YAAYqzB,UAOzC,GANkB,OAAdioD,GAAuB3+C,IACzBguD,EAAW,EAAAlhB,iBAAiBkhB,GAC5BxyD,EAAKmvC,cAAcgU,GACnBA,EAAY,MAEd9sE,EAAO7Q,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAASw3E,EAAUz7E,GACrEytB,EAAY,MAChB,OAAOnuB,EAQX,OALA7Q,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAET8yE,GAAWnjD,EAAKmvC,cAAcgU,GAC3Bh+E,EAAO+8C,cAGhB,OAAQ18C,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAAS2uC,OACTiV,EACArtF,EAAOyD,IAAI,IAEb,MAEF,KAAK,EACL,KAAK,EACH,IAAI8mB,EAAUlqB,KAAKkqB,QACnBrZ,EAAOlR,EAAOu4C,OACZhuB,EAAQY,SACJ,EAAAse,SAASi5C,OACT,EAAAj5C,SAAS2uC,OACbiV,EACAhtF,KAAK8xE,YAAY1d,YAAYz0D,IAE/B,MAEF,KAAK,EACL,KAAK,EACHkR,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASi5C,OACT2K,EACArtF,EAAO0D,IAAI,IAEb,MAEF,KAAK,GACHwN,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASk5C,OACT0K,EACArtF,EAAOkE,IAAI,IAEb,MAEF,KAAK,GACHgN,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASm5C,OACTyK,EACArtF,EAAOmE,IAAI,IAEb,MAEF,QAKE,OAJA9D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAEpC9L,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMqa,YAGT,GAAI1nB,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAC5C,IAAI6U,EAEE8L,EADN,GADI9L,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAasC,aAC5C,CACR0Z,EAAa3B,EAAS3gB,GAAG,EAAAra,YAAYqzB,UAOzC,GANkB,OAAdioD,GAAuB3+C,IACzBguD,EAAW,EAAAlhB,iBAAiBkhB,GAC5BxyD,EAAKmvC,cAAcgU,GACnBA,EAAY,MAEd9sE,EAAO7Q,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAASw3E,EAAUz7E,GACrE8rB,EAAS3gB,GAAG,EAAAra,YAAYqzB,UAAW,MACvC,OAAO7kB,EAQX,OALA7Q,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAET8yE,GAAWnjD,EAAKmvC,cAAcgU,GAC3Bh+E,EAAO+8C,cAGhB,OAAQ18C,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASo5C,OACTwK,EACArtF,EAAOyD,IAAI,IAEb,MAEF,KAAK,EACL,KAAK,EACC8mB,EAAUlqB,KAAKkqB,QACnBrZ,EAAOlR,EAAOu4C,OACZhuB,EAAQY,SACJ,EAAAse,SAASq5C,OACT,EAAAr5C,SAASo5C,OACbwK,EACAhtF,KAAK8xE,YAAY1d,YAAYz0D,IAE/B,MAEF,KAAK,EACL,KAAK,EACHkR,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASq5C,OACTuK,EACArtF,EAAO0D,IAAI,IAEb,MAEF,KAAK,GACHwN,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASs5C,OACTsK,EACArtF,EAAOkE,IAAI,IAEb,MAEF,KAAK,GACHgN,EAAOlR,EAAOu4C,OACZ,EAAA9O,SAASu5C,OACTqK,EACArtF,EAAOmE,IAAI,IAEb,MAEF,QAKE,OAJA9D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAEpC9L,EAAO+8C,cAGlB,MAEF,QAEE,OADAvyC,QAAO,GACAxK,EAAO+8C,cAIlB,IAAI5zB,EAAW9oB,KAAK8oB,SAChBoU,EAASpU,EAASy4C,iBAAiBhwD,EAAWiE,QAASglB,GAC3D,IAAK0C,EAEH,OADIygD,GAAWnjD,EAAKmvC,cAAcgU,GAC3Bh+E,EAAO+8C,cAIhB,IAAKihC,EACH,OAAO39E,KAAKykF,eACVvnD,EACArsB,EACAU,EAAWiE,QACXsT,EAAS41C,sBACT51C,EAAS61C,0BACT,GAKJ,IAAIsuB,EAAWjtF,KAAKykF,eAClBvnD,EACArsB,EACAU,EAAWiE,QACXsT,EAAS41C,sBACT51C,EAAS61C,0BACT,GAGF3+D,KAAK8xE,YAAc6L,EAAU5uE,KAC7ByrB,EAAKmvC,cAAcgU,GACnB,IAAIjI,EAAaiI,EAAU5uE,KAAKmlD,eAEhC,OAAOv0D,EAAOi7C,MAAM,KAAM,CACxBqyC,EACAttF,EAAO64C,UAAUmlC,EAAU1lD,MAAOy9C,IACjCA,IAGL,YAAAiK,6BAAA,SACEpuE,EACAstE,EACAtB,GAEA,IAEI1sE,EAFAlR,EAASK,KAAKL,OACdmiF,GAAW,EAGf,OAAQvwE,EAAWI,UACjB,KAAK,EAAAtE,MAAM0X,KAQT,GAPAlU,EAAO7Q,KAAK+2E,kBACVxlE,EAAWiE,QACXqpE,EAAe4C,WAAU,GAKvBzhF,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAa+B,MAC5C,OAAO/kB,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAAS3E,EAAMU,GAMrF,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAEnC9L,EAAO+8C,cAIhB,MAEF,KAAK,EAAArvC,MAAM4X,MACT,GAAI1T,EAAWiE,QAAQhI,MAAQ,EAAAD,SAASE,UAClB8D,EAAWiE,QAAS4I,aAAe,EAAAF,YAAYc,SAC/CzN,EAAWiE,QAAS4I,aAAe,EAAAF,YAAYW,OAClE,CAEDhO,EAAO7Q,KAAKs/E,yBAA4C/tE,EAAWiE,QAASqpE,EAAgB,GAAkB,GAE1G7+E,KAAKkqB,QAAQ4Q,WAAW96B,KAAK+7E,iBAAiBlrE,EAAMU,EAAW1G,OACnE,MAUF,GAPAgG,EAAO7Q,KAAK+2E,kBACVxlE,EAAWiE,QACXqpE,EAAe4C,WAAU,GAKvBzhF,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaiC,OAC5C,OAAOjlB,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAAS3E,EAAMU,GAMrF,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAEnC9L,EAAO+8C,cAGhB,OAAQ18C,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASo5C,OAAQ7iF,EAAOyD,IAAI,GAAIyN,GACrD,MAEF,KAAK,EACL,KAAK,EACHA,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASq5C,OACT,EAAAr5C,SAASo5C,OACbxiF,KAAK8xE,YAAY3d,aAAax0D,GAC9BkR,GAEF,MAEF,KAAK,EACL,KAAK,EACHA,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASq5C,OAAQ9iF,EAAO0D,IAAI,GAAIwN,GACrD,MAEF,KAAK,GACHA,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ4pD,OAAQr8E,GACpC,MAEF,KAAK,GACHA,EAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQ6pD,OAAQt8E,GACpC,MAEF,QACE7Q,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAE1CoF,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMoa,UAST,GARAq6D,GAAW,EACXjxE,EAAO7Q,KAAK+2E,kBACVxlE,EAAWiE,QACXqpE,EAAe4C,WAAU,GAKvBzhF,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAagC,YAC5C,CAEZ,GADAnU,EAAO7Q,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAAS3E,EAAMU,GACjE8rB,EAAS3gB,GAAG,EAAAra,YAAYqzB,UAAW,MACvC,OAAO7kB,EAOX,OAJA7Q,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAEpC9L,EAAO+8C,cAGhB,OAAQ18C,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS2uC,OAAQlnE,EAAM7Q,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,KAAK,EACL,KAAK,EACHyN,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASi5C,OACT,EAAAj5C,SAAS2uC,OACblnE,EACA7Q,KAAK8xE,YAAY1d,YAAYz0D,IAE/B,MAEF,KAAK,EACL,KAAK,EACHkR,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASi5C,OAAQxxE,EAAMlR,EAAO0D,IAAI,IACvD,MAEF,KAAK,GACHwN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASk5C,OAAQzxE,EAAMlR,EAAOkE,IAAI,IACvD,MAEF,KAAK,GACHgN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASm5C,OAAQ1xE,EAAMlR,EAAOmE,IAAI,IACvD,MAEF,QACE9D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAE3CoF,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMqa,YAST,GARAo6D,GAAW,EACXjxE,EAAO7Q,KAAK+2E,kBACVxlE,EAAWiE,QACXqpE,EAAe4C,WAAU,GAKvBzhF,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAE5C,GADI6U,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAakC,YAC5C,CAEZ,GADArU,EAAO7Q,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAAS3E,EAAMU,GACjE8rB,EAAS3gB,GAAG,EAAAra,YAAYqzB,UAAW,MACvC,OAAO7kB,EAOX,OAJA7Q,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAEpC9L,EAAO+8C,cAGhB,OAAQ18C,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASo5C,OAAQ3xE,EAAMlR,EAAOyD,IAAI,IACvD,MAEF,KAAK,EACL,KAAK,EACHyN,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAASq5C,OACT,EAAAr5C,SAASo5C,OACb3xE,EACA7Q,KAAK8xE,YAAY1d,YAAYz0D,IAE/B,MAEF,KAAK,EACL,KAAK,EACHkR,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASq5C,OAAQ5xE,EAAMlR,EAAO0D,IAAI,IACvD,MAEF,KAAK,GACHwN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASs5C,OAAQ7xE,EAAMlR,EAAOkE,IAAI,IACvD,MAEF,KAAK,GACHgN,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASu5C,OAAQ9xE,EAAMlR,EAAOmE,IAAI,IACvD,MAEF,QACE9D,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,KAAM7K,KAAK8xE,YAAYrmE,YAE3CoF,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMka,YAQT,GAPA1W,EAAO7Q,KAAK+2E,kBACVxlE,EAAWiE,QACXqpE,EAAe4C,WAAU,GAKvBzhF,KAAK8xE,YAAYp1D,GAAG,KAEtB,GADI6U,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAamC,KAC5C,OAAOnlB,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAAS3E,EAAMU,GAKvFV,EAAO7Q,KAAKotF,eAAev8E,EAAM7Q,KAAK8xE,aACtC9xE,KAAK8xE,YAAc,EAAA1nD,KAAKxmB,KACxB,MAEF,KAAK,EAAAyJ,MAAMma,MAYT,GAXA3W,EAAO7Q,KAAK+2E,kBACVxlE,EAAWiE,QACXqpE,GAAkB,EAAAz0D,KAAKG,KACnB,EAAAH,KAAKhnB,IACLy7E,EAAeniE,GAAG,GAChB,EAAA0N,KAAK/mB,IACLw7E,EAAc,GAKlB7+E,KAAK8xE,YAAYp1D,GAAG,KAAsB,CAC5C,IAAI6U,EAEE8L,EADN,GADI9L,EAAiBvxB,KAAK8xE,YAAYvgD,eAGpC,GADI8L,EAAW9L,EAAeyL,eAAe,EAAAha,aAAaoC,aAC5C,OAAOplB,KAAK0kF,qBAAqBrnD,EAAU9rB,EAAWiE,QAAS3E,EAAMU,GAMrF,OAJAvR,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAEnC9L,EAAO+8C,cAShB,OAPE7rC,EAAO7Q,KAAK6/E,kBAAkBhvE,EAC5B7Q,KAAK8xE,YAAa9xE,KAAK8xE,YAAY9M,SACnC,GAAO,EACPzzD,EAAWiE,SAIPxV,KAAK8xE,YAAYtkE,MACvB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS06C,OAAQjzE,EAAMlR,EAAOyD,KAAK,IACxD,MAEF,KAAK,EACL,KAAK,EACHyN,EAAOlR,EAAOu4C,OACZl4C,KAAKkqB,QAAQY,SACT,EAAAse,SAAS26C,OACT,EAAA36C,SAAS06C,OACbjzE,EACA7Q,KAAK8xE,YAAYzd,eAAe10D,IAElC,MAEF,KAAK,EACL,KAAK,EACHkR,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS26C,OAAQlzE,EAAMlR,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACErD,KAAKkN,MACH,EAAA1C,eAAeo6D,2CACfrzD,EAAW1G,MAAO,IAAK7K,KAAK8xE,YAAYrmE,YAE1CoF,EAAOlR,EAAO+8C,cAGlB,MAEF,KAAK,EAAArvC,MAAMmqD,OAKT,OAJAx3D,KAAKkN,MACH,EAAA1C,eAAewoB,wBACfzhB,EAAW1G,OAENlL,EAAO+8C,cAEhB,QAEE,OADAvyC,QAAO,GACAxK,EAAO+8C,cAGlB,IAAKolC,EAAU,OAAOjxE,EACtB,IAAIiY,EAAW9oB,KAAK8oB,SAChBoU,EAASpU,EAASy4C,iBAAiBhwD,EAAWiE,QAASxV,KAAKuzE,aAChE,OAAKr2C,EACEl9B,KAAKykF,eACVvnD,EACArsB,EACAU,EAAWiE,QACXsT,EAAS41C,sBACT51C,EAAS61C,yBACTkgB,GAAkB,EAAAz0D,KAAKG,MAPL5qB,EAAO+8C,eAY7B,YAAAojC,uBAAA,SAAuBjvE,EAAqB9B,GAC1C,IAAIpP,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YAChB,OAAQxkE,EAAKvB,MACX,KAAK,EACCgtB,EAAK4yC,YAAYv8D,EAAM9B,KACzB8B,EAAO7Q,KAAKkqB,QAAQS,WAAW,GAC3BhrB,EAAOo4C,MAAM,EAAAzU,QAAQ+pD,cAAex8E,GACpClR,EAAOu4C,OAAO,EAAA9O,SAASmmC,OACrB5vE,EAAOu4C,OAAO,EAAA9O,SAASkmC,OACrBz+D,EACAlR,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,KAAK,EACCo3B,EAAK4yC,YAAYv8D,EAAM9B,KACzB8B,EAAO7Q,KAAKkqB,QAAQS,WAAW,GAC3BhrB,EAAOo4C,MAAM,EAAAzU,QAAQgqD,eAAgBz8E,GACrClR,EAAOu4C,OAAO,EAAA9O,SAASmmC,OACrB5vE,EAAOu4C,OAAO,EAAA9O,SAASkmC,OACrBz+D,EACAlR,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,KAAK,EACCo3B,EAAK4yC,YAAYv8D,EAAM9B,KACzB8B,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASimC,OAC5Bx+D,EACAlR,EAAOyD,IAAI,OAGf,MAEF,KAAK,EACCo3B,EAAK4yC,YAAYv8D,EAAM9B,KACzB8B,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAASimC,OAC5Bx+D,EACAlR,EAAOyD,IAAI,SAGf,MAEF,KAAK,GACCo3B,EAAK4yC,YAAYv8D,EAAM9B,KAEzB8B,EAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS4jC,MAC5Bn8D,EACAlR,EAAOyD,IAAI,KAMnB,OAAOyN,GAIT,YAAAkrE,iBAAA,SAAiBlrE,EAAqBhG,GACpC,IAAI89D,EAAiB3oE,KAAKuzE,YAAY5K,eAClCj9D,EAASb,EAAMa,OACfA,EAAOqU,eAAiB,IAAGrU,EAAOqU,eAAiB/f,KAAKL,OAAOspD,iBAAiBv9C,EAAOC,iBAC3Fd,EAAMowB,aAAepqB,EACrB83D,EAAe1vC,eAAexsB,KAAK5B,IAMrC,YAAAuiF,eAAA,SAAev8E,EAAqB9B,GAClC,IAAIpP,EAASK,KAAKL,OAClB,OAAQoP,EAAKvB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACHqD,EAAO7Q,KAAK8/E,uBAAuBjvE,EAAM9B,GAG3C,KAAK,EACL,KAAK,EACH,OAAOpP,EAAOo4C,MAAM,EAAAzU,QAAQipC,OAAQ17D,GAEtC,KAAK,EACL,KAAK,EACH,OAAOlR,EAAOo4C,MAAM,EAAAzU,QAAQkpC,OAAQ37D,GAEtC,KAAK,EAAoB7Q,KAAKqyE,oBAAoBroD,IAAInZ,KAAOA,EAAO7Q,KAAKqlF,gBAAgBx0E,IACzF,KAAK,EACH,OAAOlR,EAAOo4C,MAAmB,IAAbhpC,EAAK8tC,KAAa,EAAAvZ,QAAQkpC,OAAS,EAAAlpC,QAAQipC,OAAQ17D,GAEzE,KAAK,GACH,OAAOlR,EAAOu4C,OAAO,EAAA9O,SAASokC,MAAO38D,EAAMlR,EAAOkE,IAAI,IAExD,KAAK,GACH,OAAOlE,EAAOu4C,OAAO,EAAA9O,SAASqkC,MAAO58D,EAAMlR,EAAOmE,IAAI,IAKxD,QAEE,OADAqG,QAAO,GACAxK,EAAOyD,IAAI,KAMxB,YAAAm5E,cAAA,SAAc1rE,EAAqB9B,GACjC,IAAIpP,EAASK,KAAKL,OAClB,OAAQoP,EAAKvB,MACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACHqD,EAAO7Q,KAAK8/E,uBAAuBjvE,EAAM9B,GAG3C,KAAK,GACL,KAAK,EACL,KAAK,EACH,OAAO8B,EAET,KAAK,EACL,KAAK,EACH,OAAOlR,EAAOu4C,OAAO,EAAA9O,SAAS6jC,MAAOp8D,EAAMlR,EAAO0D,IAAI,IAExD,KAAK,EAAoBrD,KAAKqyE,oBAAoBroD,IAAInZ,KAAOA,EAAO7Q,KAAKqlF,gBAAgBx0E,IACzF,KAAK,EACH,OAAoB,IAAb9B,EAAK8tC,KACRl9C,EAAOu4C,OAAO,EAAA9O,SAAS6jC,MAAOp8D,EAAMlR,EAAO0D,IAAI,IAC/CwN,EAEN,KAAK,GACH,OAAOlR,EAAOu4C,OAAO,EAAA9O,SAASskC,MAAO78D,EAAMlR,EAAOkE,IAAI,IAExD,KAAK,GACH,OAAOlE,EAAOu4C,OAAO,EAAA9O,SAASukC,MAAO98D,EAAMlR,EAAOmE,IAAI,IAKxD,QAEE,OADAqG,QAAO,GACAxK,EAAOyD,IAAI,KAMxB,YAAAw1E,eAAA,SACEzvD,GAGA,IAAI8M,EAAUj2B,KAAKi2B,QACnB9rB,OAAOgf,EAAc8M,SAAWA,GAChC,IAAIt2B,EAASK,KAAKL,OACduqB,EAAUlqB,KAAKkqB,QACnBlqB,KAAK8xE,YAAc3oD,EAAcpa,KACjC,IAAI6gB,EAAgBqG,EAAQrG,cAE5B,OADA5vB,KAAKi4E,gBAAgBroD,GACdjwB,EAAOa,KAAKovB,EAAc/G,aAAc,CAC7CqB,EAAQY,SACJnrB,EAAO0D,IAAI8lB,EAAciT,qBACzBz8B,EAAOyD,IAAI+lB,EAAciT,qBAC7Bz8B,EAAOyD,IACL+lB,EAAc0F,aAAa,EAAAhH,eAAetK,WACtC,EACA4L,EAAcG,KAEnBY,EAAQyrD,iBAIb,YAAAkD,wBAAA,SACE1vD,EACAivD,G,aAAA,IAAAA,MAAA,IAEA,IAAI/hE,EAAU8S,EAAc9S,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAI1W,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACZmE,EAAWl9C,EAAK9d,GAAG,OACnB6wE,EAAiB7V,EACjBvtE,OAAOqwB,EAAK8qC,YAAY,EAAAtiE,cAAcsC,QAAQ2yB,MAC9C,EACA09C,EAAiB31E,KAAKkqB,QAAQyrD,e,IAElC,IAAmB,QAAAt/D,EAAQtC,UAAQ,8BAAE,CAAhC,IAAIgd,EAAM,QACb,GACEA,EAAOvjB,MAAQ,EAAAoa,YAAYwJ,OAC3BL,EAAOlR,QAAUsJ,EAFnB,CAKA,IAAIqU,EAAezM,EAAQ5mB,QAAQqzB,EAAM5gB,MAAM,EAAAva,YAAYuvB,QAC3D,IAAI41C,EAAYhqC,EAAMzuB,KAClB62E,EAAkBpe,EAAUtT,eAC5Bs5B,EAAiBhwD,EAAMv7B,UACvB60E,EAAkB0W,EAAe1W,gBACjCt1D,EAAiBgsE,EAAehsE,eAChCo1D,OAAQ,EACRE,GACFF,EAAW52E,KAAK+2E,kBAAkBD,EAAiBtP,EACjD,IAEEA,EAAUgO,YAAcx1E,KAAKqyE,oBAAoBroD,IAAI4sD,KACvDA,EAAW52E,KAAKy1E,WAAWmB,KAEpBp1D,GAAkB,GAC3Bo1D,EAAWj3E,EAAO64C,UAChBk/B,EACIvtE,OAAOqwB,EAAK8qC,YAAY9nC,EAAM58B,OAAOq3B,MACrC,EAAIzW,EACRokE,GAEEpe,EAAUgO,YAAWoB,EAAW52E,KAAKy1E,WAAWmB,KAEpDA,EAAWpP,EAAUrT,aAAax0D,GAEpCy4E,EAAM3rE,KACJ9M,EAAOk4C,MAAM2vB,EAAU7U,SACrBhzD,EAAO64C,UAAU+0C,EAAgB5X,GACjCiB,EACAgP,EACApoD,EAAMjC,iB,iGAIZ,OAAO68C,GAGT,YAAAqV,oBAAA,SACE58E,EACAsY,GAEA,IAAIxpB,EAASK,KAAKL,OACd66B,EAAOx6B,KAAKuzE,YACZma,EAASlzD,EAAK4uC,aAAa,EAAAh/C,KAAKhnB,KAChCuqF,EAAShuF,EAAOm5C,KAAK,GAAG,EAC1Bn5C,EAAOu4C,OAAO,EAAA9O,SAASo5C,OACrB3xE,EACAlR,EAAOyD,IAAIpD,KAAKi2B,QAAQ4jD,oBAE1B,EAAA16C,WAAWz4B,KAETsP,EAAQ,cAAgBmT,EAAcvoB,KAAO,IAAM45B,EAAKgwC,iBACxDojB,EAA8B,GAmBlC,OAlBAA,EAAWnhF,KACT9M,EAAOs7C,KACLt7C,EAAOo7C,GAAG/kC,EACRrW,EAAOu4C,OAAO,EAAA9O,SAASwjC,MACrBjtE,EAAO+4C,UAAUg1C,EAAOz1D,MAAO01D,GAC/BhuF,EAAOyD,IAAI+lB,EAAcG,KAE3B3pB,EAAOyD,IAAI,MAMjBwqF,EAAWnhF,KACT9M,EAAOyD,IAAI,IAEbo3B,EAAKmvC,cAAc+jB,GACnBlzD,EAAKkwC,gBACE/qE,EAAOi7C,MAAM5kC,EAAO43E,EAAY,EAAAzuD,WAAWz4B,MAGtD,EA1mRA,CAA8B,EAAA0G,mBA8mR9B,SAAS+pE,EACPxkE,EACAR,GAQA,GALAu/D,EAA8Bv/D,EAAYtH,MAAMa,OAAO0U,WAEvDuxD,EAA+B,EAAAt6C,mBAC7B1kB,EAAQ/R,KAAM+R,EAAQkN,OAAQlN,EAAQ+J,GAAG,EAAAra,YAAYqzB,WAAW,GAE7D/iB,EAAQkc,aAAa,EAAAhH,eAAe5K,UAAzC,CAEA,IAAIgZ,EAAUtjB,EAAQsjB,QAClBlT,EAAY5Y,OAAO,EAAAmtE,cAAc,EAAAhnE,cAAc2M,SAAU9K,EAAYmE,aACrErG,EAAO8S,EAAU3S,UACrB,GAAIH,GAAQA,EAAK/D,OAAQ,CACvB,IAAIsX,EAAMvT,EAAK,GAGXuT,EAAIhW,MAAQ,EAAAD,SAASE,SAA+B+V,EAAKpF,aAAe,EAAAF,YAAYmB,QACtFsyD,EAAyDnuD,EAAKliB,MAC1D2O,EAAK/D,QAAU,KACjBsX,EAAMvT,EAAK,IACHzC,MAAQ,EAAAD,SAASE,SAA+B+V,EAAKpF,aAAe,EAAAF,YAAYmB,QACtFqyD,EAA8BC,EAC9BA,EAAyDnuD,EAAKliB,MAC1D2O,EAAK/D,OAAS,GAChB+pB,EAAQ/oB,MACN,EAAA1C,eAAegqB,+BACfzR,EAAUlY,MAAO,IAAKoF,EAAK/D,OAAOT,aAItCwqB,EAAQ/oB,MACN,EAAA1C,eAAe+pB,wBACf/Q,EAAI3Y,SAKVorB,EAAQ/oB,MACN,EAAA1C,eAAe+pB,wBACf/Q,EAAI3Y,YAIRorB,EAAQ/oB,MACN,EAAA1C,eAAe48E,wCACfrkE,EAAUlY,MAAO,IAAK,MAS5B,SAAgBquE,EAAQv5E,EAAgBy4E,EAAwBrpE,GAC9D,IAAI7C,EAASksE,EAAMlsE,OACnB,GAAc,GAAVA,EAAa,OAAOvM,EAAO47C,MAC/B,GAAc,GAAVrvC,EAAa,CACf,IAAI2hF,EAASzV,EAAM,GACnB,GAAI,EAAApM,kBAAkB6hB,IAAW9+E,EAAM,OAAO8+E,EAC9C,GAAI,EAAAnkC,gBAAgBmkC,IAAW,EAAAzuD,aAAayuB,MAAO,CAGjD,IAFA,IAAIuwB,EAAQ,EAAA9N,mBAAmBud,GAC3BhzC,EAAW,IAAIrzC,MAAqB42E,GAC/B/9E,EAAI,EAAGA,EAAI+9E,IAAS/9E,EAAGw6C,EAASx6C,GAAK,EAAAmwE,cAAcqd,EAAQxtF,GACpE,OAAOV,EAAOi7C,MAAM,EAAAy1B,aAAawd,GAAShzC,EAAU9rC,IAGxD,OAAOpP,EAAOi7C,MAAM,KAAMw9B,EACxBrpE,GAAQ,EAAAowB,WAAW2uD,KACf,EAAA9hB,kBAAkBoM,EAAMlsE,EAAS,IACjC6C,GAvrRK,EAAAqkE,WAuqRb,a,8EC/6RA,SAAY5oE,GACV,2DACA,mDACA,yCACA,uHACA,iMACA,iFACA,6FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,mGACA,6FACA,uEACA,mDACA,uFACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,mGACA,qGACA,+DACA,qDACA,6DACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,8JACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MAvIF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA2I1B,kCAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2D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,QACRF,EAAGE,KAAKyhH,EAAI1xF,UAAU/wB,YACtBc,EAAGE,KAAK,Q,iGAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,WAAS,EAAA5J,eAAA,EAAAA,eAGT,QAEA,QACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8EC5NA,oBAAyBqrH,EAAUl2F,GAEjC,OADA9tB,OAAO8tB,GAAS,GAAKA,EAAQ,IACtBwtF,OACLd,QACEwJ,EACAnxD,QACE2mD,QACA94F,QAAQoN,KAGZ8sC,WAKJ,qBAA0BopD,EAAUl2F,EAAYm2F,GAE9C,OADAjkH,OAAO8tB,GAAS,GAAKA,EAAQ,IACtBm2F,EACHvJ,OACEsJ,EACAnxD,QACE2mD,QACA94F,QAAQoN,KAGZ0sF,QACEwJ,EACA9I,QACEroD,QACE2mD,QACA94F,QAAQoN,Q,8EC9BpB,SAAkBo2F,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B3tH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqBiK,EAnLYjK,GAoL9B,GAAKiK,EAAO,QACnB2jH,EAAmB3jH,EAAa4jH,IAFzC,IAAkC5jH,GA/KlC,8BAAmCjK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBiK,EAzKYjK,GA0K7B,GAAKiK,EAAO,QACnB2jH,EAAmB3jH,EAAa6jH,IAFzC,IAAiC7jH,GArKjC,IAAM4jH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const anyref = \"anyref\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  export const indexof = \"indexof\";\r\n  export const valueof = \"valueof\";\r\n  export const returnof = \"returnof\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\r\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\r\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\r\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const Anyref = \"Anyref\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  NAMEDTYPE,\r\n  FUNCTIONTYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createNamedType(\r\n    name: TypeName,\r\n    typeArguments: TypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    var type = new NamedTypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createFunctionType(\r\n    parameters: ParameterNode[],\r\n    returnType: TypeNode,\r\n    explicitThisType: NamedTypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): FunctionTypeNode {\r\n    var type = new FunctionTypeNode();\r\n    type.range = range;\r\n    type.parameters = parameters;\r\n    type.returnType = returnType;\r\n    type.explicitThisType = explicitThisType;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    return Node.createNamedType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: NamedTypeNode | null,\r\n    defaultType: NamedTypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: TypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: TypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: TypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: NamedTypeNode,\r\n    valueType: TypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: TypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class TypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a named type. */\r\nexport class NamedTypeNode extends TypeNode {\r\n  kind = NodeKind.NAMEDTYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: TypeNode[] | null;\r\n}\r\n\r\n/** Represents a function type. */\r\nexport class FunctionTypeNode extends TypeNode {\r\n  kind = NodeKind.FUNCTIONTYPE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: TypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: TypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\nexport namespace DecoratorKind {\r\n\r\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\r\n  export function fromNode(nameNode: Expression): DecoratorKind {\r\n    // @global, @inline, @operator, @sealed, @unmanaged\r\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\r\n      let nameStr = (<IdentifierExpression>nameNode).text;\r\n      assert(nameStr.length);\r\n      switch (nameStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n          break;\r\n        }\r\n        case CharCode.e: {\r\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n          break;\r\n        }\r\n        case CharCode.g: {\r\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n          break;\r\n        }\r\n        case CharCode.l: {\r\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n          break;\r\n        }\r\n        case CharCode.o: {\r\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case CharCode.s: {\r\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n          break;\r\n        }\r\n        case CharCode.u: {\r\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n          break;\r\n        }\r\n      }\r\n    } else if (\r\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\r\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\r\n    ) {\r\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\r\n      assert(nameStr.length);\r\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\r\n      assert(propStr.length);\r\n      // @operator.binary, @operator.prefix, @operator.postfix\r\n      if (nameStr == \"operator\") {\r\n        switch (propStr.charCodeAt(0)) {\r\n          case CharCode.b: {\r\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n            break;\r\n          }\r\n          case CharCode.p: {\r\n            switch (propStr) {\r\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: TypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: TypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: TypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** User-provided file. */\r\n  USER = 0,\r\n  /** User-provided entry file. */\r\n  USER_ENTRY = 1,\r\n  /** Library-provided file. */\r\n  LIBRARY = 2,\r\n  /** Library-provided entry file. */\r\n  LIBRARY_ENTRY = 3\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  get isLibrary(): bool {\r\n    var kind = this.sourceKind;\r\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\r\n  }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: NamedTypeNode;\r\n  /** Value type. */\r\n  valueType: TypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: TypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: FunctionTypeNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: TypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: TypeNode): bool {\r\n  if (type.kind == NodeKind.NAMEDTYPE) {\r\n    let name = (<NamedTypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  TypeParameterNode,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ExportDefaultStatement,\r\n  Token,\r\n  ParameterNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\nexport namespace OperatorKind {\r\n\r\n  /** Returns the operator kind represented by the specified decorator and string argument. */\r\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n    assert(arg.length);\r\n    switch (decoratorKind) {\r\n      case DecoratorKind.OPERATOR:\r\n      case DecoratorKind.OPERATOR_BINARY: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.OPENBRACKET: {\r\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n            break;\r\n          }\r\n          case CharCode.OPENBRACE: {\r\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n            break;\r\n          }\r\n          case CharCode.PLUS: {\r\n            if (arg == \"+\") return OperatorKind.ADD;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"-\") return OperatorKind.SUB;\r\n            break;\r\n          }\r\n          case CharCode.ASTERISK: {\r\n            if (arg == \"*\") return OperatorKind.MUL;\r\n            if (arg == \"**\") return OperatorKind.POW;\r\n            break;\r\n          }\r\n          case CharCode.SLASH: {\r\n            if (arg == \"/\") return OperatorKind.DIV;\r\n            break;\r\n          }\r\n          case CharCode.PERCENT: {\r\n            if (arg == \"%\") return OperatorKind.REM;\r\n            break;\r\n          }\r\n          case CharCode.AMPERSAND: {\r\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n            break;\r\n          }\r\n          case CharCode.BAR: {\r\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n            break;\r\n          }\r\n          case CharCode.CARET: {\r\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n            break;\r\n          }\r\n          case CharCode.EQUALS: {\r\n            if (arg == \"==\") return OperatorKind.EQ;\r\n            break;\r\n          }\r\n          case CharCode.EXCLAMATION: {\r\n            if (arg == \"!=\") return OperatorKind.NE;\r\n            break;\r\n          }\r\n          case CharCode.GREATERTHAN: {\r\n            if (arg == \">\") return OperatorKind.GT;\r\n            if (arg == \">=\") return OperatorKind.GE;\r\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n            break;\r\n          }\r\n          case CharCode.LESSTHAN: {\r\n            if (arg == \"<\") return OperatorKind.LT;\r\n            if (arg == \"<=\") return OperatorKind.LE;\r\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case DecoratorKind.OPERATOR_PREFIX: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.PLUS: {\r\n            if (arg == \"+\") return OperatorKind.PLUS;\r\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"-\") return OperatorKind.MINUS;\r\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n            break;\r\n          }\r\n          case CharCode.EXCLAMATION: {\r\n            if (arg == \"!\") return OperatorKind.NOT;\r\n            break;\r\n          }\r\n          case CharCode.TILDE: {\r\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case DecoratorKind.OPERATOR_POSTFIX: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.PLUS: {\r\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a binary operator token to the respective operator kind. */\r\n  export function fromBinaryToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS:\r\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\r\n      case Token.MINUS:\r\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\r\n      case Token.ASTERISK:\r\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\r\n      case Token.SLASH:\r\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\r\n      case Token.PERCENT:\r\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\r\n      case Token.ASTERISK_ASTERISK:\r\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\r\n      case Token.AMPERSAND:\r\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\r\n      case Token.BAR:\r\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\r\n      case Token.CARET:\r\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\r\n      case Token.LESSTHAN_LESSTHAN:\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\r\n      case Token.GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\r\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\r\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\r\n      case Token.GREATERTHAN: return OperatorKind.GT;\r\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\r\n      case Token.LESSTHAN: return OperatorKind.LT;\r\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a unary prefix operator token to the respective operator kind. */\r\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS: return OperatorKind.PLUS;\r\n      case Token.MINUS: return OperatorKind.MINUS;\r\n      case Token.EXCLAMATION: return OperatorKind.NOT;\r\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\r\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\r\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a unary postfix operator token to the respective operator kind. */\r\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\r\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes wrapping basic types like `i32`. */\r\n  wrapperClasses: Map<Type,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n  /** A set of unique function signatures contained in the program, by id. */\r\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if not explicitly disabled. */\r\n  abortInstance: Function | null;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n  /** Next signature id. */\r\n  nextSignatureId: i32 = 0;\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: FunctionTypeNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\r\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\r\n      CommonSymbols.indexof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\r\n      CommonSymbols.valueof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\r\n      CommonSymbols.returnof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n\r\n    // register feature hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\r\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\r\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\r\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\r\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\r\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\r\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\r\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\r\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\r\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\r\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\r\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\r\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\r\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\r\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\r\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\r\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        for (let element of exports.values()) this.markModuleExport(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\r\n  private lookupFunction(name: string): Function | null {\r\n    var prototype = this.lookupGlobal(name);\r\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerWrapperClass(type: Type, className: string): void {\r\n    var wrapperClasses = this.wrapperClasses;\r\n    assert(!type.classReference && !wrapperClasses.has(type));\r\n    var element = this.lookupGlobal(className);\r\n    if (!element) return;\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n    if (!classElement) return;\r\n    classElement.wrappedType = type;\r\n    wrapperClasses.set(type, classElement);\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = DecoratorKind.fromNode(decorator.name);\r\n        let flag = DecoratorFlags.fromKind(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = OperatorKind.fromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else if (exports.has(\"default\")) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, \"default\"\r\n        );\r\n        return;\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\nexport namespace DecoratorFlags {\r\n\r\n  /** Translates a decorator kind to the respective decorator flag. */\r\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\r\n    switch (kind) {\r\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n      case DecoratorKind.OPERATOR:\r\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n      default: return DecoratorFlags.NONE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n// Kinds of all declared elements\r\nvar declaredElements = new Set<ElementKind>();\r\n\r\n/** Tests if the specified element kind indicates a declared element. */\r\nexport function isDeclaredElement(kind: ElementKind): bool {\r\n  return declaredElements.has(kind);\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    declaredElements.add(kind);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n// Kinds of all typed elements\r\nvar typedElements = new Set<ElementKind>();\r\n\r\n/** Checks if the specified element kind indicates a typed element. */\r\nexport function isTypedElement(kind: ElementKind): bool {\r\n  return typedElements.has(kind);\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent, declaration);\r\n    typedElements.add(kind);\r\n  }\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(program, null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): TypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated function type node. */\r\n  get functionTypeNode(): FunctionTypeNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): NamedTypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): NamedTypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n  /** Wrapped type, if a wrapper for a basic type. */\r\n  wrappedType: Type | null = null;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let type = (<Field>member).type;\r\n          if (type.is(TypeFlags.REFERENCE)) {\r\n            if ((current = type.classReference) !== null && (\r\n              current === other ||\r\n              current.cyclesTo(other, except)\r\n            )) return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\nimport { Type } from \"./types\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type EventRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Anyref = _BinaryenTypeAnyref(),\r\n  Exnref = _BinaryenTypeExnref(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  MVP = _BinaryenFeatureMVP(),\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\r\n  TailCall = _BinaryenFeatureTailCall(),\r\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\r\n  All = _BinaryenFeatureAll()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  AtomicFence = _BinaryenAtomicFenceId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDTernary = _BinaryenSIMDTernaryId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId(),\r\n  Try = _BinaryenTryId(),\r\n  Throw = _BinaryenThrowId(),\r\n  Rethrow = _BinaryenRethrowId(),\r\n  BrOnExn = _BinaryenBrOnExnId(),\r\n  Push = _BinaryenPushId(),\r\n  Pop = _BinaryenPopId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\r\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\r\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\r\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\r\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\r\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\r\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\r\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport enum SIMDTernaryOp {\r\n  Bitselect = 0, // FIXME: _BinaryenBitselect(), requires https://github.com/WebAssembly/binaryen/pull/2336\r\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\r\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\r\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\r\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  atomic_fence(): ExpressionRef {\r\n    return _BinaryenAtomicFence(this.ref);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType,\r\n    isReturn: bool = false\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return isReturn\r\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\r\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  return_call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    return this.call(target, operands, returnType, true);\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string,\r\n    isReturn: bool = false\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return isReturn\r\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\r\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  return_call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string,\r\n  ): ExpressionRef {\r\n    return this.call_indirect(index, operands, typeName, true);\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // exception handling\r\n\r\n  try(\r\n    body: ExpressionRef,\r\n    catchBody: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTry(this.ref, body, catchBody);\r\n  }\r\n\r\n  throw(\r\n    eventName: string,\r\n    operands: ExpressionRef[]\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(eventName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  rethrow(\r\n    exnref: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenRethrow(this.ref, exnref);\r\n  }\r\n\r\n  br_on_exn(\r\n    name: string,\r\n    eventName: string,\r\n    exnref: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr1 = this.allocStringCached(name);\r\n    var cStr2 = this.allocStringCached(eventName);\r\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\r\n  }\r\n\r\n  // push / pop (multi value?)\r\n\r\n  push(\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenPush(this.ref, value);\r\n  }\r\n\r\n  pop(\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenPop(this.ref, type);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_ternary(\r\n    op: BinaryenSIMDOp,\r\n    a: ExpressionRef,\r\n    b: ExpressionRef,\r\n    c: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addEvent(\r\n    name: string,\r\n    attribute: u32,\r\n    type: FunctionRef\r\n  ): EventRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunction(\r\n    name: string\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetFunction(this.ref, cStr);\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addEventExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType,\r\n    mutable: bool = false\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\r\n  }\r\n\r\n  addEventImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    attribute: u32,\r\n    eventType: FunctionTypeRef\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([\r\n        this.allocStringCached(\"vacuum\"),\r\n        this.allocStringCached(\"precompute\")\r\n      ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\r\n      expr = _BinaryenReturnGetValue(expr);\r\n    }\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   // TODO: there's more\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.LocalGet:\r\n//     case ExpressionId.GlobalGet:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicFence: {\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDTernary: {\r\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\r\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\r\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Try: {\r\n      visit(_BinaryenTryGetBody(expr), data);\r\n      visit(_BinaryenTryGetCatchBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Throw: {\r\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenThrowGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Rethrow: {\r\n      visit(_BinaryenRethrowGetExnref(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.BrOnExn: {\r\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Push: {\r\n      visit(_BinaryenPushGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Pop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // references\r\n\r\n  /** A host reference. */\r\n  ANYREF,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type (either a class or a function type). */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Substitutes this type with the auto type if this type is void. */\r\n  get exceptVoid(): Type {\r\n    if (this.kind == TypeKind.VOID) return Type.auto;\r\n    return this;\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      // TODO: Reflect.apply(value, \"toString\", []) ?\r\n      assert(this.kind == TypeKind.ANYREF);\r\n      return \"anyref\";\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.ANYREF: return \"anyref\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.ANYREF: return NativeType.Anyref;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n          case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.ANYREF: return \"a\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** A host reference. */\r\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\r\n    TypeFlags.REFERENCE, 0\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n\r\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\r\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n  /** The unique program id that represents this signature. */\r\n  id: u32 = 0;\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n  /** The program that created this signature. */\r\n  program: Program;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    program: Program,\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.program = program;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n\r\n    var signatureTypes = program.uniqueSignatures;\r\n    var length = signatureTypes.length;\r\n    for (let i = 0; i < length; i++) {\r\n      let compare = signatureTypes[i];\r\n      if (this.equals(compare)) {\r\n        this.id = compare.id;\r\n        return this;\r\n      }\r\n    }\r\n    program.uniqueSignatures.push(this);\r\n    this.id = program.nextSignatureId++;\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    return this.equals(target);\r\n  }\r\n\r\n  /** Tests to see if a signature equals another signature. */\r\n  equals(value: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = value.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != value.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = value.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = value.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.NULL:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function isIllegalVariableIdentifier(name: string): bool {\r\n  assert(name.length);\r\n  switch (name.charCodeAt(0)) {\r\n    case CharCode.d: return name == \"delete\";\r\n    case CharCode.f: return name == \"for\";\r\n    case CharCode.i: return name == \"instanceof\";\r\n    case CharCode.n: return name == \"null\";\r\n    case CharCode.v: return name == \"void\";\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition,\r\n  TypedElement,\r\n  FunctionTarget,\r\n  isTypedElement\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  FunctionTypeNode,\r\n  ParameterKind,\r\n  TypeNode,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  CommaExpression,\r\n  InstanceOfExpression,\r\n  TernaryExpression,\r\n  isTypeOmitted,\r\n  FunctionExpression,\r\n  NewExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  // ====================================================== Types ======================================================\r\n\r\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: TypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.NAMEDTYPE: {\r\n        return this.resolveNamedType(\r\n          <NamedTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTIONTYPE: {\r\n        return this.resolveFunctionType(\r\n          <FunctionTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\r\n  private resolveNamedType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var nameNode = node.name;\r\n    var typeArgumentNodes = node.typeArguments;\r\n    var isSimpleType = !nameNode.next;\r\n\r\n    // Look up in contextual types if a simple type\r\n    if (isSimpleType) {\r\n      let simpleName = nameNode.identifier.text;\r\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\r\n        let type = ctxTypes.get(simpleName)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // Look up in context\r\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\r\n    if (!element) return null;\r\n\r\n    // Use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n\r\n      // Handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name + \"/i32\"\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // Handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          makeMap<string,Type>(ctxTypes), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // Handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // Shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                nameNode.range, nameNode.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // Handle special built-in types\r\n      if (isSimpleType) {\r\n        switch (nameNode.identifier.symbol) {\r\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\r\n        }\r\n      }\r\n\r\n      // Resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          ctxTypes = makeMap(ctxTypes), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          node.range, nameNode.identifier.text\r\n        );\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              nameNode.range, nameNode.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        nameNode.range, nameNode.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\r\n  private resolveFunctionType(\r\n    /** The type to resolve. */\r\n    node: FunctionTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterNodes = node.parameters;\r\n    var numParameters = parameterNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterNode = parameterNodes[i];\r\n      switch (parameterNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterTypeNode = parameterNode.type;\r\n      if (isTypeOmitted(parameterTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            parameterTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        parameterTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (isTypeOmitted(returnTypeNode)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnTypeNode.range\r\n        );\r\n      }\r\n      returnType = Type.void;\r\n    } else {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!returnType) return null;\r\n    }\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return node.isNullable ? signature.type.asNullable() : signature.type;\r\n  }\r\n\r\n  private resolveBuiltinNativeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    switch (typeArgument.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return Type.u32;\r\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.F32: return Type.f32;\r\n      case TypeKind.F64: return Type.f64;\r\n      case TypeKind.V128: return Type.v128;\r\n      case TypeKind.VOID: return Type.void;\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinIndexofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) {\r\n      if (overload.is(CommonFlags.STATIC)) {\r\n        assert(overload.signature.parameterTypes.length == 2);\r\n        return overload.signature.parameterTypes[1];\r\n      } else {\r\n        assert(overload.signature.parameterTypes.length == 1);\r\n        return overload.signature.parameterTypes[0];\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinValueofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) return overload.signature.returnType;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinReturnTypeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var signatureReference = typeArgument.signatureReference;\r\n    if (!signatureReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_has_no_call_signatures,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    return signatureReference.returnType;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    node: TypeName,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = ctxElement.lookup(node.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          node.range, node.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = node;\r\n    var next = node.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Type parameter nodes present. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\r\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      ctxTypes.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Gets the concrete type of an element. */\r\n  getTypeOfElement(element: Element): Type | null {\r\n    var kind = element.kind;\r\n    if (kind == ElementKind.GLOBAL) {\r\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\r\n    }\r\n    if (isTypedElement(kind)) {\r\n      let type = (<TypedElement>element).type;\r\n      let classReference = type.classReference;\r\n      if (classReference) {\r\n        let wrappedType = classReference.wrappedType;\r\n        if (wrappedType) type = wrappedType;\r\n      }\r\n      return type;\r\n    }\r\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\r\n    return null;\r\n  }\r\n\r\n  /** Gets the element of a concrete type. */\r\n  getElementOfType(type: Type): Element | null {\r\n    if (type.is(TypeFlags.REFERENCE)) {\r\n      let classReference = type.classReference;\r\n      if (classReference) return classReference;\r\n      let signatureReference = assert(type.signatureReference);\r\n      return signatureReference.asFunctionTarget(this.program);\r\n    } else if (type != Type.void) {\r\n      let wrapperClasses = this.program.wrapperClasses;\r\n      assert(wrapperClasses.has(type));\r\n      return wrapperClasses.get(type);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // =================================================== Expressions ===================================================\r\n\r\n  /** Looks up the program element the specified expression refers to. */\r\n  lookupExpression(\r\n    /** The expression to look up. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.lookupAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.lookupBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.lookupCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.COMMA: {\r\n        return this.lookupCommaExpression(\r\n          <CommaExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.lookupElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        return this.lookupFunctionExpression(\r\n          <FunctionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.TRUE: {\r\n        return this.lookupIdentifierExpression(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.lookupThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.lookupSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        return this.lookupInstanceOfExpression(\r\n          <InstanceOfExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.lookupLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.NEW: {\r\n        return this.lookupNewExpression(\r\n          <NewExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.lookupPropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        return this.lookupTernaryExpression(\r\n          <TernaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.lookupUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.lookupUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an expression to its static type. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.COMMA: {\r\n        return this.resolveCommaExpression(\r\n          <CommaExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        return this.resolveFunctionExpression(\r\n          <FunctionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.TRUE: {\r\n        return this.resolveIdentifierExpression(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        return this.resolveInstanceOfExpression(\r\n          <InstanceOfExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.NEW: {\r\n        return this.resolveNewExpression(\r\n          <NewExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        return this.resolveTernaryExpression(\r\n          <TernaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified identifier expression refers to. */\r\n  lookupIdentifierExpression(\r\n    /** The expression to look up. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = node.text;\r\n    var element: Element | null;\r\n    if (element = ctxFlow.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = ctxElement.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        node.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an identifier to its static type. */\r\n  private resolveIdentifierExpression(\r\n    /** The expression to resolve. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\r\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type); // also sets resolved\r\n    return true;\r\n  }\r\n\r\n  /** Looks up the program element the specified property access expression refers to. */\r\n  private lookupPropertyAccessExpression(\r\n    /** The expression to look up. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetNode = node.expression;\r\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = node.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let type = getterInstance.signature.returnType;\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let type = getterInstance.signature.returnType;\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementExpression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n          let classReference = arrayType.classReference;\r\n          if (!classReference) {\r\n            let wrapperClasses = this.program.wrapperClasses;\r\n            if (wrapperClasses.has(arrayType)) {\r\n              classReference = wrapperClasses.get(arrayType)!;\r\n            } else {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                  node.property.range, propertyName, arrayType.toString()\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n          }\r\n          target = classReference;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetNode;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetNode;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        node.property.range, propertyName, target.internalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access expression to its static type. */\r\n  private resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified element access expression refers to. */\r\n  private lookupElementAccessExpression(\r\n    /** The expression to look up. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\r\n    if (!targetType) return null;\r\n    if (targetType.is(TypeFlags.REFERENCE)) {\r\n      let classReference = targetType.classReference;\r\n      if (classReference) {\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = node.elementExpression;\r\n        return classReference;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        targetExpression.range, targetType.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to its static type. */\r\n  private resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var targetExpression = node.expression;\r\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\r\n    if (!targetType) return null;\r\n    if (targetType.is(TypeFlags.REFERENCE)) {\r\n      let classReference = targetType.classReference;\r\n      if (classReference) {\r\n        let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (overload) return overload.signature.returnType;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        targetExpression.range, targetType.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Contextual type. */\r\n    ctxType: Type\r\n  ): Type {\r\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextual type if matching\r\n      switch (ctxType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64; // TODO: u64 if positive and larger than i64?\r\n  }\r\n\r\n  /** Looks up the program element the specified assertion expression refers to. */\r\n  private lookupAssertionExpression(\r\n    /** The expression to look up. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n    }\r\n    var type = this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (element) return element;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to its static type. */\r\n  private resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n      return type ? type.nonNullableType : null;\r\n    }\r\n    return this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Looks up the program element the specified unary prefix expression refers to. */\r\n  private lookupUnaryPrefixExpression(\r\n    /** The expression to look up. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n          node.range, operatorTokenToString(node.operator), type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to its static type. */\r\n  private resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var operand = node.operand;\r\n    var operator = node.operator;\r\n    switch (operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\r\n        }\r\n        // fall-through\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n            let wrappedType = classReference.wrappedType;\r\n            if (wrappedType) type = wrappedType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return Type.bool; // incl. references\r\n      }\r\n      case Token.TILDE: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, \"~\", type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type.intType;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified unary postfix expression refers to. */\r\n  private lookupUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n          node.range, operatorTokenToString(node.operator), type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to its static type. */\r\n  private resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var operator = node.operator;\r\n    switch (operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified binary expression refers to. */\r\n  private lookupBinaryExpression(\r\n    /** The expression to look up. */\r\n    node: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (element) return element; // otherwise void\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to its static type. */\r\n  private resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    node: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var left = node.left;\r\n    var right = node.right;\r\n    var operator = node.operator;\r\n\r\n    switch (operator) {\r\n\r\n      // assignment: result is the target's type\r\n\r\n      case Token.EQUALS:\r\n      case Token.PLUS_EQUALS:\r\n      case Token.MINUS_EQUALS:\r\n      case Token.ASTERISK_EQUALS:\r\n      case Token.ASTERISK_ASTERISK_EQUALS:\r\n      case Token.SLASH_EQUALS:\r\n      case Token.PERCENT_EQUALS:\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n      case Token.AMPERSAND_EQUALS:\r\n      case Token.BAR_EQUALS:\r\n      case Token.CARET_EQUALS: {\r\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n      }\r\n\r\n      // comparison: result is Bool, preferring overloads, integer/float only\r\n\r\n      case Token.LESSTHAN:\r\n      case Token.GREATERTHAN:\r\n      case Token.LESSTHAN_EQUALS:\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), leftType.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return Type.bool;\r\n      }\r\n\r\n      // equality: result is Bool, preferring overloads, incl. references\r\n\r\n      case Token.EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return Type.bool;\r\n      }\r\n\r\n      // identity: result is Bool, not supporting overloads\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\r\n        return Type.bool;\r\n      }\r\n\r\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\r\n\r\n      case Token.PLUS:\r\n      case Token.MINUS:\r\n      case Token.ASTERISK:\r\n      case Token.SLASH:\r\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\r\n        if (!rightType) return null;\r\n        let commonType = Type.commonDenominator(leftType, rightType, false);\r\n        if (!commonType) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              node.range, leftType.toString(), rightType.toString()\r\n            );\r\n          }\r\n        }\r\n        return commonType;\r\n      }\r\n\r\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\r\n\r\n      case Token.ASTERISK_ASTERISK: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\r\n      }\r\n\r\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\r\n\r\n      case Token.LESSTHAN_LESSTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), leftType.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return leftType;\r\n      }\r\n\r\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\r\n\r\n      case Token.AMPERSAND:\r\n      case Token.BAR:\r\n      case Token.CARET: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\r\n        if (!rightType) return null;\r\n        let commonType = Type.commonDenominator(leftType, rightType, false);\r\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\r\n            );\r\n          }\r\n        }\r\n        return commonType;\r\n      }\r\n\r\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\r\n\r\n      case Token.AMPERSAND_AMPERSAND:\r\n      case Token.BAR_BAR: {\r\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified this expression refers to. */\r\n  private lookupThisExpression(\r\n    /** The expression to look up. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = ctxFlow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to its static type. */\r\n  private resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified super expression refers to. */\r\n  private lookupSuperExpression(\r\n    /** The expression to look up. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = ctxFlow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to its static type. */\r\n  private resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified literal expression refers to. */\r\n  private lookupLiteralExpression(\r\n    /** The expression to look up. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let intType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>node).value,\r\n          ctxType\r\n        );\r\n        let wrapperClasses = this.program.wrapperClasses;\r\n        assert(wrapperClasses.has(intType));\r\n        return wrapperClasses.get(intType);\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\r\n        let wrapperClasses = this.program.wrapperClasses;\r\n        assert(wrapperClasses.has(fltType));\r\n        return wrapperClasses.get(fltType);\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to its static type. */\r\n  private resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified call expression refers to. */\r\n  private lookupCallExpression(\r\n    /** The expression to look up. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a call expression to its static type. */\r\n  private resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.lookupExpression( // reports\r\n      targetExpression,\r\n      ctxFlow,\r\n      ctxType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        // `unchecked(expr: *): *` is special\r\n        if (\r\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n          node.arguments.length > 0\r\n        ) {\r\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\r\n        }\r\n        // otherwise resolve normally\r\n        let instance = this.resolveFunctionInclTypeArguments(\r\n          <FunctionPrototype>target,\r\n          node.typeArguments,\r\n          ctxFlow.actualFunction,\r\n          makeMap(ctxFlow.contextualTypeArguments), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return instance.signature.returnType;\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        return (<FunctionTarget>target).signature.returnType;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n        targetExpression.range, target.internalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified comma expression refers to. */\r\n  private lookupCommaExpression(\r\n    /** The expression to look up. */\r\n    node: CommaExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var expressions = node.expressions;\r\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\r\n  }\r\n\r\n  /** Resolves a comma expression to its static type. */\r\n  private resolveCommaExpression(\r\n    /** The expression to resolve. */\r\n    node: CommaExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var expressions = node.expressions;\r\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\r\n  }\r\n\r\n  /** Looks up the program element the specified instanceof expression refers to. */\r\n  private lookupInstanceOfExpression(\r\n    /** The expression to look up. */\r\n    node: InstanceOfExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var wrapperClasses = this.program.wrapperClasses;\r\n    assert(wrapperClasses.has(Type.bool));\r\n    return wrapperClasses.get(Type.bool);\r\n  }\r\n\r\n  /** Resolves an instanceof expression to its static type. */\r\n  private resolveInstanceOfExpression(\r\n    /** The expression to resolve. */\r\n    node: InstanceOfExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    return Type.bool;\r\n  }\r\n\r\n  /** Looks up the program element the specified ternary expression refers to. */\r\n  private lookupTernaryExpression(\r\n    /** The expression to look up. */\r\n    node: TernaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a ternary expression to its static type. */\r\n  private resolveTernaryExpression(\r\n    /** The expression to resolve. */\r\n    node: TernaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\r\n    if (!thenType) return null;\r\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\r\n    if (!elseType) return null;\r\n    var commonType = Type.commonDenominator(thenType, elseType, false);\r\n    if (!commonType) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n          node.range, \"?:\", thenType.toString(), elseType.toString()\r\n        );\r\n      }\r\n    }\r\n    return commonType;\r\n  }\r\n\r\n  /** Looks up the program element the specified new expression refers to. */\r\n  private lookupNewExpression(\r\n    /** The expression to look up. */\r\n    node: NewExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n      return this.resolveClassInclTypeArguments(\r\n        <ClassPrototype>element,\r\n        node.typeArguments,\r\n        ctxFlow.actualFunction,\r\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\r\n        node,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a new expression to its static type. */\r\n  private resolveNewExpression(\r\n    /** The expression to resolve. */\r\n    node: NewExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified function expression refers to. */\r\n  private lookupFunctionExpression(\r\n    /** The expression to look up. */\r\n    node: FunctionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a function expression to its static type. */\r\n  private resolveFunctionExpression(\r\n    /** The expression to resolve. */\r\n    node: FunctionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\r\n  }\r\n\r\n  // ==================================================== Elements =====================================================\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!ctxTypes.has(classTypeParameterName)) {\r\n            ctxTypes.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.functionTypeNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        ctxTypes.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      ctxTypes\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            ctxTypes.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(ctxTypes), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = ctxTypes;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      // inc/dec are special in that an instance overload attempts to re-assign\r\n      // the corresponding value, thus requiring a matching return type, while a\r\n      // static overload works like any other overload.\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        switch (kind) {\r\n          case OperatorKind.PREFIX_INC:\r\n          case OperatorKind.PREFIX_DEC:\r\n          case OperatorKind.POSTFIX_INC:\r\n          case OperatorKind.POSTFIX_DEC: {\r\n            let returnType = operatorInstance.signature.returnType;\r\n            if (!returnType.isAssignableTo(instance.type)) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n  /** This flow terminates (returns, throws or continues). */\r\n  TERMINATES = 1 << 8,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 9,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 10,\r\n  /** This flow conditionally terminates in a child flow. */\r\n  CONDITIONALLY_TERMINATES = 1 << 11,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 12,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 13,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 14,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 15,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 16,\r\n\r\n  // masks\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER\r\n                  | FlowFlags.TERMINATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 1,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 2,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 3,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 4,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 5,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 6,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 7,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 8,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in any arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical flags in either arm as conditional\r\n    this.inheritConditional(left);\r\n    this.inheritConditional(right);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetIndex,\r\n  FeatureFlags,\r\n  needsExplicitUnreachable,\r\n  getLocalSetValue\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement,\r\n  SourceKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Features to activate by default. These are the finished proposals. */\r\n  features: Feature = Feature.MUTABLE_GLOBALS;\r\n  /** If true, disallows unsafe features in user code. */\r\n  noUnsafe: bool = false;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Various constraints in expression compilation. */\r\nexport const enum Constraints {\r\n  NONE = 0,\r\n\r\n  /** Must implicitly convert to the target type. */\r\n  CONV_IMPLICIT = 1 << 0,\r\n  /** Must explicitly convert to the target type. */\r\n  CONV_EXPLICIT = 1 << 1,\r\n  /** Must wrap small integer values to match the target type. */\r\n  MUST_WRAP = 1 << 2,\r\n\r\n  /** Indicates that the value will be dropped immediately. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Indicates that the value will be retained immediately. */\r\n  WILL_RETAIN = 1 << 4,\r\n  /** Indicates that static data is preferred. */\r\n  PREFER_STATIC = 1 << 5\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  get resolver(): Resolver { return this.program.resolver; }\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\r\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  // === Exports ==================================================================================\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var type = field.type;\r\n    var module = this.module;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var type = field.type;\r\n    var module = this.module;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\r\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType,\r\n          !isDeclaredConstant\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches terminate\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.functionTypeNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n      funcRef = module.getFunction(instance.internalName);\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\r\n      statement = (<ExportDefaultStatement>statement).declaration;\r\n    }\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    isLastInBody: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var parent = flow.parent;\r\n    while (parent !== null && parent.breakLabel == breakLabel) {\r\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\r\n      parent = parent.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.i32),\r\n        this.currentType\r\n      )\r\n    );\r\n    var alwaysFalse = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break            ;; (1) skip if no breaks\r\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\r\n    //   (...)                  ;; (3)\r\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough && !alwaysFalse) { // (4)\r\n      stmts.push(module.br(continueLabel, condExpr));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (breaks) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Set up and use the inner flow\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    // Compile the initializer\r\n    var initializer = statement.initializer;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (initializer) initExpr = this.compileStatement(initializer);\r\n\r\n    // Compile the condition\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpression(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // Simplify if the condition is constant\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) == /* false */ 0) {\r\n          let stmts = new Array<ExpressionRef>();\r\n          if (initExpr) stmts.push(initExpr);\r\n          this.performAutoreleases(innerFlow, stmts);\r\n          innerFlow.freeScopedLocals();\r\n          outerFlow.popBreakLabel();\r\n          this.currentFlow = outerFlow;\r\n          return flatten(module, stmts, NativeType.None);\r\n        }\r\n        alwaysTrue = true;\r\n      }\r\n    } else { // Omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n\r\n    // Compile incrementor\r\n    var incrementor = statement.incrementor;\r\n    var incrExpr: ExpressionRef = 0;\r\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\r\n\r\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var loopLabel = \"loop|\" + label;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(bodyStatement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\r\n    //  (initializer)         ;; (2) [may be empty]\r\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\r\n    //   (br_if !cond $break) ;; (4) skip if always true\r\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\r\n    //    (...)               ;; (6)\r\n    //   )\r\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\r\n    //   (br $loop)           ;; (8) skip if skipping (3)\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n    var needsLabel = !alwaysTrue || breaks;\r\n\r\n    var loop = new Array<ExpressionRef>();\r\n    if (!alwaysTrue) { // (4)\r\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    if (continues) { // (5)\r\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\r\n        loop.push(module.block(continueLabel, stmts));\r\n      }\r\n    } else {\r\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\r\n    }\r\n    var expr: ExpressionRef;\r\n    if (fallsThrough || continues) { // (3)\r\n      if (incrExpr) loop.push(incrExpr); // (7)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      loop.push(module.br(loopLabel)); // (8)\r\n      if (initExpr) { // (2)\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          initExpr,\r\n          module.loop(loopLabel, module.block(null, loop))\r\n        ]);\r\n      } else {\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\r\n        ]);\r\n      }\r\n    } else {\r\n      if (initExpr) loop.unshift(initExpr); // (2)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      expr = module.block(needsLabel ? breakLabel : null, loop);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    isLastInBody: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let constraints = Constraints.CONV_IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastInBody && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(\r\n    statement: SwitchStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        Constraints.CONV_IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\r\n    var commonConditional = 0;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminates = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n        }\r\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\r\n          break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\r\n        commonCategorical &= innerFlow.flags;\r\n      }\r\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n      // Switch back to the parent flow\r\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\r\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\r\n    // TODO: what about local states?\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(\r\n    statement: VariableStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\r\n          Constraints.WILL_RETAIN\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, declaration.name.text\r\n            );\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(\r\n    statement: VoidStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(\r\n    statement: WhileStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // Compile condition\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Simplify if the condition is constant\r\n    var alwaysTrue = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\r\n      alwaysTrue = true;\r\n    }\r\n\r\n    // Compile body\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n\r\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\r\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\r\n    //   (br_if !cond $break) ;; (3) skip if always true\r\n    //   (...)                ;; (4)\r\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) { // (5)\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    if (!alwaysTrue) { // (3)\r\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    this.currentType = contextualType;\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (constraints & Constraints.CONV_EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, constraints)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<=\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">=\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\r\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ANYREF: {\r\n            // TODO: ref.eq\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.unreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\r\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ANYREF: {\r\n            // TODO: !ref.eq\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.unreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"+\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"-\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"*\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"**\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let targetType = leftType;\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n          if (compound && targetType != this.currentType) {\r\n            // this yields a proper error if target is i32 for example\r\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"/\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"%\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<<\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"<<\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">>\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \">>\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">>>\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \">>>\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"&\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"&\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"|\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"|\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"^\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"^\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\r\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, this.currentType.toString(), targetType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.lookupExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.unreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          // FIXME: explicit type (currently fails due to missing null checking)\r\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.unreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.block(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.local_tee(tempLocalTarget.index, thisExpr),\r\n                module.local_tee(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Constraints indicating contextual conditions. */\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        Constraints.WILL_RETAIN\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.functionTypeNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\r\n              ? (<NamedTypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.unreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.unreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let name = typeParameterNodes[i].name.text;\r\n            if (inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                resolvedTypeArguments[i] = inferredType;\r\n                continue;\r\n              }\r\n            }\r\n            // unused template, e.g. `function test<T>(): void {...}` called as `test()`\r\n            // invalid because the type is effectively unknown inside the function body\r\n            this.error(\r\n              DiagnosticCode.Type_argument_expected,\r\n              expression.expression.range.atEnd\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.unreachable();\r\n          if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          constraints\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Checks that an unsafe expression is allowed. */\r\n  private checkUnsafe(reportNode: Node): void {\r\n    // Library files may always use unsafe features\r\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\r\n      this.error(\r\n        DiagnosticCode.Expression_is_unsafe,\r\n        reportNode.range\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(constraints & Constraints.WILL_RETAIN)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (constraints & Constraints.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (constraints & Constraints.WILL_RETAIN) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (constraints & Constraints.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\r\n        initType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        body.push(\r\n          module.local_set(argumentLocal.index,\r\n            this.makeRetain(initExpr)\r\n          )\r\n        );\r\n      } else {\r\n        body.push(\r\n          module.local_set(argumentLocal.index, initExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.is(FlowFlags.TERMINATES)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    // FIXME: loses track of nonNull state?\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr: ExpressionRef;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          let theOperands = assert(operands);\r\n          assert(theOperands.length);\r\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\r\n        } else {\r\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\r\n        }\r\n        if (this.currentType.isManaged) {\r\n          if (!skipAutorelease) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              Constraints.CONV_IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var targetExpression = expression.expression;\r\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\r\n    if (targetType) {\r\n      if (targetType.is(TypeFlags.REFERENCE)) {\r\n        let classReference = targetType.classReference;\r\n        if (classReference) {\r\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n          if (indexedGet) {\r\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\r\n              Constraints.CONV_IMPLICIT\r\n            );\r\n            return this.compileCallDirect(indexedGet, [\r\n              expression.elementExpression\r\n            ], expression, thisArg, constraints);\r\n          }\r\n        }\r\n      }\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        expression.expression.range, targetType.toString()\r\n      );\r\n    }\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.functionTypeNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        let classReference = contextualType.classReference;\r\n        if (contextualType.is(TypeFlags.REFERENCE) && classReference !== null) {\r\n          this.currentType = classReference.type.asNullable();\r\n        } else {\r\n          this.currentType = options.usizeType; // TODO: anyref context yields <usize>0\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.lookupIdentifierExpression( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      module.drop(expr),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              constraints,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    constraints: Constraints,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (constraints & Constraints.PREFER_STATIC) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.lookupExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(this.program, null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    var allocExpr = this.makeAllocation(classInstance);\r\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0, allocExpr)\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    constraints: Constraints,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      constraints\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    expression: PropertyAccessExpression,\r\n    ctxType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\r\n    if (!target) return module.unreachable();\r\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\r\n        }\r\n        assert((<EnumValue>target).type == Type.i32);\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n\r\n        if (prototype.is(CommonFlags.STATIC)) {\r\n          let instance = this.compileFunctionUsingTypeArguments(\r\n            prototype,\r\n            [],\r\n            makeMap<string,Type>(),\r\n            expression,\r\n          );\r\n          if (instance == null) {\r\n            return module.unreachable();\r\n          } else {\r\n            this.currentType = instance.type;\r\n            return module.i32(this.ensureFunctionTableEntry(instance));\r\n          }\r\n        }\r\n\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          expression.range, prototype.name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    ctxType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, ctxType)\r\n        : this.compileExpression(ifElse, ctxType);\r\n    }\r\n\r\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = ctxType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType.exceptVoid,\r\n      Constraints.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value,\r\n    // except if a static overload is found, which reverses the use of a temp. (see below)\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n            if (overload) {\r\n              let isInstance = overload.is(CommonFlags.INSTANCE);\r\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\r\n                getValue = getLocalSetValue(getValue);\r\n                flow.freeTempLocal(tempLocal);\r\n                tempLocal = null;\r\n              }\r\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n              if (isInstance) break;\r\n              return expr; // here\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          if (tempLocal) flow.freeTempLocal(tempLocal);\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"++\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n            if (overload) {\r\n              let isInstance = overload.is(CommonFlags.INSTANCE);\r\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\r\n                getValue = getLocalSetValue(getValue);\r\n                flow.freeTempLocal(tempLocal);\r\n                tempLocal = null;\r\n              }\r\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break;\r\n              return expr; // here\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          if (tempLocal) flow.freeTempLocal(tempLocal);\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"--\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\r\n    if (!target) {\r\n      if (tempLocal) flow.freeTempLocal(tempLocal);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"+\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"-\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"-\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\r\n              return expr; // skip re-assign\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"++\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"++\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\r\n              return expr; // skip re-assign\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"--\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"--\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"~\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"~\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      // case TypeKind.ANYREF: {\r\n      //   TODO: ref.is_null\r\n      // }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      // case TypeKind.ANYREF: {\r\n      //   TODO: !ref.is_null\r\n      // }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let fieldPrototype = field.prototype;\r\n      let initializerNode = fieldPrototype.initializerNode;\r\n      let parameterIndex = fieldPrototype.parameterIndex;\r\n      let initExpr: ExpressionRef;\r\n      if (initializerNode) { // use initializer\r\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\r\n        initExpr = module.local_get(\r\n          isInline\r\n            ? assert(flow.lookupLocal(field.name)).index\r\n            : 1 + parameterIndex, // this is local 0\r\n          nativeFieldType\r\n        );\r\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\r\n      } else { // initialize with zero\r\n        initExpr = fieldType.toNativeZero(module);\r\n      }\r\n      stmts.push(\r\n        module.store(fieldType.byteSize,\r\n          module.local_get(thisLocalIndex, nativeSizeType),\r\n          initExpr,\r\n          nativeFieldType,\r\n          field.memoryOffset\r\n        )\r\n      );\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) {\r\n    let single = stmts[0];\r\n    if (getExpressionType(single) == type) return single;\r\n    if (getExpressionId(single) == ExpressionId.Block) {\r\n      let count = getBlockChildCount(single);\r\n      let children = new Array<ExpressionRef>(count);\r\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\r\n      return module.block(getBlockName(single), children, type);\r\n    }\r\n  }\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Mutable_value_cannot_be_inlined = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_present_to_use_0 = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  Expression_is_unsafe = 224,\r\n  Expression_is_never_null = 225,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  An_export_assignment_cannot_have_modifiers = 1120,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Object_is_possibly_null = 2531,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  Type_0_has_no_call_signatures = 2757,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Mutable value cannot be inlined.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be present to use '{0}'.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 224: return \"Expression is unsafe.\";\r\n    case 225: return \"Expression is never 'null'.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1120: return \"An export assignment cannot have modifiers.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2531: return \"Object is possibly 'null'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 2757: return \"Type '{0}' has no call signatures.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  Constraints,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  SIMDTernaryOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n  export const isVoid = \"~lib/builtins/isVoid\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const nameof = \"~lib/builtins/nameof\";\r\n  export const lengthof = \"~lib/builtins/lengthof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\r\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\r\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\r\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          let stringInstance = compiler.program.stringInstance;\r\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          return module.i32(classReference.isArrayLike ? 1 : 0);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.lookupExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.auto,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpression(operands[0], Type.auto);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isVoid: { // isVoid<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.lengthof: { // lengthof<T>() -> i32\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.i32;\r\n      if (!type) return module.unreachable();\r\n\r\n      // Report if there is no call signature\r\n      let signatureReference = type.signatureReference;\r\n      if (!signatureReference) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_has_no_call_signatures,\r\n          reportNode.range, \"1\", (typeArguments ? typeArguments.length : 1).toString(10)\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let parameterNames = signatureReference.parameterNames;\r\n      return module.i32(!parameterNames ? 0 : parameterNames.length);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let typeArgument = typeArguments![0];\r\n      let classType = typeArgument.classReference;\r\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classType !== null)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n    case BuiltinSymbols.nameof: {\r\n      // Check to make sure a parameter or a type was passed to the builtin\r\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      if (!resultType) return module.unreachable();\r\n\r\n      let value: string;\r\n      if (resultType.is(TypeFlags.REFERENCE)) {\r\n        let classReference = resultType.classReference;\r\n        if (classReference) {\r\n          value = classReference.name;\r\n        } else {\r\n          let signatureReference = resultType.signatureReference;\r\n          if (signatureReference) {\r\n            value = \"Function\";\r\n          } else {\r\n            value = \"Anyref\";\r\n          }\r\n        }\r\n      } else {\r\n        switch (resultType.kind) {\r\n          case TypeKind.BOOL: { value = \"bool\"; break; }\r\n          case TypeKind.I8: { value = \"i8\"; break; }\r\n          case TypeKind.U8: { value = \"u8\"; break; }\r\n          case TypeKind.I16: { value = \"i16\"; break; }\r\n          case TypeKind.U16: { value = \"u16\"; break; }\r\n          case TypeKind.I32: { value = \"i32\"; break; }\r\n          case TypeKind.U32: { value = \"u32\"; break; }\r\n          case TypeKind.F32: { value = \"f32\"; break; }\r\n          case TypeKind.I64: { value = \"i64\"; break; }\r\n          case TypeKind.U64: { value = \"u64\"; break; }\r\n          case TypeKind.F64: { value = \"f64\"; break; }\r\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\r\n          case TypeKind.USIZE: { value = \"usize\"; break; }\r\n          case TypeKind.V128: { value = \"v128\"; break; }\r\n          // If the kind is not set properly, throw an error.\r\n          // The default case falls through to satisfy that value is always set, and never null.\r\n          default: assert(false);\r\n          case TypeKind.VOID: { value = \"void\"; break; }\r\n        }\r\n      }\r\n\r\n      return compiler.ensureStaticString(value);\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            Constraints.CONV_IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        contextualType != Type.auto &&\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.atomic_fence();\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpression(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // if the assertion can be proven statically, omit it\r\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n        switch (getExpressionType(arg0)) {\r\n          case NativeType.I32: {\r\n            if (getConstValueI32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            if (getConstValueF32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            if (getConstValueF64(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void)\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let typeArgument = typeArguments![0];\r\n      let classInstance = typeArgument.classReference;\r\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.unary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_qfma:   // qfma(a: v128, b: v128, c: v128) -> v128\r\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDTernaryOp;\r\n      let type = typeArguments![0];\r\n      if (type == Type.f32) {\r\n        op = prototype.internalName == BuiltinSymbols.v128_qfma\r\n           ? SIMDTernaryOp.QFMAF32x4\r\n           : SIMDTernaryOp.QFMSF32x4;\r\n      } else if (type == Type.f64) {\r\n        op = prototype.internalName == BuiltinSymbols.v128_qfma\r\n           ? SIMDTernaryOp.QFMAF64x2\r\n           : SIMDTernaryOp.QFMSF64x2;\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_ternary(op, arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let signatureReference = type.signatureReference;\r\n        if (signatureReference) {\r\n          return module.i32(signatureReference.id);\r\n        }\r\n        let classReference = type.classReference;\r\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n          return module.i32(classReference.id);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.typeArgumentsRange\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let globalType = global.type;\r\n    let classType = globalType.classReference;\r\n    if (\r\n      globalType.is(TypeFlags.REFERENCE) &&\r\n      classType !== null &&\r\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\r\n      global.is(CommonFlags.COMPILED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n    let code = new Array<ExpressionRef>();\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        code.push(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        code.push(\r\n          module.call(visitFunc.internalName, [\r\n            module.local_get(0, nativeSizeType), // ref\r\n            module.local_get(1, NativeType.I32)  // cookie\r\n          ], NativeType.None)\r\n        );\r\n      }\r\n\r\n    // otherwise generate traversal logic for own fields\r\n    } else {\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!instance.base) code.push(module.return());\r\n    let block = relooper.addBlock(\r\n      flatten(module, code, NativeType.None)\r\n    );\r\n    relooper.addBranchForSwitch(outer, block, [ id ]);\r\n    blocks.push(block);\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments !== null && typeArguments.length) {\r\n      if (typeArguments.length > 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n        );\r\n        return null;\r\n      }\r\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\r\n    } else {\r\n      compiler.compileExpression(operands[0], Type.auto);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  SourceKind\r\n } from \"./ast\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\" = typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling,\r\n  isIllegalVariableIdentifier\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n  /** Current file being parsed. */\r\n  currentSource: Source;\r\n  /** Dependency map **/\r\n  dependees: Map<string, Source> = new Map();\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.USER_ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX)\r\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n            ? SourceKind.LIBRARY_ENTRY\r\n            : SourceKind.LIBRARY\r\n          : SourceKind.USER\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n    this.currentSource = source;\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Obtains the dependee for a given import */\r\n  getDependee(dependent: string): string | null {\r\n    var source = this.dependees.get(dependent);\r\n    if (source) {\r\n      return source.internalPath;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    this.dependees.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): TypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: TypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseFunctionType(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \")\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: NamedTypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\r\n          else parameters.push(<NamedTypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function type, as used in type declarations. */\r\n  tryParseFunctionType(\r\n    tn: Tokenizer\r\n  ): FunctionTypeNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: NamedTypeNode | null = null;\r\n    var isSignature: bool = false;\r\n    var firstParamNameNoType: IdentifierExpression | null = null;\r\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.NAMEDTYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <NamedTypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (!isSignature) {\r\n              if (tn.peek() == Token.COMMA) {\r\n                isSignature = true;\r\n                tn.discard(state);\r\n              }\r\n            }\r\n            if (isSignature) {\r\n              let param = new ParameterNode();\r\n              param.parameterKind = kind;\r\n              param.name = name;\r\n              param.type = Node.createOmittedType(tn.range().atEnd);\r\n              if (!parameters) parameters = [ param ];\r\n              else parameters.push(param);\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                param.type.range\r\n              ); // recoverable\r\n            } else if (!parameters) {\r\n              // on '(' Identifier ^',' we don't yet know whether this is a\r\n              // parenthesized or a function type, hence we have to delay the\r\n              // respective diagnostic until we know for sure.\r\n              firstParamNameNoType = name;\r\n              firstParamKind = kind;\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      if (!isSignature) {\r\n        isSignature = true;\r\n        tn.discard(state);\r\n        if (firstParamNameNoType) { // now we know\r\n          let param = new ParameterNode();\r\n          param.parameterKind = firstParamKind;\r\n          param.name = firstParamNameNoType;\r\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\r\n          if (!parameters) parameters = [ param ];\r\n          else parameters.push(param);\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            param.type.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createFunctionType(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (isIllegalVariableIdentifier(identifier.text)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        identifier.range\r\n      );\r\n    }\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <NamedTypeNode>t;\r\n      }\r\n      let defaultType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <NamedTypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: NamedTypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: TypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\r\n          this.parseParametersThis = <NamedTypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: TypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: NamedTypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.NAMEDTYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <NamedTypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: NamedTypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\r\n          else implementsTypes.push(<NamedTypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.peek() == Token.READONLY) {\r\n      let state = tn.mark();\r\n      tn.next();\r\n      if (tn.peek() != Token.COLON) { // modifier\r\n        tn.discard(state);\r\n        flags |= CommonFlags.READONLY;\r\n        readonlyStart = tn.tokenPos;\r\n        readonlyEnd = tn.pos;\r\n      } else { // identifier\r\n        tn.reset(state);\r\n      }\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: TypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createFunctionType(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: TypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.dependees.set(internalPath, this.currentSource);\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.dependees.set(internalPath, this.currentSource);\r\n            this.backlog.push(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.dependees.set(internalPath, this.currentSource);\r\n          this.backlog.push(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifierText = tn.readIdentifier();\r\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\r\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): TypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: TypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: TypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\r\n  // of unreachable statements not actually emitted by the compiler. Optimizing\r\n  // StackIR removes these again, but may also suppress useless code emitted by\r\n  // the compiler that's then no longer visible in tests. Both not ideal.\r\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nif (!String.prototype.replaceAll) {\r\n  Object.defineProperty(String.prototype, \"replaceAll\", {\r\n    value: function replaceAll(search, replacment) {\r\n      var res = this.split(search).join(replacment);\r\n      if (!search.length) res = replacment + res + replacment;\r\n      return res;\r\n    }\r\n  });\r\n}\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Non-trapping float to integer operations. */\r\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\r\n  /** Exception handling operations. */\r\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\r\n  /** Tail call operations. */\r\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\r\n  /** Reference types. */\r\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Key is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Key is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the path of the dependee of a given imported file. */\r\nexport function getDependee(parser: Parser, file: string): string | null {\r\n  return parser.getDependee(file);\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(alias, name);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sets the `noUnsafe` option. */\r\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\r\n  options.noUnsafe = noUnsafe;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\r\n/** Non-trapping float to int conversion operations. */\r\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n/** Exception handling operations. */\r\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\r\n/** Tail call operations. */\r\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\r\n/** Reference types. */\r\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Disables a specific feature. */\r\nexport function disableFeature(options: Options, feature: Feature): void {\r\n  options.features &= ~feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util/index\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}