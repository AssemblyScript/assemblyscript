{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","_super","__extends","_this","apply","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","DecoratorKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","_m","USER_ENTRY","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","Duplicate_static_member_0","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Duplicate_instance_member_0","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","nameNode","typeArgumentNodes","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveExpression","ctxFlow","ctxType","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","resolveIdentifier","actualFunction","resolveLiteralExpression","resolvePropertyAccessExpression","resolveElementAccessExpression","resolveCallExpression","ensureResolvedLazyGlobal","targetNode","propertyName","indexedGet","arrayType","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","Type_argument_expected","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","Expression_is_unsafe","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","allocExpr","propertyAccess","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","nameof","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","setNoUnsafe","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (element.is(CommonFlags.STATIC)) {\n            this.program.error(\n              DiagnosticCode.Duplicate_static_member_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_instance_member_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Resolves an expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // simply skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.resolveExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      node.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var target = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              node.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let arrayType = indexedGet.signature.returnType;\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = node.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = node.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        node.expression,\n        ctxFlow,\n        ctxType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = node.operand;\n    // TODO: operator overloads\n    switch (node.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            ctxType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        assert(typeClasses.has(TypeKind.BOOL));\n        return typeClasses.get(TypeKind.BOOL);\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!resolvedOperand) return null;\n        // TODO: matching integer type\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (node.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    name: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        name.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let literalType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        node.arguments.length > 0\n      ) {\n        return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        if(!this.program.elementsByDeclaration.has(<FieldDeclaration>statement)) { break; }\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let name = typeParameterNodes[i].name.text;\n            if (inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                resolvedTypeArguments[i] = inferredType;\n                continue;\n              }\n            }\n            // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n            // invalid because the type is effectively unknown inside the function body\n            this.error(\n              DiagnosticCode.Type_argument_expected,\n              expression.expression.range.atEnd\n            );\n            return this.module.unreachable();\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Expression_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        let classReference = contextualType.classReference;\n        if (!classReference) {\n          this.currentType = options.usizeType;\n        } else {\n          this.currentType = classReference.type.asNullable();\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(propertyAccess);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            propertyAccess,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = fieldType.toNativeZero(module);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Expression_is_unsafe = 224,\n  Expression_is_never_null = 225,\n  Duplicate_instance_member_0 = 231,\n  Duplicate_static_member_0 = 232,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"Expression is unsafe.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 231: return \"Duplicate instance member '{0}'.\";\n    case 232: return \"Duplicate static member '{0}'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T>(): i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n\n      // Report if there is no call signature\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, \"1\", (typeArguments ? typeArguments.length : 1).toString(10)\n        );\n        return module.unreachable();\n      }\n\n      let parameterNames = signatureReference.parameterNames;\n      return module.i32(!parameterNames ? 0 : parameterNames.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      // Check to make sure a parameter or a type was passed to the builtin\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) return module.unreachable();\n\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (!classReference) {\n          assert(resultType.signatureReference);\n          value = \"Function\";\n        } else {\n          value = classReference.name;\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          // If the kind is not set properly, throw an error.\n          // The default case falls through to satisfy that value is always set, and never null.\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (type.is(TypeFlags.REFERENCE) && signatureReference !== null) {\n        return module.i32(signatureReference.id);\n      }\n\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Obtains the dependee for a given import */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) {\n      return source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}