{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromString","str","INDEXED_GET","INDEXED_SET","ADD","SUB","MUL","DIV","REM","POW","AND","OR","XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","assert","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","IDENTIFIER","flag","decoratorKindToFlag","stringToDecoratorKind","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","isLibrary","is","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","toString","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","ENUM","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","_b","scopedLocal","addScopedLocal","existingLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","CUSTOM","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","PRECOMPUTE","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","typeRef","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","compileAbort","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedSet","Index_signature_in_type_0_only_permits_reading","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","ensureArgcVar","numOperands","isCallImport","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","byteLength","elementCount","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","explicitSimpleName","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantType","evaluateConstantOffset","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","abort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray"],"mappings":"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M,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  stringToDecoratorKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n  INDEXED_GET,\r\n  INDEXED_SET,\r\n  ADD,\r\n  SUB,\r\n  MUL,\r\n  DIV,\r\n  REM,\r\n  POW,\r\n  AND,\r\n  OR,\r\n  XOR,\r\n  EQ,\r\n  NE,\r\n  GT,\r\n  GE,\r\n  LT,\r\n  LE\r\n}\r\n\r\nfunction operatorKindFromString(str: string): OperatorKind {\r\n  switch (str) {\r\n    case \"[]\" : return OperatorKind.INDEXED_GET;\r\n    case \"[]=\": return OperatorKind.INDEXED_SET;\r\n    case \"+\"  : return OperatorKind.ADD;\r\n    case \"-\"  : return OperatorKind.SUB;\r\n    case \"*\"  : return OperatorKind.MUL;\r\n    case \"/\"  : return OperatorKind.DIV;\r\n    case \"%\"  : return OperatorKind.REM;\r\n    case \"**\" : return OperatorKind.POW;\r\n    case \"&\"  : return OperatorKind.AND;\r\n    case \"|\"  : return OperatorKind.OR;\r\n    case \"^\"  : return OperatorKind.XOR;\r\n    case \"==\" : return OperatorKind.EQ;\r\n    case \"!=\" : return OperatorKind.NE;\r\n    case \">\"  : return OperatorKind.GT;\r\n    case \">=\" : return OperatorKind.GE;\r\n    case \"<\"  : return OperatorKind.LT;\r\n    case \"<=\" : return OperatorKind.LE;\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.name.kind == NodeKind.IDENTIFIER) {\r\n        let name = (<IdentifierExpression>decorator.name).text;\r\n        let kind = stringToDecoratorKind(name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, name\r\n            );\r\n          } else if (presentFlags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, name\r\n            );\r\n          } else {\r\n            presentFlags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              let kind = operatorKindFromString((<StringLiteralExpression>firstArg).value);\r\n              if (kind == OperatorKind.INVALID) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  firstArg.range\r\n                );\r\n              } else {\r\n                let overloads = classPrototype.overloadPrototypes;\r\n                if (overloads.has(kind)) {\r\n                  this.error(\r\n                    DiagnosticCode.Duplicate_function_implementation,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  prototype.operatorKind = kind;\r\n                  overloads.set(kind, prototype);\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 2,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 3,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 4\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n            // FIXME: declaration?\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind): Function | null {\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Scoped global variables. */\r\n  // scopedGlobals: Map<Local,Global> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Adds a scoped global for an outer scoped local. */\r\n  // addScopedGlobal(scopedLocal: Local): Global {\r\n  //   var scopedGlobals = this.scopedGlobals;\r\n  //   var scopedGlobal: Global | null;\r\n  //   if (!scopedGlobals) {\r\n  //     this.scopedGlobals = scopedGlobals = new Map();\r\n  //   } else {\r\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\r\n  //     if (scopedGlobal) return scopedGlobal;\r\n  //   }\r\n  //   scopedGlobal = new Global(\r\n  //     scopedLocal.program,\r\n  //     scopedLocal.simpleName,\r\n  //     this.currentFunction.internalName + INNER_DELIMITER + scopedLocal.internalName,\r\n  //     scopedLocal.type,\r\n  //     assert(scopedLocal.declaration)\r\n  //   );\r\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\r\n  //   return scopedGlobal;\r\n  // }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = expression.kind == NodeKind.IDENTIFIER\r\n      ? stringToDecoratorKind((<IdentifierExpression>expression).text)\r\n      : DecoratorKind.CUSTOM;\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  PRECOMPUTE\r\n}\r\n\r\n/** Returns the decorator kind represented by the specified string. */\r\nexport function stringToDecoratorKind(str: string): DecoratorKind {\r\n  switch (str) {\r\n    case \"global\": return DecoratorKind.GLOBAL;\r\n    case \"operator\": return DecoratorKind.OPERATOR;\r\n    case \"unmanaged\": return DecoratorKind.UNMANAGED;\r\n    case \"sealed\": return DecoratorKind.SEALED;\r\n    case \"inline\": return DecoratorKind.INLINE;\r\n    case \"precompute\": return DecoratorKind.PRECOMPUTE;\r\n    default: return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType ? \"usize\" : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getGenericParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (!source) {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileSource(source);\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              assert(global.declaration).range\r\n            );\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        assert(false);\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // When inlining, break to the end of the inlined function's block\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (statement.value) {\r\n        expression = this.compileExpression(\r\n          statement.value,\r\n          assert(flow.returnType)\r\n        );\r\n      }\r\n      return module.createBreak(assert(flow.returnLabel), 0, expression);\r\n    }\r\n\r\n    // Otherwise return as usual\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        flow.returnType\r\n      );\r\n    }\r\n    return module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          flow.addScopedLocal(type, name, declaration); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SHORT)) expr = makeSmallIntegerWrap(expr, toType, module);\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SHORT) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must be wrapped\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.POW);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType == Type.f32) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType\r\n          );\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            left\r\n          );\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64\r\n          );\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.REM);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.AND);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.OR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.XOR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            leftType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n      // checks and recompiles the argument according to its actual annotated type\r\n      var argumentExpressions: Expression[];\r\n      var thisArg: ExpressionRef = 0;\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(operatorInstance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        thisArg = this.compileExpression(value, (<Class>parent).type);\r\n        argumentExpressions = [];\r\n      } else {\r\n        argumentExpressions = [ value ];\r\n      }\r\n      return this.compileCallDirect(\r\n        operatorInstance,\r\n        argumentExpressions,\r\n        reportNode,\r\n        thisArg,\r\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n      );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // checks and recompiles the arguments according to their actual annotated types\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = this.compileExpression(left, (<Class>parent).type);\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ];\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, (<Class>target).internalName\r\n            );\r\n            return this.module.createUnreachable();\r\n          }\r\n          elementType = indexedGet.signature.returnType;\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>target).type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n            let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameterTypes;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameterTypes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\");\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let argumentLocal = flow.addScopedLocal(parameterTypes[i], signature.getParameterName(i));\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index,\r\n          this.compileExpression(\r\n            argumentExpressions[i],\r\n            parameterTypes[i]\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let argumentLocal = flow.addScopedLocal(parameterTypes[i], signature.getParameterName(i));\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index,\r\n          this.compileExpression(\r\n            assert(declaration.signature.parameterTypes[i].initializer),\r\n            parameterTypes[i]\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) { // it's ok to unwrap the block here\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        body.push(this.compileStatement(statements[i]));\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches return\r\n    if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type);\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          this.currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementCount = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var byteLength: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementCount));\r\n        byteLength = elementCount * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementCount));\r\n        byteLength = elementCount * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementCount));\r\n        byteLength = elementCount * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementCount));\r\n        byteLength = elementCount * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementCount);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementCount; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    if (isStatic) {\r\n      // Create a combined static memory segment composed of:\r\n      // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n      let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n      let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n      let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n      let data = new Uint8Array(arraySize + bufferTotalSize);\r\n      let segment = this.addMemorySegment(data);\r\n      let offset = 0;\r\n\r\n      // write Array struct\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n        offset += 8;\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n        offset += 4;\r\n      }\r\n      writeI32(elementCount, data, offset); // length_\r\n      offset += 4;\r\n      assert(offset == arraySize);\r\n\r\n      // write ArrayBuffer struct\r\n      writeI32(byteLength, data, offset);\r\n      offset += bufferHeaderSize; // incl. alignment\r\n\r\n      // write ArrayBuffer data\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementCount; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset <= arraySize + bufferTotalSize);\r\n\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      currentFunction.flow.contextualTypeArguments,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var currentFunction = this.currentFunction;\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, ConversionKind.IMPLICIT, ifThen);\r\n    ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, ConversionKind.IMPLICIT, ifElse);\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SHORT | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, explicitSimpleName: string | null = null): string {\r\n  var simpleName = explicitSimpleName != null\r\n    ? explicitSimpleName\r\n    : element.simpleName;\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  private includePrivate: bool;\r\n  /** Already seen elements. */\r\n  private seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else assert(false);\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n    } else if (element.is(CommonFlags.SET)) {\r\n      sb.push(\"set \");\r\n      sb.push(element.prototype.declaration.name.text);\r\n    } else {\r\n      if (!element.is(CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    /* TBD: the compiler implicitly generates setters if the class is exported\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"get \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(): \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    if (!element.is(CommonFlags.READONLY)) {\r\n      indent(sb, this.indentLevel);\r\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n      if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n      sb.push(\"set \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\"(\");\r\n      sb.push(element.simpleName);\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(element.type));\r\n      sb.push(\");\\n\");\r\n    }\r\n    */\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, false);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}