{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","ElementKind","CommonFlags","QueuedExport","QueuedImport","TypeAlias","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","length","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedDerivedClasses","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedDeclaration","derivedType","assert","extendsType","derived","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","checkGlobalOptions","parentNode","is","GLOBAL","isLibrary","SOURCE","simpleName","BUILTIN","namespace","fileLevelInternalName","ClassPrototype","implementsTypes","numImplementsTypes","UNMANAGED","Structs_cannot_implement_interfaces","Range","join","Operation_not_supported","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","Error","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperators","decorators","decorator","decoratorKind","DecoratorKind","OPERATOR","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","fnIndexedGet","fnIndexedSet","fnConcat","fnSubtract","fnMultiply","fnDivide","fnFractional","fnBitwiseAnd","fnBitwiseOr","fnBitwiseXor","fnEquals","fnNotEquals","fnGreaterThan","fnGreaterThanEquals","fnLessThan","fnLessThanEquals","String_literal_expected","Expected_0_arguments_but_got_1","toString","CUSTOM","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","isModuleExport","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","queuedExtendingClasses","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameterTypes","numParameters","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","globalName","localName","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","indexedGetPrototype","getIndexedGet","indexedGetInstance","base","resolveElementAccess","elementAccess","elementExpression","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","memberOf","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NONE","flag","NAMESPACE","ENUM","constantValue","enum","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","locals","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","contextualTypeArguments_1","contextualTypeArguments_1_1","parameterName","getParameterName","Flow","create","addLocal","local","getTempLocal","temps","toNativeType","NativeType","I32","I64","F32","F64","ret","pop","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseClass","baseClassType","SEALED","Class_0_is_sealed_and_cannot_be_extended","Structs_cannot_extend_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","methodPrototype","instanceProperty","partialGetterPrototype","partialSetterPrototype","asClass","_b","baseType","isAssignableTo","current","getIndexedSet","INTERFACE_PROTOTYPE","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","unset","enterBranchOrScope","branch","leaveBranchOrScope","scopedLocal","addScopedLocal","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","charCodeAt","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","_BinaryenModuleCreate","out","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","createI32","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","relooper","_RelooperCreate","createStub","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","parameters","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","OFFSET","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","getFirstDecorator","asGlobal","hasDecorator","g","eval","e","window","tokenFomKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","preferIdentifier","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","size","nullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","computeSmallIntegerMask","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getGenericParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","includeThis","optionalStart","restIndex","cachedGenericParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","ConversionKind","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argumentCountRef","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","typeRef","ensureFunctionType","funcRef","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","ensureTrampoline","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","stmtReturns","stmtThrows","stmtAllocates","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","previousBreakLabel","previousContinueLabel","condExpr","makeIsTrueish","context","alwaysReturns","alwaysThrows","alwaysAllocates","GENERIC_CONTEXT","ifTrueExpr","ifTrueReturns","ifTrueThrows","ifTrueAllocates","ifFalseExpr","ifFalseReturns","ifFalseThrows","ifFalseAllocates","tempLocal","tempLocalIndex","numCases","breaks","breakIndex","defaultIndex","EqI32","currentBlock","fallsThrough","nextLabel","isKnownGlobal","numDeclarations","initializers","init","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","shift","mask","conversionKind","wrapSmallIntegers","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","compileExpressionRetainType","precomputeExpression","_BinaryenFunctionGetBody","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","makeSmallIntegerWrap","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","possiblyOverflows","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","operatorName","compileOperatorOverload","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","operatorPrototype","operatorInstance","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","Index_signature_is_missing_in_type_0","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedSetPrototype","Index_signature_in_type_0_only_permits_reading","indexedSetInstance","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCall","compileCallDirect","compileCallIndirect","checkCallSignature","numArguments","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","numArgumentsInclThis","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","numOperands","isCallImport","ensureArgumentCount","makeCallIndirect","numExpressions","exprs","retainConstantType","superType","localType","compileGetConstant","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileStaticArray","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayType","memorySize","elementSize","Int32Array","Float32Array","Float64Array","usizeTypeSize","headerSize","writeI64","writeI32","writeF32","writeF64","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenAllocates","ifElseAllocates","getValue","Unreachable","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","EqzI32","EqzI64","compiler","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","tryParseSignatureIsSignature","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","parseStatement","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","Type_parameter_list_cannot_be_empty","typeParameter","parseTypeParameter","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","skipStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","walk","visitElement","visitGlobal","visitEnum","visitFunction","_e","visitClass","visitNamespace","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Decompiler","functionId","decompile","decompiler","decompileFunction","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","nativeTypeToType","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","Block","decompileExpression","nested","string","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","If","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","Loop","_BinaryenLoopGetName","_BinaryenLoopGetBody","Break","_BinaryenBreakGetCondition","_BinaryenBreakGetName","Switch","Call","CallImport","CallIndirect","SetLocal","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","SetGlobal","Store","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","ClzI32","CtzI32","PopcntI32","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Select","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","Drop","_BinaryenDropGetValue","Return","_BinaryenReturnGetValue","Host","_BinaryenHostGetOp","CurrentMemory","GrowMemory","_BinaryenHostGetOperand","Nop","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","min","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shl","i64_shr","i64_not","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","evaluateConstantOffset","NaN","Infinity","Type_0_is_not_generic","tempLocal0","tempLocal1","alignLog2","fieldName","Type_0_has_no_property_1","abort","compileAbort","allocateInternalName","allocatePrototype","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","off","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","sqrt","trunc","isTrueish","undefined","fromCodePoint","Number","isInteger","arg","isArray","y"],"mappings":"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KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  // ParameterNode,\r\n  // ParameterKind,\r\n  // SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ParameterKind,\r\n  SignatureNode,\r\n  VariableDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n} from \"./module\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedDerivedClasses = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedDerivedClasses);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedDerivedClasses.length; i < k; ++i) {\r\n      let derivedDeclaration = queuedDerivedClasses[i].declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let derived = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!derived) continue;\r\n      if (derived.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        queuedDerivedClasses[i].basePrototype = <ClassPrototype>derived;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        let element = this.elementsLookup.get(name); // TODO: error? has no source range\r\n        if (element) this.elementsLookup.set(alias, element);\r\n      }\r\n    }\r\n\r\n    // register array\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register string\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      element.is(CommonFlags.GLOBAL) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let simpleName = declaration.name.text;\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        element.set(CommonFlags.GLOBAL);\r\n        this.elementsLookup.set(simpleName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) {\r\n          element.internalName = simpleName;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedDerivedClasses: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.is(CommonFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Structs_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) {\r\n      queuedDerivedClasses.push(prototype);\r\n    }\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        if (prototype.is(CommonFlags.EXPORT)) {\r\n          prototype.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperators(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperators(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    // handle operator annotations. operators are either instance methods taking\r\n    // a second argument of the instance's type or static methods taking two\r\n    // arguments of the instance's type. return values vary depending on the\r\n    // operation.\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        if (decorator.decoratorKind == DecoratorKind.OPERATOR) {\r\n          if (!prototype) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              decorator.range\r\n            );\r\n            continue;\r\n          }\r\n          let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n          if (numArgs == 1) {\r\n            let firstArg = (<Expression[]>decorator.arguments)[0];\r\n            if (\r\n              firstArg.kind == NodeKind.LITERAL &&\r\n              (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n            ) {\r\n              switch ((<StringLiteralExpression>firstArg).value) {\r\n                case \"[]\": {\r\n                  classPrototype.fnIndexedGet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"[]=\": {\r\n                  classPrototype.fnIndexedSet = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"+\": {\r\n                  classPrototype.fnConcat = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"-\": {\r\n                  classPrototype.fnSubtract = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"*\": {\r\n                  classPrototype.fnMultiply = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"/\": {\r\n                  classPrototype.fnDivide = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"%\": {\r\n                  classPrototype.fnFractional = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"&\": {\r\n                  classPrototype.fnBitwiseAnd = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"|\": {\r\n                  classPrototype.fnBitwiseOr = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"^\": {\r\n                  classPrototype.fnBitwiseXor = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"==\": {\r\n                  classPrototype.fnEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"!=\": {\r\n                  classPrototype.fnNotEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \">\": {\r\n                  classPrototype.fnGreaterThan = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \">=\": {\r\n                  classPrototype.fnGreaterThanEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"<\": {\r\n                  classPrototype.fnLessThan = prototype.simpleName;\r\n                  break;\r\n                }\r\n                case \"<=\": {\r\n                  classPrototype.fnLessThanEquals = prototype.simpleName;\r\n                  break;\r\n                }\r\n                default: {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.String_literal_expected,\r\n                firstArg.range\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"1\", numArgs.toString(0)\r\n            );\r\n          }\r\n        } else if (decorator.decoratorKind != DecoratorKind.CUSTOM) {\r\n          // methods support built-in @operator only\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            decorator.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.namespace = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var isModuleExport = enm.is(CommonFlags.MODULE_EXPORT);\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (isModuleExport) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null\r\n    );\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) {\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        statement.namespaceName.text\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    var indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var prototype = new InterfacePrototype(this, declaration.name.text, internalName, declaration);\r\n    prototype.namespace = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtendingClasses: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.namespace = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtendingClasses, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration\r\n      );\r\n      global.namespace = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameterTypes;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n\r\n    // check file-global / program-global element\r\n    if ((element = this.elementsLookup.get(localName)) || (element = this.elementsLookup.get(globalName))) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.namespace) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.namespace);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\r\n          if (indexedGetPrototype) {\r\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\r\n            if (!indexedGetInstance) return null;\r\n            let classReference = indexedGetInstance.signature.returnType.classReference;\r\n            if (!classReference) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n              );\r\n              return null;\r\n            }\r\n            target = classReference;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        assert(!this.resolvedThisExpression && !this.resolvedElementExpression);\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGetPrototype = (<Class>target).getIndexedGet();\r\n        if (indexedGetPrototype) {\r\n          let indexedGetInstance = indexedGetPrototype.resolve(); // reports\r\n          if (!indexedGetInstance) return null;\r\n          let returnType = indexedGetInstance.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        let parent = contextualFunction.memberOf;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Internal decorators\r\n\r\n  /** Is global. */\r\n  GLOBAL = 1 << 13,\r\n  /** Is built-in. */\r\n  BUILTIN = 1 << 14,\r\n  /** Is unmanaged. */\r\n  UNMANAGED = 1 << 15,\r\n  /** Is sealed. */\r\n  SEALED = 1 << 16,\r\n\r\n  // Extended modifiers usually derived from basic modifiers or internal decorators\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 17,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 18,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 19,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 20,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 21,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 22,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 23,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 24,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 25,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 26,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 27,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 28\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent namespace, if applicable. */\r\n  namespace: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Parent enum. */\r\n  enum: Enum;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.enum = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameterTypes;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(this, internalName, signature, classInstance ? classInstance : classPrototype);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** If a member of another namespace-like element, the concrete element it is a member of. */\r\n  memberOf: Element | null;\r\n  /** Map of locals by name. */\r\n  locals: Map<string,Local> = new Map();\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] | null = null;\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    memberOf: Element | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.memberOf = memberOf;\r\n    this.flags = prototype.flags;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (memberOf && memberOf.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        this.locals.set(\r\n          \"this\",\r\n          new Local(\r\n            prototype.program,\r\n            \"this\",\r\n            localIndex++,\r\n            assert(signature.thisType)\r\n          )\r\n        );\r\n        let contextualTypeArguments = (<Class>memberOf).contextualTypeArguments;\r\n        if (contextualTypeArguments) {\r\n          if (!this.contextualTypeArguments) {\r\n            this.contextualTypeArguments = new Map();\r\n          }\r\n          for (let [inheritedName, inheritedType] of contextualTypeArguments) {\r\n            this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        this.locals.set(\r\n          parameterName,\r\n          new Local(\r\n            prototype.program,\r\n            parameterName,\r\n            localIndex++,\r\n            parameterType\r\n            // FIXME: declaration?\r\n          )\r\n        );\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.locals.has(name)) throw new Error(\"duplicate local name\");\r\n      this.locals.set(name, local);\r\n    }\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps && temps.length) {\r\n      let ret = temps.pop();\r\n      ret.type = type;\r\n      return ret;\r\n    }\r\n    return this.addLocal(type);\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    if (temps.length > 0) {\r\n      return temps[temps.length - 1];\r\n    }\r\n    var local: Local = this.addLocal(type);\r\n    temps.push(local);\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) {\r\n      this.breakStack = [ id ];\r\n    } else {\r\n      this.breakStack.push(id);\r\n    }\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      if (debugLocations) {\r\n        for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n          let debugLocation = debugLocations[i];\r\n          module.setDebugLocation(\r\n            ref,\r\n            debugLocation.debugInfoRef,\r\n            debugLocation.source.debugInfoIndex,\r\n            debugLocation.line,\r\n            debugLocation.column\r\n          );\r\n        }\r\n      }\r\n    }\r\n    this.debugLocations = null;\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Overloaded indexed get method, if any. */\r\n  fnIndexedGet: string | null = null;\r\n  /** Overloaded indexed set method, if any. */\r\n  fnIndexedSet: string | null = null;\r\n  /** Overloaded concatenation method, if any. */\r\n  fnConcat: string | null = null;\r\n  /** Overloaded subtraction method, if any. */\r\n  fnSubtract: string | null = null;\r\n  /** Overloaded multiply method, if any. */\r\n  fnMultiply: string | null = null;\r\n  /** Overloaded divide method, if any. */\r\n  fnDivide: string | null = null;\r\n  /** Overloaded fractional method, if any. */\r\n  fnFractional: string | null = null;\r\n  /** Overloaded bitwise and method, if any. */\r\n  fnBitwiseAnd: string | null = null;\r\n  /** Overloaded bitwise or method, if any. */\r\n  fnBitwiseOr: string | null = null;\r\n  /** Overloaded bitwise xor method, if any. */\r\n  fnBitwiseXor: string | null = null;\r\n  /** Overloaded equality comparison method, if any. */\r\n  fnEquals: string | null = null;\r\n  /** Overloaded non-equality comparison method, if any. */\r\n  fnNotEquals: string | null = null;\r\n  /** Overloaded greater comparison method, if any. */\r\n  fnGreaterThan: string | null = null;\r\n  /** Overloaded greater or equal comparison method, if any. */\r\n  fnGreaterThanEquals: string | null = null;\r\n  /** Overloaded less comparison method, if any. */\r\n  fnLessThan: string | null = null;\r\n  /** Overloaded less or equal comparison method, if any. */\r\n  fnLessThanEquals: string | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.is(CommonFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.prototype.is(CommonFlags.UNMANAGED) != this.is(CommonFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Structs_cannot_extend_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n          case ElementKind.FIELD_PROTOTYPE: { // fields are layed out in advance\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: { // instance methods remain partially resolved prototypes until compiled\r\n            if (!instance.members) instance.members = new Map();\r\n            let methodPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (methodPrototype) {\r\n              methodPrototype.internalName = internalName + INSTANCE_DELIMITER + methodPrototype.simpleName;\r\n              instance.members.set(member.simpleName, methodPrototype);\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: { // instance properties are cloned with partially resolved getters and setters\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      if (base.contextualTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of base.contextualTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do {\r\n      if (current == target) {\r\n        return true;\r\n      }\r\n    } while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  getIndexedGet(): FunctionPrototype | null {\r\n    var members = this.members;\r\n    var name = this.prototype.fnIndexedGet;\r\n    if (!members || name == null) return null;\r\n    var element = members.get(name);\r\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return <FunctionPrototype>element;\r\n  }\r\n\r\n  getIndexedSet(): FunctionPrototype | null {\r\n    var members = this.members;\r\n    var name = this.prototype.fnIndexedSet;\r\n    if (!members || name == null) return null;\r\n    var element = members.get(name);\r\n    if (!element || element.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return <FunctionPrototype>element;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName, declaration);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Scoped global variables. */\r\n  // scopedGlobals: Map<Local,Global> | null = null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        this.currentFunction.freeTempLocal(scopedLocal);\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate flags to parent\r\n    if (this.is(FlowFlags.RETURNS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (this.is(FlowFlags.THROWS)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n      parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (this.is(FlowFlags.ALLOCATES)) {\r\n      parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, declaration: VariableDeclaration): void {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else if (this.scopedLocals.has(name)) {\r\n      this.currentFunction.program.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range\r\n      );\r\n      return;\r\n    }\r\n    this.scopedLocals.set(name, scopedLocal);\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.locals.get(name);\r\n  }\r\n\r\n  /** Adds a scoped global for an outer scoped local. */\r\n  // addScopedGlobal(scopedLocal: Local): Global {\r\n  //   var scopedGlobals = this.scopedGlobals;\r\n  //   var scopedGlobal: Global | null;\r\n  //   if (!scopedGlobals) {\r\n  //     this.scopedGlobals = scopedGlobals = new Map();\r\n  //   } else {\r\n  //     scopedGlobal = scopedGlobals.get(scopedLocal);\r\n  //     if (scopedGlobal) return scopedGlobal;\r\n  //   }\r\n  //   scopedGlobal = new Global(\r\n  //     scopedLocal.program,\r\n  //     scopedLocal.simpleName,\r\n  //     this.currentFunction.internalName + INNER_DELIMITER + scopedLocal.internalName,\r\n  //     scopedLocal.type,\r\n  //     assert(scopedLocal.declaration)\r\n  //   );\r\n  //   scopedGlobals.set(scopedLocal, scopedGlobal);\r\n  //   return scopedGlobal;\r\n  // }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null, \"must be the topmost parent flow\");\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) {\r\n    start--;\r\n  }\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) {\r\n    end++;\r\n  }\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64()\r\n\r\n  // see: https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#new-sign-extending-operators\r\n  // ExtendI8ToI32 =_BinaryenExtendS8Int32()\r\n  // ExtendI16ToI32 = _BinaryenExtendS16Int32()\r\n  // ExtendI8ToI64 = _BinaryenExtendS8Int64() // operand is I64\r\n  // ExtendI16ToI64 = _BinaryenExtendS16Int64()\r\n  // ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n  out: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.out = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.out = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.out;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocI32Array(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocI32Array(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocI32Array(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocI32Array(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.out;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!this.ref) return; // sic\r\n    _BinaryenModuleDispose(this.ref);\r\n    free_memory(this.out);\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenLoadIsAtomic(expr)\r\n          ? _BinaryenAtomicLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadGetOffset(expr),\r\n              _BinaryenExpressionGetType(expr),\r\n              nested1\r\n            )\r\n          : _BinaryenLoad(this.ref,\r\n              _BinaryenLoadGetBytes(expr),\r\n              _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n              _BinaryenLoadGetOffset(expr),\r\n               _BinaryenLoadGetAlign(expr),\r\n               _BinaryenExpressionGetType(expr),\r\n               nested1\r\n            );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n      return relooper;\r\n  }\r\n\r\n  static createStub(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = 0;\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameterTypes = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    expression: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = expression; expression.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    if (expression.kind == NodeKind.IDENTIFIER) {\r\n      switch ((<IdentifierExpression>expression).text) {\r\n        case \"global\": {\r\n          stmt.decoratorKind = DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case \"operator\": {\r\n          stmt.decoratorKind = DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case \"unmanaged\": {\r\n          stmt.decoratorKind = DecoratorKind.UNMANAGED;\r\n          break;\r\n        }\r\n        case \"offset\": {\r\n          stmt.decoratorKind = DecoratorKind.OFFSET;\r\n          break;\r\n        }\r\n        default: {\r\n          stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      stmt.decoratorKind = DecoratorKind.CUSTOM;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameterTypes: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  UNMANAGED,\r\n  OFFSET\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Gets the first decorator by name within at set of decorators, if present. */\r\nexport function getFirstDecorator(name: string, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let expression = decorator.name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return decorator;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  return getFirstDecorator(name, decorators) != null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport function tokenFomKeyword(text: string): Token {\r\n  switch (text) {\r\n    case \"abstract\": return Token.ABSTRACT;\r\n    case \"as\": return Token.AS;\r\n    case \"async\": return Token.ASYNC;\r\n    case \"await\": return Token.AWAIT;\r\n    case \"break\": return Token.BREAK;\r\n    case \"case\": return Token.CASE;\r\n    case \"catch\": return Token.CATCH;\r\n    case \"class\": return Token.CLASS;\r\n    case \"continue\": return Token.CONTINUE;\r\n    case \"const\": return Token.CONST;\r\n    case \"constructor\": return Token.CONSTRUCTOR;\r\n    case \"debugger\": return Token.DEBUGGER;\r\n    case \"declare\": return Token.DECLARE;\r\n    case \"default\": return Token.DEFAULT;\r\n    case \"delete\": return Token.DELETE;\r\n    case \"do\": return Token.DO;\r\n    case \"else\": return Token.ELSE;\r\n    case \"enum\": return Token.ENUM;\r\n    case \"export\": return Token.EXPORT;\r\n    case \"extends\": return Token.EXTENDS;\r\n    case \"false\": return Token.FALSE;\r\n    case \"finally\": return Token.FINALLY;\r\n    case \"for\": return Token.FOR;\r\n    case \"from\": return Token.FROM;\r\n    case \"function\": return Token.FUNCTION;\r\n    case \"get\": return Token.GET;\r\n    case \"if\": return Token.IF;\r\n    case \"implements\": return Token.IMPLEMENTS;\r\n    case \"import\": return Token.IMPORT;\r\n    case \"in\": return Token.IN;\r\n    case \"instanceof\": return Token.INSTANCEOF;\r\n    case \"interface\": return Token.INTERFACE;\r\n    case \"is\": return Token.IS;\r\n    case \"keyof\": return Token.KEYOF;\r\n    case \"let\": return Token.LET;\r\n    case \"module\": return Token.MODULE;\r\n    case \"namespace\": return Token.NAMESPACE;\r\n    case \"new\": return Token.NEW;\r\n    case \"null\": return Token.NULL;\r\n    case \"of\": return Token.OF;\r\n    case \"package\": return Token.PACKAGE;\r\n    case \"private\": return Token.PRIVATE;\r\n    case \"protected\": return Token.PROTECTED;\r\n    case \"public\": return Token.PUBLIC;\r\n    case \"readonly\": return Token.READONLY;\r\n    case \"return\": return Token.RETURN;\r\n    case \"set\": return Token.SET;\r\n    case \"static\": return Token.STATIC;\r\n    case \"super\": return Token.SUPER;\r\n    case \"switch\": return Token.SWITCH;\r\n    case \"this\": return Token.THIS;\r\n    case \"throw\": return Token.THROW;\r\n    case \"true\": return Token.TRUE;\r\n    case \"try\": return Token.TRY;\r\n    case \"type\": return Token.TYPE;\r\n    case \"typeof\": return Token.TYPEOF;\r\n    case \"var\": return Token.VAR;\r\n    case \"void\": return Token.VOID;\r\n    case \"while\": return Token.WHILE;\r\n    case \"with\": return Token.WITH;\r\n    case \"yield\": return Token.YIELD;\r\n    default: return Token.INVALID;\r\n  }\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(preferIdentifier: bool = false): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(preferIdentifier);\r\n  }\r\n\r\n  private unsafeNext(preferIdentifier: bool = false, maxTokenLength: i32 = i32.MAX_VALUE): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFomKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                !(preferIdentifier && tokenIsAlsoIdentifier(keywordToken))\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    preferIdentifier: bool = false,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(preferIdentifier, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skip(token: Token): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(token == Token.IDENTIFIER, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n    reusableState = state;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a sized integer type with a target specific bit size. */\r\n  SIZE = 1 << 4,\r\n  /** Is a small type that is emulated in a larger type. */\r\n  SMALL = 1 << 5,\r\n  /** Is a long type larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. Ceiled to 8-bits. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying function reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective nullable type, if non-nullable. */\r\n  nullableType: Type | null = null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: i32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    return ~0 >>> (targetType.size - this.size);\r\n  }\r\n\r\n  /** Tests if this type has the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.nullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.nullableType.classReference = this.classReference;       // either a class reference\r\n      this.nullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.nullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) {\r\n      return left;\r\n    } else if (left.isAssignableTo(right, signednessIsImportant)) {\r\n      return right;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType\r\n          ? \"u32\"\r\n          : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType\r\n          ? \"usize\"\r\n          : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.SIZE     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SMALL    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    ret[i] = types[i].toNativeType();\r\n  }\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) {\r\n    sb[i] = types[i].toString();\r\n  }\r\n  return sb.join(\", \");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getGenericParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) {\r\n        return false;\r\n      }\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) {\r\n      return false; // TODO\r\n    }\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    var sb = [];\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(thisType.toSignatureString());\r\n    }\r\n    var parameterTypes = this.parameterTypes;\r\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n      sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(this.returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) {\r\n          sb.push((<string[]>names)[i]);\r\n        } else {\r\n          sb.push(getGenericParameterName(i));\r\n        }\r\n        if (i >= optionalStart && i != restIndex) {\r\n          sb.push(\"?: \");\r\n        } else {\r\n          sb.push(\": \");\r\n        }\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached generic parameter names used where names are unknown.\r\nvar cachedGenericParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached generic parameter name for the specified index. */\r\nexport function getGenericParameterName(index: i32): string {\r\n  if (!cachedGenericParameterNames) cachedGenericParameterNames = [];\r\n  for (let i = cachedGenericParameterNames.length; i <= index; ++i) {\r\n    cachedGenericParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedGenericParameterNames[index - 1];\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileGetConstant as compileBuiltinGetConstant,\r\n  compileAllocate as compileBuiltinAllocate\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = new Array();\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = new Array();\r\n  /** Argument count helper global. */\r\n  argumentCountRef: GlobalRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      max(options.memoryBase, options.usizeType.byteSize) // leave space for `null`\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing to reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) {\r\n        this.compileSource(sources[i]);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let typeRef = this.ensureFunctionType(startFunctionInstance.signature);\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (!source) {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileSource(source);\r\n  }\r\n\r\n  compileSource(source: Source): void {\r\n     if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED) || global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n    global.set(CommonFlags.COMPILED);   // ^ built-ins are compiled on use\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.namespace\r\n            ? global.namespace.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(declaration.initializer, global.type);\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = _BinaryenExpressionGetType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(_BinaryenConstGetValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              _BinaryenConstGetValueI64Low(initExpr),\r\n              _BinaryenConstGetValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = _BinaryenConstGetValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              assert(global.declaration).range\r\n            );\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(0);\r\n            break;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (declaration) {\r\n          if (declaration.isTopLevel) {    // but keep the element as it might be re-exported\r\n            module.addGlobal(internalName, nativeType, false, initExpr);\r\n          }\r\n          if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n            module.addGlobalExport(global.internalName, declaration.programLevelInternalName);\r\n          }\r\n        } else {\r\n          assert(false); // must have a declaration if constant\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(<Expression>valueDeclaration.value, Type.i32);\r\n            if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (_BinaryenExpressionGetId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (_BinaryenExpressionGetType(initExpr) == NativeType.I32) {\r\n              val.constantValue = _BinaryenConstGetValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                valueDeclaration.range\r\n              );\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.declaration.range.source.isEntry && element.declaration.isTopLevelExport) {\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            module.addGlobalExport(member.internalName, member.internalName);\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null;\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(signature: Signature): FunctionTypeRef {\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    var thisType = signature.thisType;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    for (let i = 0; i < numParameters; ++i, ++index) {\r\n      paramTypes[index] = signature.parameterTypes[i].toNativeType();\r\n    }\r\n    var resultType = signature.returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(signature.toSignatureString(), resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || instance.internalName == \"abort\");\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching but still compile as-is\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var typeRef = this.ensureFunctionType(instance.signature);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType: Type = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression((<ExpressionStatement>body).expression, returnType);\r\n        flow.set(FlowFlags.RETURNS);\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.memberOf);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  makeConditionalAllocate(this, <Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let namespace = instance.prototype.namespace;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        namespace\r\n          ? namespace.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (declaration.range.source.isEntry && declaration.isTopLevelExport) {\r\n      module.addFunctionExport(instance.internalName, declaration.name.text);\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            member.range\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        expr = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        expr = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        expr = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        expr = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        expr = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        expr = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        expr = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        expr = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        expr = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        expr = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        expr = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        expr = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        expr = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!expr) expr = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        expr = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        expr = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        assert(false);\r\n        expr = module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, statement.range, module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      stmts[i] = this.compileStatement(statements[i]);\r\n    }\r\n    return stmts; // array of 0-es in noEmit-mode\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // NOTE that we could optimize this to a NOP if empty or unwrap a single\r\n    // statement, but that's not what the source told us to do and left to the\r\n    // optimizer.\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var flow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmt = this.module.createBlock(null, this.compileStatements(statements), NativeType.None);\r\n    var stmtReturns = flow.is(FlowFlags.RETURNS);\r\n    var stmtThrows = flow.is(FlowFlags.THROWS);\r\n    var stmtAllocates = flow.is(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    flow = flow.leaveBranchOrScope();\r\n    this.currentFunction.flow = flow;\r\n    if (stmtReturns) flow.set(FlowFlags.RETURNS);\r\n    if (stmtThrows) flow.set(FlowFlags.THROWS);\r\n    if (stmtAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n\r\n    // A do statement does not initiate a new branch because it is executed at\r\n    // least once, but has its own break and continue labels.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow;\r\n    var previousBreakLabel = flow.breakLabel;\r\n    var previousContinueLabel = flow.continueLabel;\r\n\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    // Reset to the previous break and continue labels, if any.\r\n    flow.breakLabel = previousBreakLabel;\r\n    flow.continueLabel = previousContinueLabel;\r\n\r\n    var module = this.module;\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // No need to eliminate the condition in generic contexts as the statement is executed anyway.\r\n\r\n    this.currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel, condExpr)\r\n        ], NativeType.None))\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var context = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + context;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + context;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initializer = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : module.createNop();\r\n    var condition = statement.condition\r\n      ? this.compileExpression(<Expression>statement.condition, Type.i32)\r\n      : module.createI32(1);\r\n    var incrementor = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void)\r\n      : module.createNop();\r\n    var body = this.compileStatement(statement.statement);\r\n\r\n    var alwaysReturns = !statement.condition && flow.is(FlowFlags.RETURNS);\r\n    var alwaysThrows = !statement.condition && flow.is(FlowFlags.THROWS);\r\n    var alwaysAllocates = !statement.condition && flow.is(FlowFlags.ALLOCATES);\r\n    // TODO: check other always-true conditions as well, not just omitted\r\n\r\n    if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n    if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n    if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      initializer,\r\n      module.createLoop(continueLabel, module.createBlock(null, [\r\n        module.createIf(condition, module.createBlock(null, [\r\n          body,\r\n          incrementor,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      ], NativeType.None))\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint\r\n    if (alwaysReturns || alwaysThrows) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      let ret: ExpressionRef;\r\n      if (_BinaryenConstGetValueI32(condExpr)) {\r\n        ret = this.compileStatement(ifTrue);\r\n      } else if (ifFalse) {\r\n        ret = this.compileStatement(ifFalse);\r\n      } else {\r\n        ret = module.createNop();\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    var ifTrueReturns = flow.is(FlowFlags.RETURNS);\r\n    var ifTrueThrows = flow.is(FlowFlags.THROWS);\r\n    var ifTrueAllocates = flow.is(FlowFlags.ALLOCATES);\r\n    flow = flow.leaveBranchOrScope();\r\n    currentFunction.flow = flow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    var ifFalseReturns = false;\r\n    var ifFalseThrows = false;\r\n    var ifFalseAllocates = false;\r\n    if (ifFalse) {\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseReturns = flow.is(FlowFlags.RETURNS);\r\n      ifFalseThrows = flow.is(FlowFlags.THROWS);\r\n      ifFalseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n    }\r\n\r\n    if (ifTrueReturns && ifFalseReturns) flow.set(FlowFlags.RETURNS);\r\n    if (ifTrueThrows && ifFalseThrows) flow.set(FlowFlags.THROWS);\r\n    if (ifTrueAllocates && ifFalseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var expression: ExpressionRef = 0;\r\n    if (statement.value) {\r\n      expression = this.compileExpression(\r\n        statement.value,\r\n        currentFunction.signature.returnType\r\n      );\r\n    }\r\n\r\n    // Remember that this flow returns\r\n    currentFunction.flow.set(FlowFlags.RETURNS);\r\n\r\n    return this.module.createReturn(expression);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.i32)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n      let body = new Array<ExpressionRef>(1 + numStatements);\r\n      body[0] = currentBlock;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let fallsThrough = i != numCases - 1;\r\n      let nextLabel = !fallsThrough ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        body[j + 1] = this.compileStatement(statements[j]);\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.RETURNS))) {\r\n        alwaysReturns = false; // ignore fall-throughs\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.THROWS))) {\r\n        alwaysThrows = false;\r\n      }\r\n      if (!(fallsThrough || flow.is(FlowFlags.ALLOCATES))) {\r\n        alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope();\r\n\r\n      currentBlock = module.createBlock(nextLabel, body, NativeType.None);\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default and always returns, propagate that\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let init: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          currentFunction.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          init = this.compileExpression(declaration.initializer, type); // reports\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        init = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (init) {\r\n          init = this.precomputeExpressionRef(init);\r\n          if (_BinaryenExpressionGetId(init) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (_BinaryenExpressionGetType(init)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(_BinaryenConstGetValueI32(init), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  _BinaryenConstGetValueI64Low(init),\r\n                  _BinaryenConstGetValueI64High(init)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>_BinaryenConstGetValueF32(init));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(_BinaryenConstGetValueF64(init));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  declaration.range\r\n                );\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        if (declaration.isAny(CommonFlags.LET | CommonFlags.CONST)) { // here: not top-level\r\n          currentFunction.flow.addScopedLocal(type, name, declaration); // reports\r\n        } else {\r\n          currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (init) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, init));\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, false);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE),\r\n      this.currentType,\r\n      module\r\n    );\r\n\r\n    // Eliminate unnecesssary loops in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!_BinaryenConstGetValueI32(condExpr)) {\r\n        return module.createNop();\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr, module.createBlock(null, [\r\n          body,\r\n          module.createBreak(continueLabel)\r\n        ], NativeType.None))\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      case TypeKind.F64: {\r\n        return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(\r\n          <ParenthesizedExpression>expression,\r\n          contextualType,\r\n          wrapSmallIntegers\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, wrapSmallIntegers);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, expression);\r\n      this.currentType = contextualType;\r\n    }\r\n\r\n    if (this.options.sourceMap) {\r\n      addDebugLocation(expr, expression.range, this.module, this.currentFunction);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind = ConversionKind.IMPLICIT\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(this.compileExpression(expression, contextualType, conversionKind));\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var typeRef = module.getFunctionTypeBySignature(nativeType, null);\r\n    var typeRefAdded = false;\r\n    if (!typeRef) {\r\n      typeRef = module.addFunctionType(type.toSignatureString(), nativeType, null);\r\n      typeRefAdded = true;\r\n    }\r\n    var funcRef = module.addFunction(\"__precompute\", typeRef, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = _BinaryenFunctionGetBody(funcRef);\r\n    module.removeFunction(\"__precompute\");\r\n    if (typeRefAdded) {\r\n      // TODO: also remove the function type somehow if no longer used or make the C-API accept\r\n      // a `null` typeRef, using an implicit type.\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n              if (toType.is(TypeFlags.SMALL)) {\r\n                expr = makeSmallIntegerWrap(expr, toType, module);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n          if (toType.is(TypeFlags.SMALL)) {\r\n            expr = makeSmallIntegerWrap(expr, toType, module);\r\n          }\r\n        }\r\n\r\n      // i32 to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32, expr);\r\n\r\n      // i32 or smaller to even smaller or same size int with change of sign\r\n      } else if (\r\n        toType.is(TypeFlags.SMALL) &&\r\n        (\r\n          fromType.size > toType.size ||\r\n          (\r\n            fromType.size == toType.size &&\r\n            fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED)\r\n          )\r\n        )\r\n      ) {\r\n        expr = makeSmallIntegerWrap(expr, toType, module);\r\n      }\r\n\r\n      // otherwise (smaller) i32/u32 to (same size) i32/u32\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var condExpr: ExpressionRef;\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n    var possiblyOverflows = false;\r\n    var tempLocal: Local | null = null;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnLessThan;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnGreaterThan;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnLessThanEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnGreaterThanEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload if operator is \"==\"\r\n            if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                assert(this.currentType == Type.bool);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {// check operator overload if operator is \"!=\"\r\n            if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnNotEquals;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnConcat;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnSubtract;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnMultiply;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must be wrapped\r\n        );\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType == Type.f32) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType\r\n          );\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            left\r\n          );\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64\r\n          );\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can division remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnDivide;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // TODO: when can remainder remain unwrapped? does it overflow?\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnFractional;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // must wrap small integers\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          default: {\r\n            // assumes signed shr on signed small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: // assumes unsigned shr on unsigned small integers does not overflow\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          true // modifies low bits of small integers if unsigned\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          true // ^\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: possiblyOverflows = true;\r\n          default: {\r\n            // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseAnd;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseOr;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType,\r\n          false // retains low bits of small integers\r\n        );\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            this.currentType,\r\n            ConversionKind.IMPLICIT,\r\n            false // ^\r\n          );\r\n        } else {\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpressionRetainType(\r\n            right,\r\n            leftType,\r\n            false // ^\r\n          );\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr, leftType, commonType, ConversionKind.IMPLICIT, left);\r\n            rightExpr = this.convertExpression(rightExpr, rightType, commonType, ConversionKind.IMPLICIT, right);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // if left or right already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classInstance = assert(this.currentType.classReference);\r\n              let operatorName = classInstance.prototype.fnBitwiseXor;\r\n              if (operatorName != null) {\r\n                expr = this.compileOperatorOverload(classInstance, operatorName, leftExpr, rightExpr);\r\n                break;\r\n              }\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.createUnreachable();\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER);\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = module.createIf(\r\n            condExpr,  // left\r\n            rightExpr, //   ? right\r\n            expr       //   : cloned left\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(\r\n          left,\r\n          contextualType\r\n        );\r\n        rightExpr = this.compileExpression(\r\n          right,\r\n          this.currentType,\r\n          ConversionKind.IMPLICIT,\r\n          false\r\n        );\r\n\r\n        // clone left if free of side effects\r\n        expr = this.module.cloneExpression(leftExpr, true, 0);\r\n\r\n        // if not possible, tee left to a temp. local\r\n        if (!expr) {\r\n          tempLocal = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n          leftExpr = module.createTeeLocal(tempLocal.index, leftExpr);\r\n        }\r\n\r\n        possiblyOverflows = this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if right did\r\n        condExpr = makeIsTrueish(leftExpr, this.currentType, module);\r\n\r\n        // simplify when cloning left without side effects was successful\r\n        if (expr) {\r\n          expr = this.module.createIf(\r\n            condExpr, // left\r\n            expr,      //   ? cloned left\r\n            rightExpr      //   : right\r\n          );\r\n        }\r\n\r\n        // otherwise make use of the temp. local\r\n        else {\r\n          expr = module.createIf(\r\n            condExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n        break;\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(this.currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER)); // must be a small int\r\n      expr = makeSmallIntegerWrap(expr, this.currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileOperatorOverload(\r\n    classInstance: Class,\r\n    operatorName: string,\r\n    leftExpr: ExpressionRef,\r\n    rightExpr: ExpressionRef\r\n  ): ExpressionRef {\r\n    var classPrototype = classInstance.prototype;\r\n    var operatorPrototype = assert(assert(classPrototype.members).get(operatorName));\r\n    assert(operatorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var operatorInstance = (<FunctionPrototype>operatorPrototype).resolve();\r\n    if (!operatorInstance) return this.module.createUnreachable();\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ]);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\r\n          if (indexedGetPrototype) {\r\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\r\n            if (!indexedGetInstance) return this.module.createUnreachable();\r\n            elementType = indexedGetInstance.signature.returnType;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.range, (<Class>target).toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        this.currentType = tee ? (<Local>target).type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (tee) {\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(type);\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.size >> 3,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.size >> 3,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGetPrototype = (<Class>target).getIndexedGet();\r\n          if (indexedGetPrototype) {\r\n            let indexedGetInstance = indexedGetPrototype.resolve(); // reports\r\n            if (!indexedGetInstance) return module.createUnreachable();\r\n            let indexedSetPrototype = (<Class>target).getIndexedSet();\r\n            if (!indexedSetPrototype) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, target.internalName\r\n              );\r\n              this.currentType = tee ? indexedGetInstance.signature.returnType : Type.void;\r\n              return module.createUnreachable();\r\n            }\r\n            let indexedSetInstance = indexedSetPrototype.resolve(); // reports\r\n            if (!indexedSetInstance) return module.createUnreachable();\r\n            let targetType = (<Class>target).type;\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            let elementExpr = this.compileExpression(\r\n              elementExpression,\r\n              Type.i32\r\n            );\r\n            if (tee) {\r\n              let tempLocalTarget = this.currentFunction.getTempLocal(targetType);\r\n              let tempLocalElement = this.currentFunction.getAndFreeTempLocal(this.currentType);\r\n              let returnType = indexedGetInstance.signature.returnType;\r\n              this.currentFunction.freeTempLocal(tempLocalTarget);\r\n              return module.createBlock(null, [\r\n                this.makeCallDirect(indexedSetInstance, [\r\n                  module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                  module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                  valueWithCorrectType\r\n                ]),\r\n                this.makeCallDirect(indexedGetInstance, [\r\n                  module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                  module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n                ])\r\n              ], returnType.toNativeType());\r\n            } else {\r\n              return this.makeCallDirect(indexedSetInstance, [\r\n                thisExpr,\r\n                elementExpr,\r\n                valueWithCorrectType\r\n              ]);\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n\r\n        // builtins are compiled on the fly\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          let expr = compileBuiltinCall( // reports\r\n            this,\r\n            prototype,\r\n            prototype.resolveBuiltinTypeArguments(\r\n              expression.typeArguments,\r\n              currentFunction.contextualTypeArguments\r\n            ),\r\n            expression.arguments,\r\n            contextualType,\r\n            expression\r\n          );\r\n          if (!expr) {\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          return expr;\r\n\r\n        // otherwise compile to a call\r\n        } else {\r\n          let instance = prototype.resolveUsingTypeArguments( // reports\r\n            expression.typeArguments,\r\n            currentFunction.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return module.createUnreachable();\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            return this.compileCallDirect(instance, expression.arguments, expression, thisExpr);\r\n          } else {\r\n            // if static, resolvedThisExpression is the ClassPrototype\r\n            return this.compileCallDirect(instance, expression.arguments, expression);\r\n          }\r\n        }\r\n      }\r\n\r\n      // indirect call: index argument with signature\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameterTypes;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(original.prototype, trampolineName, trampolineSignature, original.memberOf);\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    trampoline.contextualTypeArguments = original.contextualTypeArguments;\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"argumentCount\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"argumentCount\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            assert(originalParameterDeclarations[minArguments + i].initializer),\r\n            type\r\n          )\r\n        )\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var typeRef = this.ensureFunctionType(trampolineSignature);\r\n    var funcRef = module.addFunction(trampolineName, typeRef, typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n      if (!isCallImport) { // call the trampoline\r\n        instance = this.ensureTrampoline(instance);\r\n        if (!this.compileFunction(instance)) return module.createUnreachable();\r\n        let nativeReturnType = returnType.toNativeType();\r\n        this.currentType = returnType;\r\n        return module.createBlock(null, [\r\n          this.ensureArgumentCount(numArguments),\r\n          module.createCall(instance.internalName, operands, nativeReturnType)\r\n        ], nativeReturnType);\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return isCallImport\r\n      ? module.createCallImport(instance.internalName, operands, returnType.toNativeType())\r\n      : module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i]\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      this.ensureArgumentCount(numArguments), // might still be calling a trampoline\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType());\r\n  }\r\n\r\n  /** Makes sure that the `argumentCount` helper global is present and returns an expression that sets it. */\r\n  private ensureArgumentCount(argumentCount: i32): ExpressionRef {\r\n    var module = this.module;\r\n    if (!this.argumentCountRef) {\r\n      this.argumentCountRef = module.addGlobal(\r\n        \"argumentCount\",\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return module.createSetGlobal(\"argumentCount\", module.createI32(argumentCount));\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void);    // drop all\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType); // except last\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGetPrototype = (<Class>target).getIndexedGet();\r\n        if (!indexedGetPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let indexedGetInstance = indexedGetPrototype.resolve(); // reports\r\n        if (!indexedGetInstance) return this.module.createUnreachable();\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type);\r\n        return this.compileCallDirect(indexedGetInstance, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      currentFunction.contextualTypeArguments,\r\n      currentFunction.flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            let flow = currentFunction.flow;\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                makeConditionalAllocate(this, <Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let currentFunction = this.currentFunction;\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.memberOf);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>target, expression);\r\n        }\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          this.currentFunction.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileStaticArray(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileStaticArray(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayType = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayType) return module.createUnreachable();\r\n\r\n    var elementSize = expressions.length;\r\n    var nativeType = elementType.toNativeType();\r\n    var values: usize;\r\n    var memorySize: usize;\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        values = changetype<usize>(new Int32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        values = changetype<usize>(new Array<I64>(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        values = changetype<usize>(new Float32Array(elementSize));\r\n        memorySize = elementSize * 4;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        values = changetype<usize>(new Float64Array(elementSize));\r\n        memorySize = elementSize * 8;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // precompute value expressions\r\n    var exprs = new Array<ExpressionRef>(elementSize);\r\n    var expr: BinaryenExpressionRef;\r\n    for (let i = 0; i < elementSize; ++i) {\r\n      exprs[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        expr = this.precomputeExpressionRef(exprs[i]);\r\n        if (_BinaryenExpressionGetId(expr) == ExpressionId.Const) {\r\n          assert(_BinaryenExpressionGetType(expr) == nativeType);\r\n          switch (nativeType) {\r\n            case NativeType.I32: {\r\n              changetype<i32[]>(values)[i] = _BinaryenConstGetValueI32(expr);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              changetype<I64[]>(values)[i] = i64_new(\r\n                _BinaryenConstGetValueI64Low(expr),\r\n                _BinaryenConstGetValueI64High(expr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              changetype<f32[]>(values)[i] = _BinaryenConstGetValueF32(expr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              changetype<f64[]>(values)[i] = _BinaryenConstGetValueF64(expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false); // checked above\r\n            }\r\n          }\r\n        } else {\r\n          // TODO: emit a warning if declared 'const'\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n    var headerSize = usizeTypeSize + 4 + 4; // memory + capacity + length\r\n\r\n    if (isStatic) {\r\n      let buffer = new Uint8Array(headerSize + memorySize);\r\n      let segment = this.addMemorySegment(buffer);\r\n\r\n      // make header\r\n      let offset = 0;\r\n      if (usizeTypeSize == 8) {\r\n        writeI64(i64_add(segment.offset, i64_new(headerSize)), buffer, 0); // memory\r\n      } else {\r\n        assert(i64_high(segment.offset) == 0);\r\n        writeI32(i64_low(segment.offset) + headerSize, buffer, 0); // memory\r\n      }\r\n      offset += usizeTypeSize;\r\n      writeI32(elementSize, buffer, offset); // capacity\r\n      offset += 4;\r\n      writeI32(elementSize, buffer, offset); // length\r\n      offset += 4;\r\n      assert(offset == headerSize);\r\n\r\n      // make memory\r\n      switch (nativeType) {\r\n        case NativeType.I32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI32(changetype<i32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeI64(changetype<I64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF32(changetype<f32[]>(values)[i], buffer, offset); offset += 4;\r\n          }\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          for (let i = 0; i < elementSize; ++i) {\r\n            writeF64(changetype<f64[]>(values)[i], buffer, offset); offset += 8;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      assert(offset == headerSize + memorySize);\r\n      this.currentType = arrayType.type;\r\n      return usizeTypeSize == 8\r\n        ? module.createI64(\r\n            i64_low(segment.offset),\r\n            i64_high(segment.offset)\r\n          )\r\n        : module.createI32(\r\n            i64_low(segment.offset)\r\n          );\r\n    } else {\r\n      // TODO: static elements *could* go into data segments while dynamic ones are initialized\r\n      // on top? any benefits?\r\n      throw new Error(\"not implemented\");\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      null,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = makeAllocate(this, classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      wrapSmallIntegers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (target.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return compileBuiltinGetConstant(this, <Global>target, propertyAccess);\r\n        }\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        if (!this.compileEnum((<EnumValue>target).enum)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.size >> 3,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.memberOf);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n\r\n    var condExpr = makeIsTrueish(\r\n      this.compileExpression(expression.condition, Type.u32, ConversionKind.NONE),\r\n      this.currentType,\r\n      this.module\r\n    );\r\n\r\n    // Eliminate unnecesssary branches in generic contexts if the condition is constant\r\n    if (\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT) &&\r\n      _BinaryenExpressionGetId(condExpr = this.precomputeExpressionRef(condExpr)) == ExpressionId.Const &&\r\n      _BinaryenExpressionGetType(condExpr) == NativeType.I32\r\n    ) {\r\n      return _BinaryenConstGetValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var currentFunction = this.currentFunction;\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpression(ifThen, contextualType);\r\n      ifElseExpr = this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      false // wrapped below\r\n    );\r\n    if (_BinaryenExpressionGetId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n    var possiblyOverflows = false;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true;\r\n          default: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            assert(false);\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var setValue: ExpressionRef;\r\n    var tempLocal: Local | null = null;\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      setValue = module.createBinary(op,\r\n        getValue,\r\n        nativeOne\r\n      );\r\n\r\n    // otherwise use a temp local for the intermediate value\r\n    } else {\r\n      tempLocal = currentFunction.getTempLocal(currentType);\r\n      setValue = module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      );\r\n    }\r\n\r\n    if (possiblyOverflows) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      setValue = makeSmallIntegerWrap(setValue, currentType, module);\r\n    }\r\n\r\n    setValue = this.compileAssignmentWithValue(expression.operand, setValue, false);\r\n    // ^ sets currentType = void\r\n    if (contextualType == Type.void) {\r\n      assert(!tempLocal);\r\n      return setValue;\r\n    }\r\n\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType);\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    wrapSmallIntegers: bool = true\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentType = this.currentType;\r\n\r\n    var possiblyOverflows = false;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        possiblyOverflows = currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER); // if operand already did\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          if (this.options.sourceMap) {\r\n            // compileExpression normally does this\r\n            addDebugLocation(expr, expression.range, module, this.currentFunction);\r\n          }\r\n          currentType = this.currentType;\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            false // wrapped below\r\n          );\r\n          currentType = this.currentType;\r\n          switch (currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n            default: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          false // wrapped below\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          true // must wrap small integers\r\n        );\r\n        expr = makeIsFalseish(expr, this.currentType, module);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          false // retains low bits of small integers\r\n        );\r\n        currentType = this.currentType;\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: possiblyOverflows = true; // or if operand already did\r\n          default: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    if (possiblyOverflows && wrapSmallIntegers) {\r\n      assert(currentType.is(TypeFlags.SMALL | TypeFlags.INTEGER));\r\n      expr = makeSmallIntegerWrap(expr, currentType, module);\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Adds the debug location of the specified expression at the specified range to the source map. */\r\nfunction addDebugLocation(expr: ExpressionRef, range: Range, module: Module, currentFunction: Function): void {\r\n  var source = range.source;\r\n  if (source.debugInfoIndex < 0) {\r\n    source.debugInfoIndex = module.addDebugInfoFile(source.normalizedPath);\r\n  }\r\n  range.debugInfoRef = expr;\r\n  if (!currentFunction.debugLocations) currentFunction.debugLocations = [];\r\n  currentFunction.debugLocations.push(range);\r\n}\r\n\r\n/** Wraps a 32-bit integer expression so it evaluates to a valid value of the specified type. */\r\nexport function makeSmallIntegerWrap(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    case TypeKind.I8: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(24)\r\n        ),\r\n        module.createI32(24)\r\n      );\r\n    }\r\n    case TypeKind.I16: {\r\n      return module.createBinary(BinaryOp.ShrI32,\r\n        module.createBinary(BinaryOp.ShlI32,\r\n          expr,\r\n          module.createI32(16)\r\n        ),\r\n        module.createI32(16)\r\n      );\r\n    }\r\n    case TypeKind.U8: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xff)\r\n      );\r\n    }\r\n    case TypeKind.U16: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0xffff)\r\n      );\r\n    }\r\n    case TypeKind.BOOL: {\r\n      return module.createBinary(BinaryOp.AndI32,\r\n        expr,\r\n        module.createI32(0x1)\r\n      );\r\n    }\r\n    default: {\r\n      assert(false);\r\n      return expr;\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is not 'true' in a broader sense. */\r\nexport function makeIsFalseish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return module.createUnary(UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createUnary(UnaryOp.EqzI64, expr);\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(1);\r\n    }\r\n  }\r\n}\r\n\r\n/** Creates a comparison whether an expression is 'true' in a broader sense. */\r\nexport function makeIsTrueish(expr: ExpressionRef, type: Type, module: Module): ExpressionRef {\r\n  switch (type.kind) {\r\n    default: { // any native i32\r\n      return expr;\r\n    }\r\n    case TypeKind.I64:\r\n    case TypeKind.U64: {\r\n      return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n    }\r\n    case TypeKind.USIZE: // TODO: strings?\r\n    case TypeKind.ISIZE: {\r\n      return type.size == 64\r\n        ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n        : expr;\r\n    }\r\n    case TypeKind.F32: {\r\n      return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n    }\r\n    case TypeKind.F64: {\r\n      return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n    }\r\n    case TypeKind.VOID: {\r\n      assert(false);\r\n      return module.createI32(0);\r\n    }\r\n  }\r\n}\r\n\r\n/** Makes an allocation expression for an instance of the specified class. */\r\nexport function makeAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  var module = compiler.module;\r\n  var currentFunction = compiler.currentFunction;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n\r\n  var tempLocal = currentFunction.getTempLocal(classInstance.type);\r\n\r\n  // allocate the necessary memory\r\n  var initializers = new Array<ExpressionRef>();\r\n  initializers.push(\r\n    module.createSetLocal(tempLocal.index,\r\n      compileBuiltinAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n\r\n  // apply field initializers\r\n  if (classInstance.members) {\r\n    for (let member of classInstance.members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        let field = <Field>member;\r\n        let fieldType = field.type;\r\n        let nativeFieldType = fieldType.toNativeType();\r\n        let fieldDeclaration = field.prototype.declaration;\r\n        assert(!field.isAny(CommonFlags.CONST));\r\n        if (fieldDeclaration.initializer) { // use initializer\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            compiler.compileExpression(fieldDeclaration.initializer, fieldType), // reports\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        } else { // initialize with zero\r\n          // TODO: might be unnecessary if the ctor initializes the field\r\n          let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n          initializers.push(module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(tempLocal.index, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter\r\n              ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n              : fieldType.toNativeZero(module),\r\n              nativeFieldType,\r\n            field.memoryOffset\r\n          ));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // return `this`\r\n  initializers.push(\r\n    module.createGetLocal(tempLocal.index, nativeSizeType)\r\n  );\r\n\r\n  currentFunction.freeTempLocal(tempLocal);\r\n  compiler.currentType = classInstance.type;\r\n  return module.createBlock(null, initializers, nativeSizeType);\r\n}\r\n\r\n/** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\nexport function makeConditionalAllocate(compiler: Compiler, classInstance: Class, reportNode: Node): ExpressionRef {\r\n  // requires that `this` is the first local\r\n  var module = compiler.module;\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  compiler.currentType = classInstance.type;\r\n  return module.createIf(\r\n    nativeSizeType == NativeType.I64\r\n      ? module.createBinary(\r\n          BinaryOp.NeI64,\r\n          module.createGetLocal(0, NativeType.I64),\r\n          module.createI64(0)\r\n        )\r\n      : module.createGetLocal(0, NativeType.I32),\r\n    module.createGetLocal(0, nativeSizeType),\r\n    module.createTeeLocal(0,\r\n      makeAllocate(compiler, classInstance, reportNode)\r\n    )\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Structs_cannot_extend_classes_and_vice_versa = 207,\n  Structs_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Structs cannot extend classes and vice-versa.\";\n    case 208: return \"Structs cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Log of source file names to be requested. */\r\n  backlog: string[] = new Array();\r\n  /** Log of source file names already processed. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var program = this.program;\r\n\r\n    // check if already parsed\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].internalPath == internalPath) return;\r\n    }\r\n    this.seenlog.add(internalPath);\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      let name = decorator.name;\r\n      if (name.kind == NodeKind.IDENTIFIER) {\r\n        let text = (<IdentifierExpression>name).text;\r\n        if (text == \"global\") {\r\n          flags |= CommonFlags.GLOBAL;\r\n          continue;\r\n        }\r\n        if (text == \"unmananged\") {\r\n          flags |= CommonFlags.UNMANAGED;\r\n          continue;\r\n        }\r\n        if (text == \"sealed\") {\r\n          flags |= CommonFlags.SEALED;\r\n          continue;\r\n        }\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        tn.next();\r\n        flags |= CommonFlags.ABSTRACT;\r\n        if (!tn.skip(Token.CLASS)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(tn.pos), \"class\"\r\n          );\r\n          break;\r\n        }\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        tn.next();\r\n        statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        tn.next();\r\n        statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    // 'void'\r\n    if (token == Token.VOID) {\r\n      return Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skip(Token.IDENTIFIER)) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n        if (!member) return null;\r\n        members.push(<EnumValueDeclaration>member);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"}\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    if (!tn.skip(Token.GREATERTHAN)) {\r\n      do {\r\n        let typeParameter = this.parseTypeParameter(tn);\r\n        if (!typeParameter) return null;\r\n        typeParameters.push(<TypeParameterNode>typeParameter);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \">\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n\r\n    if (tn.peek() != Token.CLOSEPAREN) {\r\n      do {\r\n        let param = this.parseParameter(tn, isConstructor);\r\n        if (!param) return null;\r\n        if (seenRest && !reportedRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n            seenRest.name.range\r\n          );\r\n          reportedRest = true;\r\n        }\r\n        switch (param.parameterKind) {\r\n          default: {\r\n            if (seenOptional) {\r\n              this.error(\r\n                DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n                param.name.range\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ParameterKind.OPTIONAL: {\r\n            seenOptional = true;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            seenRest = param;\r\n            break;\r\n          }\r\n        }\r\n        parameters.push(param);\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \")\"\r\n      );\r\n      return null;\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"public\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"protected\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PROTECTED;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"private\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.PRIVATE;\r\n    }\r\n    if (tn.skip(Token.READONLY)) {\r\n      if (!startRange) startRange = tn.range();\r\n      if (!isConstructor) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          startRange, \"readonly\"\r\n        );\r\n      }\r\n      accessFlags |= CommonFlags.READONLY;\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skip(Token.IDENTIFIER)) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skip(Token.IDENTIFIER)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        null,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath != null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      if (!tn.skip(Token.CLOSEBRACE)) {\r\n        do {\r\n          let member = this.parseImportDeclaration(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.CLOSEBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: {\r\n        statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(true);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.IDENTIFIER)) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skip(Token.IDENTIFIER)) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(true);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(true)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        if (!tn.skip(Token.CLOSEBRACKET)) {\r\n          do {\r\n            if (tn.peek() == Token.COMMA) {\r\n              expr = null; // omitted\r\n            } else {\r\n              expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n              if (!expr) return null;\r\n            }\r\n            elementExpressions.push(expr);\r\n            if (tn.peek() == Token.CLOSEBRACKET) break;\r\n          } while (tn.skip(Token.COMMA));\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    if (!tn.skip(Token.CLOSEPAREN)) {\r\n      do {\r\n        let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!expr) return null;\r\n        args.push(expr);\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.CLOSEBRACE     // current step should handle this\r\n      ) {\r\n        break;\r\n      }\r\n      if (nextToken == Token.SEMICOLON) { // end of the statement for sure\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Function,\r\n  Class,\r\n  Namespace,\r\n  FunctionPrototype,\r\n  ClassPrototype,\r\n  ConstantValueKind,\r\n  Interface\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program) {\r\n    this.program = program;\r\n  }\r\n\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) {\r\n      this.visitElement(element);\r\n    }\r\n  }\r\n\r\n  visitElement(element: Element): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) {\r\n          this.visitEnum(<Enum>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitFunction(<Function>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          if (instance.is(CommonFlags.COMPILED)) {\r\n            this.visitClass(<Class>instance);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if ((<Namespace>element).is(CommonFlags.COMPILED)) {\r\n          this.visitNamespace(<Namespace>element);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) {\r\n            sb.push(\"const \");\r\n          } else {\r\n            sb.push(\"readonly \");\r\n          }\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) {\r\n          this.visitElement(member);\r\n        }\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private seen: Set<Element> = new Set();\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program) {\r\n    super(program);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) {\r\n      sb.push(\"const \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          this.seen.add(member);\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) {\r\n        this.visitNamespace(element);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"function \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    sb.push(\"): \");\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) {\r\n        sb.push(\"abstract \");\r\n      }\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    members = element.members; // instance\r\n    if (members) {\r\n      // TODO\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// TODO: C bindings? or is this sufficiently covered by WebIDL and using a 3rd-party tool?\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  readString\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = readString(_BinaryenFunctionGetName(func)) || \"$\" + this.functionId.toString(10);\r\n    var body = _BinaryenFunctionGetBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = _BinaryenFunctionGetNumParams(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(_BinaryenFunctionGetParam(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(_BinaryenFunctionGetResult(func)));\r\n    this.push(\" \");\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (_BinaryenExpressionGetId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = _BinaryenExpressionGetId(expr);\r\n    var type = _BinaryenExpressionGetType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = readString(_BinaryenBlockGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = _BinaryenBlockGetNumChildren(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(_BinaryenBlockGetChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          if (nested = _BinaryenIfGetIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(_BinaryenIfGetCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(_BinaryenIfGetIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(_BinaryenIfGetIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = readString(_BinaryenLoopGetName(expr))) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(_BinaryenLoopGetBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = _BinaryenBreakGetCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = readString(_BinaryenBreakGetName(expr))) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenGetLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(_BinaryenSetLocalGetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(_BinaryenSetLocalGetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenLoadGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenLoadGetPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(_BinaryenStoreGetOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(_BinaryenStoreGetPtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenStoreGetValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(_BinaryenConstGetValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  _BinaryenConstGetValueI64Low(expr),\r\n                  _BinaryenConstGetValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(_BinaryenConstGetValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(_BinaryenConstGetValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (_BinaryenUnaryGetOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(_BinaryenUnaryGetValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (_BinaryenBinaryGetOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(_BinaryenBinaryGetLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(_BinaryenBinaryGetRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(_BinaryenSelectGetIfTrue(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetIfFalse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(_BinaryenSelectGetCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(_BinaryenDropGetValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = _BinaryenReturnGetValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (_BinaryenHostGetOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(_BinaryenHostGetOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  ConversionKind,\r\n\r\n  makeSmallIntegerWrap\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  Global,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field\r\n} from \"./program\";\r\n\r\n/** Compiles a get of a built-in global. */\r\nexport function compileGetConstant(\r\n  compiler: Compiler,\r\n  global: Global,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (global.internalName) {\r\n    case \"NaN\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(NaN);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(NaN);\r\n      }\r\n    }\r\n    case \"Infinity\": { // context-sensitive\r\n      if (compiler.currentType == Type.f32) {\r\n        return compiler.module.createF32(Infinity);\r\n      } else {\r\n        compiler.currentType = Type.f64;\r\n        return compiler.module.createF64(Infinity);\r\n      }\r\n    }\r\n    case \"HEAP_BASE\": { // never inlined for linking purposes\r\n      compiler.currentType = compiler.options.usizeType;\r\n      return compiler.module.createGetGlobal(\"HEAP_BASE\", compiler.currentType.toNativeType());\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return compiler.module.createUnreachable();\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (!stringInstance) return module.createUnreachable();\r\n        if (classType.isAssignableTo(stringInstance)) {\r\n          return module.createI32(1);\r\n        }\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": {\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        ); // recoverable\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, false);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = Type.bool;\r\n      let classType = type.classReference;\r\n      return classType != null && classType.prototype.fnIndexedGet != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"isNaN\": { // isNaN<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createBinary(BinaryOp.NeF32,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F32)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createBinary(BinaryOp.NeF64,\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createGetLocal(tempLocal.index, NativeType.F64)\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is never NaN\r\n          ret = module.createI32(0);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"isFinite\": { // isFinite<T?>(value: T) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (operands.length != 1) {\r\n        if (typeArguments && typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.F32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF32,\r\n              module.createUnary(UnaryOp.AbsF32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF32(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF32,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32),\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n          ret = module.createSelect(\r\n            module.createBinary(BinaryOp.NeF64,\r\n              module.createUnary(UnaryOp.AbsF64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              module.createF64(Infinity)\r\n            ),\r\n            module.createI32(0),\r\n            module.createBinary(BinaryOp.EqF64,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64),\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // every other type is always finite\r\n          ret = module.createI32(1);\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = Type.bool;\r\n      return ret;\r\n    }\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any integer up to 32-bits incl. bool\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F32:\r\n        case TypeKind.F64:\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = makeSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType,\r\n            module\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n          // doesn't need sign-extension here because ifFalse below is either positive\r\n          // or MIN_VALUE (-MIN_VALUE == MIN_VALUE) if selected\r\n        case TypeKind.I32: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i32);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32\r\n            );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.u64);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // wraps a larger integer type to a smaller one, i.e. i32.store8\r\n          : ConversionKind.IMPLICIT\r\n      );\r\n      let type: Type;\r\n      if (\r\n        compiler.currentType.is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        typeArguments[0].size > compiler.currentType.size\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type);\r\n      arg2 = compiler.compileExpression(operands[2], Type.i32);\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        default: { // any value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], compiler.options.usizeType);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u32, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType);\r\n      arg1 = compiler.compileExpression(operands[1], Type.u32);\r\n      arg2 = compiler.compileExpression(operands[2], compiler.options.usizeType);\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      } else if (typeArguments[0].kind != TypeKind.USIZE) { // any usize\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.kind != TypeKind.USIZE) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0]);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT);\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT);\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I64 ||\r\n      _BinaryenConstGetValueI64High(expr) != 0 ||\r\n      (value = _BinaryenConstGetValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32);\r\n    if (\r\n      _BinaryenExpressionGetId(expr) != ExpressionId.Const ||\r\n      _BinaryenExpressionGetType(expr) != NativeType.I32 ||\r\n      (value = _BinaryenConstGetValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0))\r\n      return 0;\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, n) {\r\n    HEAP.copyWithin(dest, src, src + n);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, val, off) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    HEAP[ptr] = val;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr) {\r\n    if (typeof off === \"number\")\r\n      ptr += off;\r\n    return HEAP[ptr];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}