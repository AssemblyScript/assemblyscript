{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseI32","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","ContextualFlags","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","contextualFlags","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","compileExpressionRetainType","incrExpr","bodyStatement","usesContinue","breakBlock","repeatBlock","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","contextualFlags_1","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","PREFIX","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(parseI32(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else if (exports.has(\"default\")) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, \"default\"\r\n        )\r\n        return;\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (\r\n          member.kind == ElementKind.FIELD &&\r\n          (current = (<Field>member).type.classReference) !== null &&\r\n          (\r\n            current === other ||\r\n            current.cyclesTo(other, except)\r\n          )\r\n        ) return true;\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_bitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDBitselect: {\r\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              typeNode.name.range, typeName.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          // if (!arrayType) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementExpression.range, (<Class>target).internalName\r\n              );\r\n              return null;\r\n            }\r\n            let arrayType = indexedGet.signature.returnType;\r\n          // }\r\n          if (!(target = arrayType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, arrayType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n        // if (!arrayType) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementAccess.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n        // }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          if (target = arrayType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      // `unchecked(expr: *): *` is special\r\n      if (\r\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n        expression.arguments.length > 0\r\n      ) {\r\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\r\n      }\r\n      // otherwise resolve normally\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 8,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 9,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 10,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 11,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 12,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 13,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 14,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 1,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 2,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 3,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 4,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 5,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 6,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 7,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 8,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in at least one arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable,\r\n  getLocalGetIndex,\r\n  FeatureFlags,\r\n  isLocalTee,\r\n  getLocalSetIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Requests or indicates compilation conditions of statements and expressions. */\r\nexport const enum ContextualFlags {\r\n  NONE = 0,\r\n\r\n  /** Implicit conversion required. */\r\n  IMPLICIT = 1 << 0,\r\n  /** Explicit conversion required. */\r\n  EXPLICIT = 1 << 1,\r\n  /** Small integer wrap required. */\r\n  WRAP = 1 << 2,\r\n\r\n  /** Value is known to be immediately dropped. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Value is known to be immediately assigned to a retaining target.  */\r\n  SKIP_AUTORELEASE = 1 << 4,\r\n  /** Is the last statement in a function body. */\r\n  LAST_IN_BODY = 1 << 5,\r\n  /** Data can be compiled statically. */\r\n  STATIC_CAPABLE = 1 << 6\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.i32, // reports\r\n          ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          ContextualFlags.IMPLICIT | ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE | ContextualFlags.STATIC_CAPABLE\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            ContextualFlags.IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS); // now is terminating\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\r\n      statement = (<ExportDefaultStatement>statement).declaration;\r\n    }\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement, contextualFlags);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i],\r\n        isBody && i == numStatements - 1\r\n          ? ContextualFlags.LAST_IN_BODY\r\n          : ContextualFlags.NONE\r\n      );\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.breakLabel === breakLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (!terminated) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.loop(continueLabel,\r\n        terminated\r\n          ? flatten(module, stmts, NativeType.None) // skip trailing continue if unnecessary\r\n          : module.block(null, [\r\n              flatten(module, stmts, NativeType.None),\r\n              module.br(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.unreachable());\r\n    return module.block(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement,\r\n    contextualFlags: ContextualFlags,\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      contextualFlags | ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpressionRetainType(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // check if the condition is always true\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void,\r\n          ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\r\n        )\r\n      :  0;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(bodyStatement)\r\n      );\r\n    }\r\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      stmts.unshift(\r\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(\r\n        module.block(continueLabel, stmts, NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      for (let i = 0, k = stmts.length; i < k; ++i) {\r\n        repeatBlock.push(stmts[i]);\r\n      }\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.br(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.loop(repeatLabel, module.block(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.block(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        outerFlow.inheritNonnullIfFalse(condExpr);\r\n      }\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let contextualFlags = ContextualFlags.IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) contextualFlags |= ContextualFlags.WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, contextualFlags | ContextualFlags.SKIP_AUTORELEASE);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if ((contextualFlags & ContextualFlags.LAST_IN_BODY) != 0 && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        ContextualFlags.IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              ContextualFlags.IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpressionRetainType(declaration.initializer, Type.void,\r\n          ContextualFlags.SKIP_AUTORELEASE\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, declaration.name.text\r\n            );\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExpr)) return module.nop();\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (!terminated) {\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    innerFlow.freeScopedLocals();\r\n\r\n    // Switch back to the parent flow\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.block(breakLabel, [\r\n      module.loop(continueLabel,\r\n        module.if(condExpr,\r\n          flatten(module, stmts, NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(contextualFlags & (ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (contextualFlags & ContextualFlags.WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (contextualFlags & ContextualFlags.EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (contextualFlags & ContextualFlags.IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an expression while retaining the type, that is not void, it ultimately compiles to. */\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    return this.compileExpression(expression,\r\n      contextualType == Type.void\r\n        ? Type.i32 // default to i32\r\n        : contextualType,\r\n      (contextualFlags & ~(ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT))\r\n    );\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, contextualFlags)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType,\r\n          contextualFlags | ContextualFlags.EXPLICIT\r\n        );\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\r\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\r\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | (contextualFlags & ~ContextualFlags.WILL_DROP));\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | contextualFlags);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, ContextualFlags.IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.LOCAL: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.unreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            // FIXME: explicit type (currently fails due to missing null checking)\r\n            this.options.usizeType\r\n          ),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            this.options.usizeType\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(thisExpression),\r\n          this.options.usizeType\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.unreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            this.options.usizeType\r\n          );\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, ContextualFlags.IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.block(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.local_tee(tempLocalTarget.index, thisExpr),\r\n                module.local_tee(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Contextual flags indicating contextual conditions. */\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        ContextualFlags.SKIP_AUTORELEASE\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.unreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.unreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, ContextualFlags.IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.unreachable();\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          contextualFlags\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, ContextualFlags.IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (contextualFlags & ContextualFlags.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (contextualFlags & ContextualFlags.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (contextualFlags & ContextualFlags.SKIP_AUTORELEASE) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (contextualFlags & ContextualFlags.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        initType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        body.push(\r\n          module.local_set(argumentLocal.index,\r\n            this.makeRetain(initExpr)\r\n          )\r\n        );\r\n      } else {\r\n        body.push(\r\n          module.local_set(argumentLocal.index, initExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      this.warning(\r\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\r\n        reportNode.range, instance.internalName\r\n      );\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ContextualFlags.IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], ContextualFlags.IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, contextualFlags);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.unreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\r\n          ContextualFlags.IMPLICIT\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg, contextualFlags & (ContextualFlags.WILL_DROP | ContextualFlags.SKIP_AUTORELEASE));\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, contextualFlags);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0,false, expression.expression),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              false, // TODO: isConst?\r\n              contextualFlags,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    contextualFlags: ContextualFlags,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              ContextualFlags.IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (contextualFlags & ContextualFlags.STATIC_CAPABLE) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ContextualFlags.IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, contextualFlags, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0,\r\n          this.makeRetain(\r\n            this.makeAllocation(classInstance)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    contextualFlags: ContextualFlags,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      contextualFlags\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.unreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType)\r\n        : this.compileExpressionRetainType(ifElse, contextualType);\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ContextualFlags.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      if (!target) return module.unreachable();\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    } else if (!target) {\r\n      return module.unreachable();\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, ContextualFlags.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            initExpr,\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.local_get(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) return stmts[0];\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ContextualFlags,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      return module.i32(classReference.isArrayLike ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ContextualFlags.IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void):\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, ContextualFlags.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ContextualFlags.EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, ContextualFlags.IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.unary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.simd_bitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.i32(classReference.id);\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, ContextualFlags.IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, ContextualFlags.IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      let block: RelooperBlockRef;\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        block = relooper.addBlock(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        let callExpr = module.call(visitFunc.internalName, [\r\n          module.local_get(0, nativeSizeType), // ref\r\n          module.local_get(1, NativeType.I32)  // cookie\r\n        ], NativeType.None);\r\n        block = relooper.addBlock(\r\n          instance.base\r\n            ? callExpr // branch will be added later\r\n            : module.block(null, [\r\n                callExpr,\r\n                module.return()\r\n              ])\r\n        );\r\n      }\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n\r\n    // otherwise generate one\r\n    } else {\r\n      // traverse references assigned to own fields\r\n      let code = new Array<ExpressionRef>();\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!instance.base) code.push(module.return());\r\n      let block = relooper.addBlock(\r\n        flatten(module, code, NativeType.None)\r\n      );\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n    }\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ContextualFlags.IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ContextualFlags.IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\" = typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: TypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<TypeNode>parameter];\r\n          else parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\r\n          else implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: CommonTypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Value is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Value is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}