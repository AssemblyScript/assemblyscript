{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDOp","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","Map","ref","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","index","type","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","target","returnType","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","dest","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","addGlobal","mutable","initializer","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","internalName","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","exportName","k","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","sourceMap","readString","toText","Error","toAsmjs","str","has","set","dispose","_b","__values","values","_c","next","done","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","i32","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","I32","_BinaryenConstGetValueI32","I64","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","F32","_BinaryenConstGetValueF32","F64","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","setDebugLocation","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","createType","typeArguments","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createSignature","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","basicClasses","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","hasFeature","v128","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","queuedExports_1_1","__read","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","registerBasicClass","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","typeKind","className","classElement","global","Global","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","LOCAL","scopedGlobal","instances","classTypeArguments","applyClassTypeArguments","contextualTypeArguments","classTypeParameters","numClassTypeParameters","Function","localsByName","localsByIndex","additionalLocals","debugLocations","functionTableIndex","trampoline","outerScope","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","nextBreakId","breakStack","breakLabel","localIndex","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","INSTANCE","parameterType","parameterName","getParameterName","flow","Flow","addLocal","finalize","debugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","extends","basePtototype","current","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","lookupOverload","unchecked","uncheckedOverload","overload","lookupField","shouldReadonly","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","parentFunction","continueLabel","wrappedLocals","wrappedLocalsExt","inlineFunction","inlineReturnLabel","createInline","unset","fork","branch","slice","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","addScopedLocal","reportNode","scopedLocal","existingLocal","SCOPED","addScopedAlias","scopedAlias","freeScopedLocals","lookupLocal","isLocalWrapped","bitsetIs","ext","bitsetSet","pushBreakLabel","id","stack","popBreakLabel","inherit","other","inheritConditional","inheritMutual","i64_and","leftExt","rightExt","thisExt","minLength","min","canOverflow","canConversionOverflow","SetLocal","global_2","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","shift","ShrI32","ShrU32","DivU32","RemI32","RemU32","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","If","Select","Call","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","program_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","commonCompatible","signednessIsImportant","kindOnly","V128","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","compileSource","funcRef","ensureFunctionType","i64_align","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFlow","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","makeMap","resolveFunctionInclTypeArguments","compileFunction","resultType","compileFunctionBody","stmts","compileStatements","unshift","classInstance","thisLocalIndex","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","actualFunction","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","PREFIX","NONNULL","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","flow_1","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","thisLocal","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","includes","compileCallInlinePrechecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","baseInstance","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","_this_cannot_be_referenced_in_current_location","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","i64_is_u32","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseClass","nativeDummy","locals","numLocals","propertyAccess","resolvePropertyAccess","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","isInline","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","Basic_type_0_cannot_be_nullable","Expected_0_type_arguments_but_got_1","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","minParameterCount","maxParameterCount","argumentCount","ensureResolvedLazyGlobal","targetExpression","propertyName","elementAccess","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_bool","i64_zero","explicitLocal","classInstanceKey","classInstances","instance_1","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","copy","src","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","i64_or","or","i64_xor","xor","i64_shl","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","evaluateConstantOffset","RMWOp","Add","Sub","And","Or","Xor","Xchg","hasError","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","split","subName","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","original_2","original_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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AAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 19,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 20,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 21,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 22,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 23,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 24,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 25,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 26,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 27,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 28,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 29\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDOp {\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createV128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    // FIXME: does this work or do we need to malloc?\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetGlobal(this.ref, cStr, type);\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenSetGlobal(this.ref, cStr, value);\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  createMemoryCopy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  createMemoryFill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nvar cachedStrings = new Map<string | null,usize>();\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  cachedStrings.set(str, ptr);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    elem.defaultType = defaultType; if (defaultType) defaultType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; if (toType) toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType; keyType.parent = elem;\r\n    elem.valueType = valueType; valueType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeParameterNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low,\r\n  getGetGlobalName\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  bitsetIs,\r\n  bitsetSet\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a module-level export. */\r\nclass ModuleExport {\r\n  element: Element;\r\n  identifier: IdentifierExpression;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  basicClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference, if present. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.resolver = new Resolver(this);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // add built-in types\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n    if (options.hasFeature(Feature.SIMD)) this.typesLookup.set(\"v128\", Type.v128);\r\n\r\n    // add compiler hints\r\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\r\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_BULK_MEMORY\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIMD\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              queuedExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let element = this.elementsLookup.get(name);\r\n          if (element) this.elementsLookup.set(alias, element);\r\n          else throw new Error(\"element not found: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'ArrayBuffer'\r\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\r\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n    }\r\n\r\n    // register 'Array'\r\n    if (this.elementsLookup.has(\"Array\")) {\r\n      let element = assert(this.elementsLookup.get(\"Array\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>element;\r\n    }\r\n\r\n    // register 'String'\r\n    if (this.elementsLookup.has(\"String\")) {\r\n      let element = assert(this.elementsLookup.get(\"String\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (instance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>element).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = instance;\r\n          this.typesLookup.set(\"string\", instance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerBasicClass(TypeKind.I8, \"I8\");\r\n    this.registerBasicClass(TypeKind.I16, \"I16\");\r\n    this.registerBasicClass(TypeKind.I32, \"I32\");\r\n    this.registerBasicClass(TypeKind.I64, \"I64\");\r\n    this.registerBasicClass(TypeKind.ISIZE, \"Isize\");\r\n    this.registerBasicClass(TypeKind.U8, \"U8\");\r\n    this.registerBasicClass(TypeKind.U16, \"U16\");\r\n    this.registerBasicClass(TypeKind.U32, \"U32\");\r\n    this.registerBasicClass(TypeKind.U64, \"U64\");\r\n    this.registerBasicClass(TypeKind.USIZE, \"Usize\");\r\n    this.registerBasicClass(TypeKind.BOOL, \"Bool\");\r\n    this.registerBasicClass(TypeKind.F32, \"F32\");\r\n    this.registerBasicClass(TypeKind.F64, \"F64\");\r\n    if (options.hasFeature(Feature.SIMD)) this.registerBasicClass(TypeKind.V128, \"V128\");\r\n\r\n    // register 'start'\r\n    {\r\n      let element = assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n\r\n    // register 'abort' if present\r\n    if (this.elementsLookup.has(\"abort\")) {\r\n      let element = <Element>this.elementsLookup.get(\"abort\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      if (instance) this.abortInstance = instance;\r\n    }\r\n\r\n    // register 'memory.allocate' if present\r\n    if (this.elementsLookup.has(\"memory\")) {\r\n      let element = <Element>this.elementsLookup.get(\"memory\");\r\n      let members = element.members;\r\n      if (members) {\r\n        if (members.has(\"allocate\")) {\r\n          element = assert(members.get(\"allocate\"));\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n          if (instance) this.memoryAllocateInstance = instance;\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    if (\r\n      this.elementsLookup.has(\"__gc_allocate\") &&\r\n      this.elementsLookup.has(\"__gc_link\") &&\r\n      this.elementsLookup.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n  }\r\n\r\n  private registerBasicClass(typeKind: TypeKind, className: string): void {\r\n    if (this.elementsLookup.has(className)) {\r\n      let element = assert(this.elementsLookup.get(className));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.basicClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Sets a constant integer value. */\r\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantIntegerValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Sets a constant float value. */\r\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n      .withConstantFloatValue(value);\r\n    global.set(CommonFlags.RESOLVED);\r\n    this.elementsLookup.set(globalName, global);\r\n  }\r\n\r\n  /** Tries to locate an import by traversing exports and queued exports. */\r\n  private tryLocateImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Checks that only supported decorators are present. */\r\n  private checkDecorators(\r\n    decorators: DecoratorNode[],\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (flag == DecoratorFlags.BUILTIN) {\r\n          if (decorator.range.source.isLibrary) {\r\n            presentFlags |= flag;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          }\r\n        } else if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Checks and sets up global options of an element. */\r\n  private checkGlobal(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    // alias globally if explicitly annotated @global or exported from a top-level library file\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n      }\r\n    }\r\n    // builtins use the global name directly\r\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      element.internalName = declaration.programLevelInternalName;\r\n    }\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: {\r\n          assert(false); // should have been reported while parsing\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(false);\r\n      }\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      }\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobal(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    externalIdentifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = externalIdentifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = externalIdentifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if a top-level export of a library file\r\n    var source = externalIdentifier.range.source;\r\n    if (source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          externalIdentifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n\r\n    // add module level export if a top-level export of an entry file\r\n    } else if (source.isEntry) {\r\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\r\n        element,\r\n        identifier: externalIdentifier\r\n      });\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (this.elementsLookup.has(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          <Element>this.elementsLookup.get(referencedName),\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE |\r\n            DecoratorFlags.EXTERNAL\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobal(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          if (existingExport.element !== namespace) { // not merged\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: namespace,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators,\r\n              DecoratorFlags.GLOBAL |\r\n              DecoratorFlags.INLINE |\r\n              DecoratorFlags.EXTERNAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: global,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n      }\r\n      this.checkGlobal(global, declaration);\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(value: I64): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances by class type arguments and function type arguments. */\r\n  instances: Map<string,Map<string,Function>> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Applies class type arguments to the context of a partially resolved instance method. */\r\n  applyClassTypeArguments(contextualTypeArguments: Map<string,Type>): void {\r\n    var classTypeArguments = assert(this.classTypeArguments); // set only if partial\r\n    var classDeclaration = assert(this.classPrototype).declaration;\r\n    var classTypeParameters = classDeclaration.typeParameters;\r\n    var numClassTypeParameters = classTypeParameters.length;\r\n    assert(numClassTypeParameters == classTypeArguments.length);\r\n    for (let i = 0; i < numClassTypeParameters; ++i) {\r\n      contextualTypeArguments.set(\r\n        classTypeParameters[i].name.text,\r\n        classTypeArguments[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do {\r\n      if (current === basePtototype) return true;\r\n    } while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  lookupField(name: string, shouldReadonly: boolean = false): Element | null {\r\n    if (this.members == null) return null;\r\n    var member = this.members.get(name);\r\n    if (\r\n      member == null || member.kind != ElementKind.FIELD ||\r\n      (shouldReadonly && !member.is(CommonFlags.READONLY))\r\n    ) return null;\r\n    return member;\r\n  }\r\n\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 2,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 6,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 7,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 8,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 9,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 10,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 11,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 12,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 13,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.wrappedLocals = i64_new(0);\r\n    flow.wrappedLocalsExt = null;\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `currentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      this.parentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do if (current.scopedLocals && (local = current.scopedLocals.get(name))) return local;\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the value of the local at the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    if (index < 0) return true; // inlined constant\r\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!(ext && i < ext.length)) return false;\r\n    return bitsetIs(ext[i], index - (i + 1) * 64);\r\n  }\r\n\r\n  /** Sets if the value of the local at the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    if (index < 0) return; // inlined constant\r\n    if (index < 64) {\r\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\r\n      return;\r\n    }\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!ext) {\r\n      this.wrappedLocalsExt = ext = new Array(i + 1);\r\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\r\n    } else {\r\n      while (ext.length <= i) ext.push(i64_new(0));\r\n    }\r\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !this.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n      case TypeKind.V128: return module.createV128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.V128: return \"v\";\r\n      case TypeKind.VOID: return \"_\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(program, this);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFlow = startFunctionInstance.flow;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(\"HEAP_BASE\");\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // set up memory\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let [name, moduleExport] of program.moduleLevelExports) {\r\n      this.makeModuleExport(name, moduleExport.element);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (element.kind == ElementKind.NAMESPACE) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (element.kind) {\r\n\r\n      // export global\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<Global>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<EnumValue>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // export function\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n\r\n      // export getter and setter\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>element).getterPrototype);\r\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterPrototype;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export a getter and a setter\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // skip prototype and export instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          let ctor = instance.constructorInstance;\r\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // all possible members already handled above\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE: break;\r\n\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFlow = this.currentFlow;\r\n          this.currentFlow = startFunctionInstance.flow;\r\n          startFunctionBody.push(\r\n            this.compileStatement(statement)\r\n          );\r\n          this.currentFlow = previousFlow;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n          global.set(CommonFlags.RESOLVED);\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if resolved lazily\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        if (declaration) {\r\n          mangleImportName(global, declaration);\r\n        } else {\r\n          mangleImportName_moduleName = \"env\";\r\n          mangleImportName_elementName = global.simpleName;\r\n        }\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (declaration !== null && declaration.initializer !== null) {\r\n      if (!initExpr) {\r\n        initExpr = this.compileExpression(\r\n          declaration.initializer,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        let initExpr: ExpressionRef;\r\n        if (valueDeclaration.value) {\r\n          initExpr = this.compileExpression(\r\n            <Expression>valueDeclaration.value,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueDeclaration.value.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          previousValueIsMut = true;\r\n        } else {\r\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[]\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      makeMap<string,Type>(),\r\n      null,\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type>,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n    var body = assert(declaration.body);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    var stmts: BinaryenExportRef[];\r\n    if (body.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>body).statements);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(body.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.is(CommonFlags.ARROW));\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let stmt = this.compileExpression(\r\n        (<ExpressionStatement>body).expression,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      flow.set(FlowFlags.RETURNS);\r\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      stmts = [ stmt ];\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.is(CommonFlags.MAIN)) {\r\n      module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\r\n      stmts.unshift(\r\n        module.createIf(\r\n          module.createUnary(\r\n            UnaryOp.EqzI32,\r\n            module.createGetGlobal(\"~started\", NativeType.I32)\r\n          ),\r\n          module.createBlock(null, [\r\n            module.createCall(\"start\", null, NativeType.None),\r\n            module.createSetGlobal(\"~started\", module.createI32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(\"this\")).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.createIf(\r\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.createSetLocal(thisLocalIndex,\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`\r\n        stmts.push(\r\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n        );\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (body) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      this.currentFlow = instance.flow;\r\n      let stmts = this.compileFunctionBody(instance);\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmts.length\r\n          ? stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\r\n          : module.createNop()\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(\r\n              <ClassPrototype>element,\r\n              [],\r\n              makeMap<string,Type>()\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              makeMap<string,Type>(),\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let element = fileLevelExports.get(\r\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\r\n      );\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(\r\n              <ClassPrototype>element,\r\n              [],\r\n              makeMap<string,Type>()\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              makeMap<string,Type>(),\r\n              null,\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[]\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      makeMap<string,Type>(),\r\n      declaration\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type>,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFlow.parentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n    var actualFunction = outerFlow.actualFunction;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      actualFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\r\n\r\n    return module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      flow.parentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(\r\n            this.compileAssignmentWithValue(declaration.name, initExpr)\r\n          );\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      outerFlow.actualFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          this.currentFlow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var target = this.resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.resolver.currentThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = flow.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(\"this\"));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.createSetLocal(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.createIf(\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              this.makeAllocation(<Class>classInstance)\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterTypes[i].type,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY: {\r\n        indexArg = this.compileGetter(<Property>target, expression.expression);\r\n        let type = this.currentType;\r\n        signature = type.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(\"this\", thisType, false);\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(\"super\", baseInstance.type, thisLocal.index);\r\n    }\r\n\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var declaration = instance.prototype.declaration;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    {\r\n      let stmts = this.compileFunctionBody(instance);\r\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccess(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var flow = this.currentFlow;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      flow.actualFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      makeMap<string,Type>(flow.contextualTypeArguments),\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(\"this\"));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.createIf(\r\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.createSetLocal(thisLocal.index,\r\n                    this.makeAllocation(<Class>classInstance)\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.createGetLocal(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.createBlock(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.resolver.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\r\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expr = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(compiledValues[i]);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    flow.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      this.makeAllocation(classReference)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var ctorInstance = classInstance.constructorInstance;\r\n    if (ctorInstance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!ctorInstance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(ctorInstance);\r\n      return ctorInstance;\r\n    }\r\n\r\n    // use the signature of the parent constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    var signature = baseClass\r\n      ? this.ensureConstructor(baseClass, reportNode).signature\r\n      : new Signature(null, classInstance.type, classInstance.type);\r\n\r\n    var internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n\r\n    var nativeDummy = assert(this.program.elementsLookup.get(\"NATIVE_CODE\"));\r\n    assert(nativeDummy.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n\r\n    ctorInstance = new Function(\r\n      <FunctionPrototype>nativeDummy,\r\n      internalName,\r\n      signature,\r\n      classInstance,\r\n      null\r\n    );\r\n    ctorInstance.set(CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR | CommonFlags.COMPILED);\r\n    classInstance.constructorInstance = ctorInstance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = ctorInstance.flow;\r\n\r\n    // generate body\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.createIf(\r\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ),\r\n        module.createSetLocal(0,\r\n          this.makeAllocation(classInstance)\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.createGetLocal(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.createSetLocal(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.createGetLocal(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = ctorInstance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(ctorInstance.internalName, typeRef, varTypes,\r\n      stmts.length == 1\r\n        ? stmts[0]\r\n        : module.createBlock(null, stmts, nativeSizeType)\r\n    );\r\n    ctorInstance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return ctorInstance;\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect(\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module)\r\n    );\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: {// instance property (here: getter)\r\n        return this.compileGetter(<Property>target, propertyAccess);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      outerFlow.actualFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    ifElseFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(classInstance: Class): ExpressionRef {\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n\r\n    // __gc_allocate(size, markFn)\r\n    if (program.hasGC && classInstance.type.isManaged(program)) {\r\n      let allocateInstance = assert(program.gcAllocateInstance);\r\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset),\r\n          module.createI32(\r\n            ensureGCHook(this, classInstance)\r\n          )\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n\r\n    // memory.allocate(size)\r\n    } else {\r\n      let allocateInstance = program.memoryAllocateInstance;\r\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset)\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(\"this\")).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let fieldDeclaration = field.prototype.declaration;\r\n      let initializer = fieldDeclaration.initializer;\r\n      if (initializer) { // use initializer\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression( // reports\r\n              initializer,\r\n              fieldType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = fieldDeclaration.parameterIndex;\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.createGetLocal(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.simpleName)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = declaration.programLevelInternalName;\r\n\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  FlowFlags,\r\n\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  DecoratorFlags,\r\n  FieldPrototype,\r\n  Field,\r\n  Global,\r\n  Flow\r\n} from \"./program\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(program: Program) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signatures specifically\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\r\n      if (!signature) return null;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\r\n\r\n    // check file-global / program-global enum or class\r\n    {\r\n      let elementsLookup = this.program.elementsLookup;\r\n      let element: Element | null;\r\n      if (\r\n        (element = elementsLookup.get(localName)) || // file-global\r\n        (element = elementsLookup.get(globalName))   // program-global\r\n      ) {\r\n        switch (element.kind) {\r\n          case ElementKind.ENUM: {\r\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_generic,\r\n                  node.range, element.internalName\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n            return Type.i32;\r\n          }\r\n          case ElementKind.CLASS_PROTOTYPE: {\r\n            let instance = this.resolveClassInclTypeArguments(\r\n              <ClassPrototype>element,\r\n              typeNode.typeArguments,\r\n              makeMap<string,Type>(contextualTypeArguments),\r\n              node\r\n            ); // reports\r\n            if (!instance) return null;\r\n            return node.isNullable ? instance.type.asNullable() : instance.type;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    {\r\n      let alias = this.program.typeAliases.get(simpleName);\r\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\r\n    }\r\n\r\n    // resolve parameters\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var typeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let numTypeArguments = typeArgumentNodes.length;\r\n      typeArguments = new Array<Type>(numTypeArguments);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!paramType) return null;\r\n        typeArguments[i] = paramType;\r\n      }\r\n      if (numTypeArguments) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(typeArguments);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    // check file-global / program-global type\r\n    {\r\n      let typesLookup = this.program.typesLookup;\r\n      let type: Type | null;\r\n      if (\r\n        (type = typesLookup.get(localName)) ||\r\n        (type = typesLookup.get(globalName))\r\n      ) {\r\n        if (!type.is(TypeFlags.REFERENCE) && node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // check built-in macro types\r\n    if (simpleName == \"NATIVE\") {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: return Type.i32;\r\n        case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: return Type.u32;\r\n        case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.V128: return Type.v128;\r\n        case TypeKind.VOID: return Type.void;\r\n        default: assert(false);\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    alternativeReportNode: Node | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range.atEnd,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    flow: Flow | null,\r\n    context: Element | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n\r\n    if (flow) {\r\n      let local = flow.lookupLocal(name);\r\n      if (local) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return local;\r\n      }\r\n    }\r\n\r\n    if (context) {\r\n\r\n      switch (context.kind) {\r\n        case ElementKind.FUNCTION: { // use prototype\r\n          context = (<Function>context).prototype.parent;\r\n          break;\r\n        }\r\n        case ElementKind.CLASS: { // use prototype\r\n          context = (<Class>context).prototype.parent;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // search context\r\n      while (context) {\r\n        let members = context.members;\r\n        if (members) {\r\n          if (element = members.get(name)) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n        }\r\n        context = context.parent;\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    var elementsLookup = this.program.elementsLookup;\r\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = elementsLookup.get(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var resolveType = assert(global.declaration).type;\r\n    if (!resolveType) return false;\r\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\r\n    if (!resolvedType) return false;\r\n    global.type = resolvedType;\r\n    global.set(CommonFlags.RESOLVED);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    flow: Flow,\r\n    contextualType: Type,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let basicClasses = this.program.basicClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && basicClasses.has(type.kind)) {\r\n            classReference = assert(basicClasses.get(type.kind));\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = this.resolveFunction(\r\n          assert((<Property>target).getterPrototype),\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    flow: Flow,\r\n    contextualType: Type,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  determineIntegerLiteralType(\r\n    intValue: I64,\r\n    contextualType: Type\r\n  ): Type {\r\n\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    flow: Flow,\r\n    contextualType: Type = Type.void,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        if ((<AssertionExpression>expression).assertionKind == AssertionKind.NONNULL) {\r\n          return this.resolveExpression(\r\n            (<AssertionExpression>expression).expression,\r\n            flow,\r\n            contextualType,\r\n            reportMode\r\n          );\r\n        }\r\n        let type = this.resolveType(\r\n          assert((<AssertionExpression>expression).toType),\r\n          flow.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!type) return null;\r\n        let element: Element | null = type.classReference;\r\n        if (!element) {\r\n          let signature = type.signatureReference;\r\n          if (!signature) return null;\r\n          element = signature.asFunctionTarget(this.program);\r\n        }\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        // TODO: overloads\r\n        switch ((<UnaryPrefixExpression>expression).operator) {\r\n          case Token.MINUS: {\r\n            let operand = (<UnaryPrefixExpression>expression).operand;\r\n            // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n            if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n              let type = this.determineIntegerLiteralType(\r\n                i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n                contextualType\r\n              );\r\n              return assert(this.program.basicClasses.get(type.kind));\r\n            }\r\n            return this.resolveExpression(\r\n              operand,\r\n              flow,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          case Token.PLUS:\r\n          case Token.PLUS_PLUS:\r\n          case Token.MINUS_MINUS: {\r\n            return this.resolveExpression(\r\n              (<UnaryPrefixExpression>expression).operand,\r\n              flow,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          case Token.EXCLAMATION: {\r\n            return assert(this.program.basicClasses.get(TypeKind.BOOL));\r\n          }\r\n          case Token.TILDE: {\r\n            let resolvedOperand = this.resolveExpression(\r\n              (<UnaryPrefixExpression>expression).operand,\r\n              flow,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n            if (!resolvedOperand) return null;\r\n            throw new Error(\"not implemented\"); // TODO: should all elements have a corresponding type right away?\r\n          }\r\n          default: assert(false);\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        // TODO: overloads\r\n        switch ((<UnaryPostfixExpression>expression).operator) {\r\n          case Token.PLUS_PLUS:\r\n          case Token.MINUS_MINUS: {\r\n            return this.resolveExpression(\r\n              (<UnaryPostfixExpression>expression).operand,\r\n              flow,\r\n              contextualType,\r\n              reportMode\r\n            );\r\n          }\r\n          default: assert(false);\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        // TODO: all sorts of unary and binary expressions, which means looking up overloads and\r\n        // evaluating their return types, knowing the semantics of different operators etc.\r\n        // should probably share that code with the compiler somehow, as it also does exactly this.\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = flow.lookupLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = flow.parentFunction.parent;\r\n        if (parent) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = flow.lookupLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = flow.actualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, flow, flow.actualFunction, reportMode);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.INTEGER: {\r\n            return assert(\r\n              this.program.basicClasses.get(\r\n                this.determineIntegerLiteralType(\r\n                  (<IntegerLiteralExpression>expression).value,\r\n                  contextualType\r\n                ).kind\r\n              )\r\n            );\r\n          }\r\n          case LiteralKind.FLOAT: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return assert(\r\n              this.program.basicClasses.get(\r\n                contextualType == Type.f32\r\n                  ? TypeKind.F32\r\n                  : TypeKind.F64\r\n              )\r\n            );\r\n          }\r\n          case LiteralKind.STRING: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return this.program.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, flow, contextualType, reportMode);\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = this.resolveFunctionInclTypeArguments(\r\n            <FunctionPrototype>target,\r\n            (<CallExpression>expression).typeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression,\r\n            reportMode\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.asFunctionTarget(this.program);\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n              targetExpression.range, target.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var classTypeArguments = prototype.classTypeArguments; // set only if partially resolved\r\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var classInstances = prototype.instances.get(classInstanceKey);\r\n    if (classInstances) {\r\n      let instance = classInstances.get(instanceKey);\r\n      if (instance) return instance;\r\n    }\r\n\r\n    var declaration = prototype.declaration;\r\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\r\n    var classPrototype = prototype.classPrototype;\r\n\r\n    // apply class type arguments if a partially resolved instance method\r\n    if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = this.resolveClass(\r\n        assert(classPrototype),\r\n        classTypeArguments,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!classInstance) return null;\r\n      let explicitThisType = signatureNode.explicitThisType;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n        if (!thisType) return null;\r\n      } else {\r\n        thisType = classInstance.type;\r\n      }\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    } else {\r\n      if (signatureNode.explicitThisType) {\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          signatureNode.explicitThisType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      prototype,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\r\n    classInstances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototype partially by applying the specified type arguments. */\r\n  resolveFunctionPartially(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): FunctionPrototype | null {\r\n    assert(prototype.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(prototype.classPrototype);\r\n\r\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\r\n\r\n    var simpleName = prototype.simpleName;\r\n    var partialKey = typesToString(typeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      prototype.declaration,\r\n      classPrototype,\r\n      prototype.decoratorFlags\r\n    );\r\n    partialPrototype.flags = prototype.flags;\r\n    partialPrototype.operatorKind = prototype.operatorKind;\r\n    partialPrototype.classTypeArguments = typeArguments;\r\n    partialPrototype.instances = prototype.instances;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // apply class type arguments if a partially resolved instance method\r\n      // FIXME: this is done once more in resolveFunction. required here for resolveTypeArguments,\r\n      // required there for just resolving a function no matter if a partial or not.\r\n      let classTypeArguments = prototype.classTypeArguments;\r\n      if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    prototype: ClassPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    var declaration = prototype.declaration;\r\n    if (typeArguments) {\r\n      let typeParameters = declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameters.length;\r\n      let actualTypeArguments = typeArguments.length;\r\n      assert(actualTypeArguments == expectedTypeArguments);\r\n      for (let i = 0; i < actualTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      assert(declaration.typeParameters.length == 0);\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.resolveType(\r\n        declaration.extendsType,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            declaration.extendsType.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            declaration.extendsType.range, baseClass.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(declaration.name.range, declaration.extendsType.range)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var simpleName = prototype.simpleName;\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve constructor by first applying the class type arguments\r\n    var constructorPrototype = prototype.constructorPrototype;\r\n    if (constructorPrototype) {\r\n      let constructorPartial = this.resolveFunctionPartially(\r\n        constructorPrototype,\r\n        typeArguments,\r\n        reportMode\r\n      );\r\n      if (!constructorPartial) return null;\r\n      instance.constructorInstance = this.resolveFunction(\r\n        constructorPartial,\r\n        null,\r\n        makeMap<string,Type>(),\r\n        reportMode\r\n      );\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (prototype.instanceMembers) {\r\n      for (let member of prototype.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!instance.members) instance.members = new Map();\r\n            else if (instance.members.has(member.simpleName)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                fieldDeclaration.name.range,\r\n                member.simpleName\r\n              );\r\n              break;\r\n            }\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields\r\n            if (!fieldDeclaration.type) {\r\n              if (baseClass !== null && baseClass.members !== null) {\r\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\r\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\r\n                  assert(baseField.kind == ElementKind.FIELD);\r\n                  fieldType = (<Field>baseField).type;\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    fieldDeclaration.name.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldDeclaration.type,\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = this.resolveFunctionPartially(\r\n              <FunctionPrototype>member,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialPrototype) return null;\r\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n            instance.members.set(member.simpleName, partialPrototype);\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\r\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              prototype\r\n            );\r\n            let partialGetterPrototype = this.resolveFunctionPartially(\r\n              getterPrototype,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype\r\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = this.resolveFunctionPartially(\r\n                setterPrototype,\r\n                typeArguments,\r\n                reportMode\r\n              );\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype\r\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = this.resolveFunctionPartially(\r\n          overloadPrototype,\r\n          typeArguments,\r\n          reportMode\r\n        );\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = this.resolveFunction(\r\n          operatorPartial,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type>,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\r\n      // FIXME: doesn't honor the actual externally visible name\r\n      this.visitElement(moduleExport.element);\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instances of element.instances.values()) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable,\r\n  IndexSignatureDeclaration\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          // TODO: this works for now, but the representation isn't great\r\n          identifier = Node.createIdentifierExpression(\r\n            identifier.text + \".\" + tn.readIdentifier(),\r\n            tn.range(identifier.range.start, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.set(CommonFlags.QUOTED);\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.is(CommonFlags.QUOTED)) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0; // JS\r\nglobalScope.ASC_NO_TREESHAKING = false;\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\r\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n}\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  AtomicRMWOp\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return (\r\n        classType !== null && classType.prototype.extends(compiler.program.arrayPrototype)\r\n      ) ? module.createI32(1) : module.createI32(0);\r\n    }\r\n    case \"isDefined\": { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case \"isConstant\": { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case \"isManaged\": { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          ret = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          ret = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"atomic.load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createAtomicLoad(\r\n        typeArguments[0].byteSize,\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"atomic.store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createAtomicStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"atomic.add\":  // add<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case \"atomic.sub\":  // sub<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case \"atomic.and\":  // and<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case \"atomic.or\":   // or<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case \"atomic.xor\":  // xor<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    case \"atomic.xchg\": // xchg<T!>(ptr: usize, value: T, constantOffset?: usize): T;\r\n    {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      let RMWOp: AtomicRMWOp | null = null;\r\n      switch (prototype.simpleName) {\r\n        case \"add\": { RMWOp = AtomicRMWOp.Add; break; }\r\n        case \"sub\": { RMWOp = AtomicRMWOp.Sub; break; }\r\n        case \"and\": { RMWOp = AtomicRMWOp.And; break; }\r\n        case \"or\": { RMWOp = AtomicRMWOp.Or; break; }\r\n        case \"xor\": { RMWOp = AtomicRMWOp.Xor; break; }\r\n        case \"xchg\": { RMWOp = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      if (RMWOp !== null) {\r\n        return module.createAtomicRMW(\r\n          RMWOp, typeArguments[0].byteSize, offset, arg0, arg1, type.toNativeType()\r\n        );\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    case \"atomic.cmpxchg\": { // cmpxchg<T!>(ptr: usize, expected:T, replacement: T, constantOffset?: usize): T;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 3 || operands.length > 4) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 3) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n\r\n      let offset = operands.length == 4 ? evaluateConstantOffset(compiler, operands[3]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createAtomicCmpxchg(\r\n        typeArguments[0].byteSize, offset, arg0, arg1, arg2, type.toNativeType()\r\n      );\r\n    }\r\n    case \"atomic.wait\": { // wait<T!>(ptr: usize, expected:T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      let hasError = typeArguments == null;\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        hasError = true;\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        hasError = true;\r\n      }\r\n\r\n      if (!typeArguments || hasError) {\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        Type.i64,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type = typeArguments[0];\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n      }\r\n\r\n      return module.createAtomicWait(\r\n        arg0, arg1, arg2, type.toNativeType()\r\n      );\r\n    }\r\n    case \"atomic.notify\": { // notify<T!>(ptr: usize, count: u32): u32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      let hasError = typeArguments == null;\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        hasError = true;\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        hasError = true;\r\n      }\r\n\r\n      if (!typeArguments || hasError) {\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.i32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      return module.createAtomicWake(\r\n        arg0, arg1\r\n      );\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"memory.size\": { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryCopy(arg0, arg1, arg2);\r\n    }\r\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryFill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case \"instantiate\": {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classInstance = typeArguments[0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case \"ERROR\": {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case \"WARNING\": {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case \"INFO\": {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // gc\r\n\r\n    case \"iterateRoots\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n      case \"i32.atomic.load8_u\": return deferASM(\"atomic.load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.load16_u\": return deferASM(\"atomic.load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.load\": return deferASM(\"atomic.load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case \"i64.atomic.load8_u\": return deferASM(\"atomic.load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.load16_u\": return deferASM(\"atomic.load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.load32_u\": return deferASM(\"atomic.load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.load\": return deferASM(\"atomic.load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case \"i32.atomic.store8\": return deferASM(\"atomic.store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case \"i32.atomic.store16\": return deferASM(\"atomic.store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case \"i32.atomic.store\": return deferASM(\"atomic.store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case \"i64.atomic.store8\": return deferASM(\"atomic.store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n      case \"i64.atomic.store16\": return deferASM(\"atomic.store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n      case \"i64.atomic.store32\": return deferASM(\"atomic.store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n      case \"i64.atomic.store\": return deferASM(\"atomic.store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.add\": return deferASM(\"atomic.add\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.add\": return deferASM(\"atomic.add\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.add\": return deferASM(\"atomic.add\", compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.add\": return deferASM(\"atomic.add\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.add\": return deferASM(\"atomic.add\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.add\": return deferASM(\"atomic.add\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.add\": return deferASM(\"atomic.add\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.sub\": return deferASM(\"atomic.sub\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.sub\": return deferASM(\"atomic.sub\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.sub\": return deferASM(\"atomic.sub\", compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.sub\": return deferASM(\"atomic.sub\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.sub\": return deferASM(\"atomic.sub\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.sub\": return deferASM(\"atomic.sub\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.sub\": return deferASM(\"atomic.sub\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.and\": return deferASM(\"atomic.and\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.and\": return deferASM(\"atomic.and\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.and\": return deferASM(\"atomic.and\", compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.and\": return deferASM(\"atomic.and\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.and\": return deferASM(\"atomic.and\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.and\": return deferASM(\"atomic.and\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.and\": return deferASM(\"atomic.and\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.or\": return deferASM(\"atomic.or\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.or\": return deferASM(\"atomic.or\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.or\": return deferASM(\"atomic.or\", compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.or\": return deferASM(\"atomic.or\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.or\": return deferASM(\"atomic.or\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.or\": return deferASM(\"atomic.or\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.or\": return deferASM(\"atomic.or\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.xor\": return deferASM(\"atomic.xor\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.xor\": return deferASM(\"atomic.xor\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.xor\": return deferASM(\"atomic.xor\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.xor\": return deferASM(\"atomic.xor\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.xor\": return deferASM(\"atomic.xor\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.xor\": return deferASM(\"atomic.xor\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.xor\": return deferASM(\"atomic.xor\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.xchg\": return deferASM(\"atomic.xchg\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.atomic.rmw8_u.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw16_u.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i32.atomic.rmw.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case \"i64.atomic.rmw8_u.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw16_u.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw32_u.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case \"i64.atomic.rmw.cmpxchg\": return deferASM(\"atomic.cmpxchg\", compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case \"i32.wait\": return deferASM(\"atomic.wait\", compiler, Type.i32, operands, Type.u32, reportNode);\r\n      case \"i64.wait\": return deferASM(\"atomic.wait\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case \"i32.notify\": return deferASM(\"atomic.notify\", compiler, Type.i32, operands, Type.u32, reportNode);\r\n      case \"i64.notify\": return deferASM(\"atomic.notify\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  // Built-in wasm functions can be namespaced like atomic.{OPERATION}\r\n  // Split name by '.' to find member function prototype\r\n  // FIXME: This is slower than it needs to be due to the way resolving works atm\r\n  var names = name.split(\".\");\r\n  var prototype: Element = assert(compiler.program.elementsLookup.get(names[0]));\r\n  if (names.length > 1) {\r\n    for (let i = 1; i < names.length; i++) {\r\n      const subName = names[i];\r\n      if (prototype && prototype.members) {\r\n        prototype = assert(prototype.members.get(subName));\r\n      }\r\n    }\r\n  }\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\");\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsLookup.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"i_\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"i_\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for internals)\r\n  var members = classInstance.members;\r\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"I_\" : \"i_\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null): Map<K,V> {\r\n  if (original) {\r\n    let cloned = new Map<K,V>();\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    return cloned;\r\n  }\r\n  return new Map<K,V>();\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}